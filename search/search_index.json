{
    "docs": [
        {
            "location": "/", 
            "text": "Angular CLI\n\n\n\n\n\u672c\u6587\u6863\u6574\u7406\u7ffb\u8bd1\u81ea Angular CLI GitHub \nWiki\n \u9875\u9762\n\n\n\u5de5\u5177\u4f7f\u7528\uff1a\u4ee5\u4e0b\u662f\u6587\u6863\u5236\u4f5c\u5de5\u5177\uff0c\u5982\u679c\u6709\u66f4\u597d\u7684\u6587\u6863\u5236\u4f5c\u65b9\u6cd5\uff0c\u6b22\u8fce\u5728\nIssues\n\u4e2d\u7559\u8a00\n\n\n\n\n\u7f16\u8f91\u5668 VS Code, \u63d2\u4ef6\u4fee\u6539\u81ea[chun.vscode-translate]\u4f5c\u4e3a\u5373\u65f6\u7ffb\u8bd1\u7528\n\n\n\u6587\u6863\u8bed\u8a00markdown\n\n\n\u6587\u6863\u751f\u6210\u5668mkdocs,\u4f7f\u7528mkdocs-material\u6a21\u677f\n\n\n\u5bc4\u5b58\u4e8egh-page\n\n\n\n\n\n\n\u6982\u8ff0\n\n\nAngular CLI\u662f\u521d\u59cb\u5316\uff0c\u5f00\u53d1\uff0c\u652f\u6491\u548c\u7ef4\u62a4\nAngular\n\u5e94\u7528\u7a0b\u5e8f\u7684\u5de5\u5177\n\n\n\u5165\u95e8\n\n\n\u8981\u5b89\u88c5Angular CLI\uff1a\n\n\nnpm install -g @angular/cli\n\n\n\n\n\u901a\u8fc7\u5f00\u53d1\u670d\u52a1\u5668\u751f\u6210\u5e76\u63d0\u4f9bAngular\u9879\u76ee\n\u521b\u5efa\n\u548c\n\u8fd0\u884c\n\u65b0\u9879\u76ee\uff1a\n\n\nng new my-project\n\ncd\n my-project\nng serve\n\n\n\n\n\u5bfc\u822a\u5230http://localhost:4200/. \u5982\u679c\u60a8\u66f4\u6539\u4efb\u4f55\u6e90\u6587\u4ef6\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u5c06\u81ea\u52a8\u91cd\u65b0\u52a0\u8f7d\u3002\n\n\n\u6346\u7ed1\n\n\n\u6240\u6709\u7248\u672c\u90fd\u4f7f\u7528\u6346\u7ed1\uff0c \u5e76\u5728\nng build --prod\n\u6216\nng serve --prod\n\u4e2d\u4f7f\u7528\n--prod\n\u6807\u5fd7\u4e5f\u5c06\u5229\u7528\nuglifying\n\u548c\ntree-shaking\n\u6447\u6643\u529f\u80fd\u3002\n\n\n\u5355\u5143\u6d4b\u8bd5\n\n\nng \ntest\n\n\n\n\n\n\u6d4b\u8bd5\u5c06\u5728\u901a\u8fc7\nKarma\n\u6267\u884c\u6784\u5efa\u4e4b\u540e\u6267\u884c, \u5b83\u4f1a\u81ea\u52a8\u76d1\u89c6\u4f60\u7684\u6587\u4ef6\u7684\u53d8\u5316\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7\n--watch = false\n\u6216\n--single-run\n\u8fd0\u884c\u4e00\u6b21\u6d4b\u8bd5\u3002\n\n\n\u7aef\u5230\u7aef\u6d4b\u8bd5\n\n\nng e2e\n\n\n\n\n\u5728\u8fd0\u884c\u6d4b\u8bd5\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u901a\u8fc7\u201cng serve\u201d\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u3002\n\u7aef\u5230\u7aef\u6d4b\u8bd5\u901a\u8fc7\n\u91cf\u89d2\u5668\n\u8fd0\u884c.\n\n\n\u5176\u4ed6\u547d\u4ee4\n\n\n\n\nng new\n\n\nng serve\n\n\nng generate\n\n\nng lint\n\n\nng test\n\n\nng e2e\n\n\nng build\n\n\nng get/ng set\n\n\nng doc\n\n\nng eject\n\n\nng xi18n\n\n\nng update\n\n\n\n\n\u914d\u7f6e\u67b6\u6784\n\n\n\n\n\u914d\u7f6e\u67b6\u6784\n\n\n\n\n\u9644\u52a0\u4fe1\u606f\n\n\n\u6709\u51e0\u4e2a\n\u6545\u4e8b\n\u4f1a\u5f15\u5bfc\u60a8\u8bbe\u7f6eAngular\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u65b9\u9762\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/#angular-cli", 
            "text": "\u672c\u6587\u6863\u6574\u7406\u7ffb\u8bd1\u81ea Angular CLI GitHub  Wiki  \u9875\u9762  \u5de5\u5177\u4f7f\u7528\uff1a\u4ee5\u4e0b\u662f\u6587\u6863\u5236\u4f5c\u5de5\u5177\uff0c\u5982\u679c\u6709\u66f4\u597d\u7684\u6587\u6863\u5236\u4f5c\u65b9\u6cd5\uff0c\u6b22\u8fce\u5728 Issues \u4e2d\u7559\u8a00   \u7f16\u8f91\u5668 VS Code, \u63d2\u4ef6\u4fee\u6539\u81ea[chun.vscode-translate]\u4f5c\u4e3a\u5373\u65f6\u7ffb\u8bd1\u7528  \u6587\u6863\u8bed\u8a00markdown  \u6587\u6863\u751f\u6210\u5668mkdocs,\u4f7f\u7528mkdocs-material\u6a21\u677f  \u5bc4\u5b58\u4e8egh-page", 
            "title": "Angular CLI"
        }, 
        {
            "location": "/#_1", 
            "text": "Angular CLI\u662f\u521d\u59cb\u5316\uff0c\u5f00\u53d1\uff0c\u652f\u6491\u548c\u7ef4\u62a4 Angular \u5e94\u7528\u7a0b\u5e8f\u7684\u5de5\u5177", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/#_2", 
            "text": "\u8981\u5b89\u88c5Angular CLI\uff1a  npm install -g @angular/cli  \u901a\u8fc7\u5f00\u53d1\u670d\u52a1\u5668\u751f\u6210\u5e76\u63d0\u4f9bAngular\u9879\u76ee \u521b\u5efa \u548c \u8fd0\u884c \u65b0\u9879\u76ee\uff1a  ng new my-project cd  my-project\nng serve  \u5bfc\u822a\u5230http://localhost:4200/. \u5982\u679c\u60a8\u66f4\u6539\u4efb\u4f55\u6e90\u6587\u4ef6\uff0c\u8be5\u5e94\u7528\u7a0b\u5e8f\u5c06\u81ea\u52a8\u91cd\u65b0\u52a0\u8f7d\u3002", 
            "title": "\u5165\u95e8"
        }, 
        {
            "location": "/#_3", 
            "text": "\u6240\u6709\u7248\u672c\u90fd\u4f7f\u7528\u6346\u7ed1\uff0c \u5e76\u5728 ng build --prod \u6216 ng serve --prod \u4e2d\u4f7f\u7528 --prod \u6807\u5fd7\u4e5f\u5c06\u5229\u7528 uglifying \u548c tree-shaking \u6447\u6643\u529f\u80fd\u3002", 
            "title": "\u6346\u7ed1"
        }, 
        {
            "location": "/#_4", 
            "text": "ng  test   \u6d4b\u8bd5\u5c06\u5728\u901a\u8fc7 Karma \u6267\u884c\u6784\u5efa\u4e4b\u540e\u6267\u884c, \u5b83\u4f1a\u81ea\u52a8\u76d1\u89c6\u4f60\u7684\u6587\u4ef6\u7684\u53d8\u5316\u3002 \u60a8\u53ef\u4ee5\u901a\u8fc7 --watch = false \u6216 --single-run \u8fd0\u884c\u4e00\u6b21\u6d4b\u8bd5\u3002", 
            "title": "\u5355\u5143\u6d4b\u8bd5"
        }, 
        {
            "location": "/#_5", 
            "text": "ng e2e  \u5728\u8fd0\u884c\u6d4b\u8bd5\u4e4b\u524d\uff0c\u8bf7\u786e\u4fdd\u60a8\u901a\u8fc7\u201cng serve\u201d\u670d\u52a1\u5e94\u7528\u7a0b\u5e8f\u3002\n\u7aef\u5230\u7aef\u6d4b\u8bd5\u901a\u8fc7 \u91cf\u89d2\u5668 \u8fd0\u884c.", 
            "title": "\u7aef\u5230\u7aef\u6d4b\u8bd5"
        }, 
        {
            "location": "/#_6", 
            "text": "ng new  ng serve  ng generate  ng lint  ng test  ng e2e  ng build  ng get/ng set  ng doc  ng eject  ng xi18n  ng update", 
            "title": "\u5176\u4ed6\u547d\u4ee4"
        }, 
        {
            "location": "/#_7", 
            "text": "\u914d\u7f6e\u67b6\u6784", 
            "title": "\u914d\u7f6e\u67b6\u6784"
        }, 
        {
            "location": "/#_8", 
            "text": "\u6709\u51e0\u4e2a \u6545\u4e8b \u4f1a\u5f15\u5bfc\u60a8\u8bbe\u7f6eAngular\u5e94\u7528\u7a0b\u5e8f\u7684\u5176\u4ed6\u65b9\u9762\u3002", 
            "title": "\u9644\u52a0\u4fe1\u606f"
        }, 
        {
            "location": "/cli/", 
            "text": "Angular CLI \u914d\u7f6e\u67b6\u6784\n\n\n\u9009\u9879\n\n\n\n\n\n\nproject\n: \u8be5\u9879\u76ee\u7684\u5168\u5c40\u914d\u7f6e\u3002\n\n\n\n\nname\n (\nstring\n): \u9879\u76ee\u7684\u540d\u79f0\u3002\n\n\nejected\n(\nboolean\n): \u8fd9\u4e2a\u9879\u76ee\u662f\u5426\u88ab\u63a8\u51fa\u3002 \u9ed8\u8ba4\u662f\nfalse\n\u3002\n\n\n\n\n\n\n\n\napps\n (\narray\n): \u6b64\u9879\u76ee\u4e2d\u4e0d\u540c\u5e94\u7528\u7a0b\u5e8f\u7684\u5c5e\u6027\u3002\n\n\n\n\nname\n (\nstring\n): \u5e94\u7528\u7684\u540d\u79f0\u3002\n\n\nroot\n (\nstring\n): \u5e94\u7528\u7a0b\u5e8f\u7684\u6839\u76ee\u5f55\u3002\n\n\noutDir\n (\nstring\n): \u751f\u6210\u7ed3\u679c\u7684\u8f93\u51fa\u76ee\u5f55\u3002 \u9ed8\u8ba4\u662f\ndist/\n.\n\n\nassets\n (\narray\n): \u5e94\u7528\u7a0b\u5e8f\u8d44\u4ea7\u5217\u8868\u3002\n\n\ndeployUrl\n (\nstring\n): \u5c06\u90e8\u7f72\u6587\u4ef6\u7684URL\u3002\n\n\nindex\n (\nstring\n): \u5f00\u59cbHTML\u6587\u4ef6\u7684\u540d\u79f0\u3002 \u9ed8\u8ba4\u662f\nindex.html\n\n\nmain\n (\nstring\n): \u4e3b\u5165\u53e3\u70b9\u6587\u4ef6\u7684\u540d\u79f0\u3002\n\n\npolyfills\n (\nstring\n): polyfills\u5165\u53e3\u70b9\u6587\u4ef6\u7684\u540d\u79f0\u3002 \u5728\u5e94\u7528\u4e4b\u524d\u52a0\u8f7d\u3002\n\n\ntest\n (\nstring\n): \u6d4b\u8bd5\u5165\u53e3\u70b9\u6587\u4ef6\u7684\u540d\u79f0\u3002\n\n\ntsconfig\n (\nstring\n): TypeScript\u914d\u7f6e\u6587\u4ef6\u7684\u540d\u79f0\u3002 \u9ed8\u8ba4\u662f\ntsconfig.app.json\n.\n\n\ntestTsconfig\n (\nstring\n): \u5355\u5143\u6d4b\u8bd5\u7684TypeScript\u914d\u7f6e\u6587\u4ef6\u7684\u540d\u79f0\u3002\n\n\nprefix\n (\nstring\n): \u8981\u5e94\u7528\u4e8e\u751f\u6210\u7684\u9009\u62e9\u5668\u7684\u524d\u7f00\u3002\n\n\nserviceWorker\n (\nboolean\n): \u6765\u81ea@angular/service-worker\u7684\u670d\u52a1\u5de5\u4f5c\u8005\u7684\u5b9e\u9a8c\u652f\u6301\u3002 \u9ed8\u8ba4\u662f\nfalse\n.\n\n\nshowCircularDependencies\n (\nboolean\n): \u5728\u6784\u5efa\u4e0a\u663e\u793a\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\nstyles\n (\nstring|array\n): \u5168\u5c40\u6837\u5f0f\u5c06\u5305\u542b\u5728\u6784\u5efa\u4e2d\u3002\n\n\nstylePreprocessorOptions\n : \u4f20\u9012\u7ed9\u6837\u5f0f\u9884\u5904\u7406\u5668\u7684\u9009\u9879\u3002\n\n\nincludePaths\n (\narray\n): \u5305\u542b\u7684\u8def\u5f84\u3002 \u8def\u5f84\u5c06\u88ab\u89e3\u6790\u4e3a\u9879\u76ee\u6839\u76ee\u5f55\u3002\n\n\nscripts\n (\narray\n): \u5168\u5c40\u811a\u672c\u5305\u542b\u5728\u6784\u5efa\u4e2d\u3002\n\n\nenvironmentSource\n (\nstring\n): \u73af\u5883\u914d\u7f6e\u7684\u6e90\u6587\u4ef6\u3002\n\n\nenvironments\n (\nobject\n): \u73af\u5883\u914d\u7f6e\u7684\u540d\u79f0\u548c\u76f8\u5e94\u7684\u6587\u4ef6\u3002\n\n\n\n\n\n\n\n\ne2e\n: \u7aef\u5230\u7aef\u6d4b\u8bd5\u7684\u914d\u7f6e\u3002\n\n\n\n\nprotractor\n\n\nconfig\n (\nstring\n): \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\n\n\n\n\n\n\n\n\n\n\n\n\nlint\n (\narray\n): \u8981\u4f20\u9012\u7ed9TSLint\u7684\u5c5e\u6027\u3002\n\n\n\n\nfiles\n (\nstring|array\n): File glob(s) to lint.\n\n\nproject\n (\nstring\n): tsconfig.json\u9879\u76ee\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 \u5982\u679c'files'\u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u4e5f\u5c06\u4f7f\u7528\u6587\u4ef6\u4f5c\u4e3alint\u3002\n\n\ntslintConfig\n (\nstring\n): tslint.json\u914d\u7f6e\u7684\u4f4d\u7f6e\u3002 \u9ed8\u8ba4\u662f\ntslint.json\n.\n\n\nexclude\n (\nstring|array\n): File glob(s) to ignore.\n\n\n\n\n\n\n\n\ntest\n: \u5355\u5143\u6d4b\u8bd5\u7684\u914d\u7f6e\u3002\n\n\n\n\nkarma\n\n\nconfig\n (\nstring\n): \u4e1a\u52a1\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002\n\n\n\n\n\n\ncodeCoverage\n\n\nexclude\n (\narray\n): \u4ece\u4ee3\u7801\u8986\u76d6\u8303\u56f4\u4e2d\u6392\u9664\u7684Globes\u3002\n\n\n\n\n\n\n\n\n\n\n\n\ndefaults\n: \u6307\u5b9a\u751f\u6210\u7684\u9ed8\u8ba4\u503c\u3002\n\n\n\n\nstyleExt\n (\nstring\n): \u7528\u4e8e\u6837\u5f0f\u6587\u4ef6\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002\n\n\npoll\n (\nnumber\n): \u591a\u4e45\u68c0\u67e5\u4e00\u6b21\u6587\u4ef6\u66f4\u65b0\u3002\n\n\nclass\n: \u751f\u6210\u7c7b\u7684\u9009\u9879\u3002\n\n\nspec\n (\nboolean\n): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002\u9ed8\u8ba4\u662f\nfalse\n.\n\n\n\n\n\n\ncomponent\n: \u751f\u6210\u7ec4\u4ef6\u7684\u9009\u9879\u3002\n\n\nflat\n (\nboolean\n): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002\u9ed8\u8ba4\u662f\nfalse\n.\n\n\nspec\n (\nboolean\n): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002\u9ed8\u8ba4\u662f\ntrue\n.\n\n\ninlineStyle\n (\nboolean\n): \u6307\u5b9a\u6837\u5f0f\u662f\u5426\u5728ts\u6587\u4ef6\u4e2d\u3002 \u9ed8\u8ba4\u662f\nfalse\n.\n\n\ninlineTemplate\n (\nboolean\n): \u6307\u5b9a\u6837\u5f0f\u662f\u5426\u5728ts\u6587\u4ef6\u4e2d\u3002 \u9ed8\u8ba4\u662f\nfalse\n.\n\n\nviewEncapsulation\n (\nstring\n): \u6307\u5b9a\u89c6\u56fe\u5c01\u88c5\u7b56\u7565\u3002 \u53ef\u4ee5\u662f\nEmulated\n\uff0c\nNative\n\u6216\nNone\n\u4e4b\u4e00\u3002\n\n\nchangeDetection\n (\nstring\n): \u6307\u5b9a\u66f4\u6539\u68c0\u6d4b\u7b56\u7565\u3002 \u53ef\u4ee5\u662f\nDefault\n\u6216\nOnPush\n\u4e4b\u4e00\u3002\n\n\n\n\n\n\ndirective\n: \u751f\u6210\u6307\u4ee4\u7684\u9009\u9879\u3002\n\n\nflat\n (\nboolean\n): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\nspec\n (\nboolean\n): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\n\n\n\n\nguard\n: \u751f\u6210\u8b66\u536b\u7684\u9009\u9879\u3002\n\n\nflat\n (\nboolean\n): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\nspec\n (\nboolean\n): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\n\n\n\n\ninterface\n: \u751f\u6210\u754c\u9762\u7684\u9009\u9879\u3002\n\n\nprefix\n (\nstring\n): \u5e94\u7528\u4e8e\u63a5\u53e3\u540d\u79f0\u7684\u524d\u7f00\u3002 (\u5373 I)\n\n\n\n\n\n\nmodule\n: \u751f\u6210\u6a21\u5757\u7684\u9009\u9879\u3002\n\n\nflat\n (\nboolean\n): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f\nfalse\n.\n\n\nspec\n (\nboolean\n): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f\nfalse\n.\n\n\n\n\n\n\npipe\n: \u751f\u6210\u7ba1\u9053\u7684\u9009\u9879\u3002\n\n\nflat\n (\nboolean\n): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\nspec\n (\nboolean\n): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\n\n\n\n\nservice\n: Options for generating a service.\n\n\nflat\n (\nboolean\n): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\nspec\n (\nboolean\n): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\n\n\n\n\nbuild\n: \u8981\u4f20\u9012\u7ed9\u6784\u5efa\u547d\u4ee4\u7684\u5c5e\u6027\u3002\n\n\nsourcemaps\n (\nboolean\n): \u8f93\u51fa\u6e90\u5730\u56fe\u3002\n\n\nbaseHref\n (\nstring\n): \u6b63\u5728\u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840URL\u3002\n\n\nprogress\n (\nboolean\n): \u6784\u5efa\u65f6\u5c06\u8fdb\u5ea6\u8bb0\u5f55\u5230\u63a7\u5236\u53f0\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\npoll\n (\nnumber\n): \u542f\u7528\u5e76\u5b9a\u4e49\u6587\u4ef6\u89c2\u770b\u8f6e\u8be2\u65f6\u95f4\u6bb5\uff08\u6beb\u79d2\uff09\u3002\n\n\ndeleteOutputPath\n (\nboolean\n): \u751f\u6210\u4e4b\u524d\u5220\u9664\u8f93\u51fa\u8def\u5f84\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\npreserveSymlinks\n (\nboolean\n): \u89e3\u6790\u6a21\u5757\u65f6\u8bf7\u52ff\u4f7f\u7528\u771f\u5b9e\u8def\u5f84\u3002 \u9ed8\u8ba4\u662f\nfalse\n.\n\n\nshowCircularDependencies\n (\nboolean\n): \u5728\u6784\u5efa\u4e0a\u663e\u793a\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\nnamedChunks\n (\nboolean\n): \u4f7f\u7528\u61d2\u60f0\u52a0\u8f7d\u5757\u7684\u6587\u4ef6\u540d\u3002\n\n\n\n\n\n\nserve\n: \u8981\u4f20\u9012\u7ed9serve\u547d\u4ee4\u7684\u5c5e\u6027\n\n\nport\n (\nnumber\n): \u5e94\u7528\u7a0b\u5e8f\u5c06\u88ab\u63d0\u4f9b\u7684\u7aef\u53e3\u3002\u9ed8\u8ba4\u662f\n4200\n.\n\n\nhost\n (\nstring\n): \u5e94\u7528\u7a0b\u5e8f\u5c06\u88ab\u63d0\u4f9b\u7ed9\u4e3b\u673a\u3002\u9ed8\u8ba4\u662f\nlocalhost\n.\n\n\nssl\n (\nboolean\n): \u4e3a\u5e94\u7528\u7a0b\u5e8f\u542f\u7528ssl\u3002\u9ed8\u8ba4\u662f\nfalse\n.\n\n\nsslKey\n (\nstring\n): \u670d\u52a1\u5668\u4f7f\u7528\u7684ssl\u5bc6\u94a5\u3002\u9ed8\u8ba4\u662f\nssl/server.key\n.\n\n\nsslCert\n (\nstring\n): \u670d\u52a1\u5668\u4f7f\u7528\u7684ssl\u8bc1\u4e66\u3002\u9ed8\u8ba4\u662f\nssl/server.crt\n.\n\n\nproxyConfig\n (\nstring\n): \u4ee3\u7406\u914d\u7f6e\u6587\u4ef6\u3002\n\n\n\n\n\n\n\n\n\n\n\n\npackageManager\n (\nstring\n): \u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u5de5\u5177\u3002 \u9009\u9879\u5305\u62ec\nnpm\n\uff0c\ncnpm\n\u548c\nyarn\n\u3002\n\n\n\n\n\n\nwarnings\n: \u5141\u8bb8\u7528\u6237\u7981\u7528\u63a7\u5236\u53f0\u8b66\u544a\u3002\n\n\n\n\nnodeDeprecation\n (\nboolean\n): \u5f53\u8282\u70b9\u7248\u672c\u4e0d\u517c\u5bb9\u65f6\u663e\u793a\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\npackageDeprecation\n (\nboolean\n): \u5f53\u7528\u6237\u5b89\u88c5\u89d2\u5ea6cli\u65f6\u663e\u793a\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f\ntrue\n.\n\n\nversionMismatch\n (\nboolean\n): \u5f53\u5168\u5c40\u7248\u672c\u6bd4\u672c\u5730\u7248\u672c\u66f4\u65b0\u65f6\u663e\u793a\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f\ntrue\n.", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/cli/#angular-cli", 
            "text": "", 
            "title": "Angular CLI \u914d\u7f6e\u67b6\u6784"
        }, 
        {
            "location": "/cli/#_1", 
            "text": "project : \u8be5\u9879\u76ee\u7684\u5168\u5c40\u914d\u7f6e\u3002   name  ( string ): \u9879\u76ee\u7684\u540d\u79f0\u3002  ejected ( boolean ): \u8fd9\u4e2a\u9879\u76ee\u662f\u5426\u88ab\u63a8\u51fa\u3002 \u9ed8\u8ba4\u662f false \u3002     apps  ( array ): \u6b64\u9879\u76ee\u4e2d\u4e0d\u540c\u5e94\u7528\u7a0b\u5e8f\u7684\u5c5e\u6027\u3002   name  ( string ): \u5e94\u7528\u7684\u540d\u79f0\u3002  root  ( string ): \u5e94\u7528\u7a0b\u5e8f\u7684\u6839\u76ee\u5f55\u3002  outDir  ( string ): \u751f\u6210\u7ed3\u679c\u7684\u8f93\u51fa\u76ee\u5f55\u3002 \u9ed8\u8ba4\u662f dist/ .  assets  ( array ): \u5e94\u7528\u7a0b\u5e8f\u8d44\u4ea7\u5217\u8868\u3002  deployUrl  ( string ): \u5c06\u90e8\u7f72\u6587\u4ef6\u7684URL\u3002  index  ( string ): \u5f00\u59cbHTML\u6587\u4ef6\u7684\u540d\u79f0\u3002 \u9ed8\u8ba4\u662f index.html  main  ( string ): \u4e3b\u5165\u53e3\u70b9\u6587\u4ef6\u7684\u540d\u79f0\u3002  polyfills  ( string ): polyfills\u5165\u53e3\u70b9\u6587\u4ef6\u7684\u540d\u79f0\u3002 \u5728\u5e94\u7528\u4e4b\u524d\u52a0\u8f7d\u3002  test  ( string ): \u6d4b\u8bd5\u5165\u53e3\u70b9\u6587\u4ef6\u7684\u540d\u79f0\u3002  tsconfig  ( string ): TypeScript\u914d\u7f6e\u6587\u4ef6\u7684\u540d\u79f0\u3002 \u9ed8\u8ba4\u662f tsconfig.app.json .  testTsconfig  ( string ): \u5355\u5143\u6d4b\u8bd5\u7684TypeScript\u914d\u7f6e\u6587\u4ef6\u7684\u540d\u79f0\u3002  prefix  ( string ): \u8981\u5e94\u7528\u4e8e\u751f\u6210\u7684\u9009\u62e9\u5668\u7684\u524d\u7f00\u3002  serviceWorker  ( boolean ): \u6765\u81ea@angular/service-worker\u7684\u670d\u52a1\u5de5\u4f5c\u8005\u7684\u5b9e\u9a8c\u652f\u6301\u3002 \u9ed8\u8ba4\u662f false .  showCircularDependencies  ( boolean ): \u5728\u6784\u5efa\u4e0a\u663e\u793a\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f true .  styles  ( string|array ): \u5168\u5c40\u6837\u5f0f\u5c06\u5305\u542b\u5728\u6784\u5efa\u4e2d\u3002  stylePreprocessorOptions  : \u4f20\u9012\u7ed9\u6837\u5f0f\u9884\u5904\u7406\u5668\u7684\u9009\u9879\u3002  includePaths  ( array ): \u5305\u542b\u7684\u8def\u5f84\u3002 \u8def\u5f84\u5c06\u88ab\u89e3\u6790\u4e3a\u9879\u76ee\u6839\u76ee\u5f55\u3002  scripts  ( array ): \u5168\u5c40\u811a\u672c\u5305\u542b\u5728\u6784\u5efa\u4e2d\u3002  environmentSource  ( string ): \u73af\u5883\u914d\u7f6e\u7684\u6e90\u6587\u4ef6\u3002  environments  ( object ): \u73af\u5883\u914d\u7f6e\u7684\u540d\u79f0\u548c\u76f8\u5e94\u7684\u6587\u4ef6\u3002     e2e : \u7aef\u5230\u7aef\u6d4b\u8bd5\u7684\u914d\u7f6e\u3002   protractor  config  ( string ): \u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002       lint  ( array ): \u8981\u4f20\u9012\u7ed9TSLint\u7684\u5c5e\u6027\u3002   files  ( string|array ): File glob(s) to lint.  project  ( string ): tsconfig.json\u9879\u76ee\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002 \u5982\u679c'files'\u5c5e\u6027\u4e0d\u5b58\u5728\uff0c\u4e5f\u5c06\u4f7f\u7528\u6587\u4ef6\u4f5c\u4e3alint\u3002  tslintConfig  ( string ): tslint.json\u914d\u7f6e\u7684\u4f4d\u7f6e\u3002 \u9ed8\u8ba4\u662f tslint.json .  exclude  ( string|array ): File glob(s) to ignore.     test : \u5355\u5143\u6d4b\u8bd5\u7684\u914d\u7f6e\u3002   karma  config  ( string ): \u4e1a\u52a1\u914d\u7f6e\u6587\u4ef6\u7684\u8def\u5f84\u3002    codeCoverage  exclude  ( array ): \u4ece\u4ee3\u7801\u8986\u76d6\u8303\u56f4\u4e2d\u6392\u9664\u7684Globes\u3002       defaults : \u6307\u5b9a\u751f\u6210\u7684\u9ed8\u8ba4\u503c\u3002   styleExt  ( string ): \u7528\u4e8e\u6837\u5f0f\u6587\u4ef6\u7684\u6587\u4ef6\u6269\u5c55\u540d\u3002  poll  ( number ): \u591a\u4e45\u68c0\u67e5\u4e00\u6b21\u6587\u4ef6\u66f4\u65b0\u3002  class : \u751f\u6210\u7c7b\u7684\u9009\u9879\u3002  spec  ( boolean ): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002\u9ed8\u8ba4\u662f false .    component : \u751f\u6210\u7ec4\u4ef6\u7684\u9009\u9879\u3002  flat  ( boolean ): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002\u9ed8\u8ba4\u662f false .  spec  ( boolean ): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002\u9ed8\u8ba4\u662f true .  inlineStyle  ( boolean ): \u6307\u5b9a\u6837\u5f0f\u662f\u5426\u5728ts\u6587\u4ef6\u4e2d\u3002 \u9ed8\u8ba4\u662f false .  inlineTemplate  ( boolean ): \u6307\u5b9a\u6837\u5f0f\u662f\u5426\u5728ts\u6587\u4ef6\u4e2d\u3002 \u9ed8\u8ba4\u662f false .  viewEncapsulation  ( string ): \u6307\u5b9a\u89c6\u56fe\u5c01\u88c5\u7b56\u7565\u3002 \u53ef\u4ee5\u662f Emulated \uff0c Native \u6216 None \u4e4b\u4e00\u3002  changeDetection  ( string ): \u6307\u5b9a\u66f4\u6539\u68c0\u6d4b\u7b56\u7565\u3002 \u53ef\u4ee5\u662f Default \u6216 OnPush \u4e4b\u4e00\u3002    directive : \u751f\u6210\u6307\u4ee4\u7684\u9009\u9879\u3002  flat  ( boolean ): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f true .  spec  ( boolean ): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f true .    guard : \u751f\u6210\u8b66\u536b\u7684\u9009\u9879\u3002  flat  ( boolean ): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f true .  spec  ( boolean ): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f true .    interface : \u751f\u6210\u754c\u9762\u7684\u9009\u9879\u3002  prefix  ( string ): \u5e94\u7528\u4e8e\u63a5\u53e3\u540d\u79f0\u7684\u524d\u7f00\u3002 (\u5373 I)    module : \u751f\u6210\u6a21\u5757\u7684\u9009\u9879\u3002  flat  ( boolean ): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f false .  spec  ( boolean ): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f false .    pipe : \u751f\u6210\u7ba1\u9053\u7684\u9009\u9879\u3002  flat  ( boolean ): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f true .  spec  ( boolean ): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f true .    service : Options for generating a service.  flat  ( boolean ): \u6807\u8bb0\u4ee5\u6307\u793a\u662f\u5426\u521b\u5efa\u4e86dir\u3002 \u9ed8\u8ba4\u662f true .  spec  ( boolean ): \u6307\u5b9a\u662f\u5426\u751f\u6210\u89c4\u683c\u6587\u4ef6\u3002 \u9ed8\u8ba4\u662f true .    build : \u8981\u4f20\u9012\u7ed9\u6784\u5efa\u547d\u4ee4\u7684\u5c5e\u6027\u3002  sourcemaps  ( boolean ): \u8f93\u51fa\u6e90\u5730\u56fe\u3002  baseHref  ( string ): \u6b63\u5728\u6784\u5efa\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u57fa\u7840URL\u3002  progress  ( boolean ): \u6784\u5efa\u65f6\u5c06\u8fdb\u5ea6\u8bb0\u5f55\u5230\u63a7\u5236\u53f0\u3002 \u9ed8\u8ba4\u662f true .  poll  ( number ): \u542f\u7528\u5e76\u5b9a\u4e49\u6587\u4ef6\u89c2\u770b\u8f6e\u8be2\u65f6\u95f4\u6bb5\uff08\u6beb\u79d2\uff09\u3002  deleteOutputPath  ( boolean ): \u751f\u6210\u4e4b\u524d\u5220\u9664\u8f93\u51fa\u8def\u5f84\u3002 \u9ed8\u8ba4\u662f true .  preserveSymlinks  ( boolean ): \u89e3\u6790\u6a21\u5757\u65f6\u8bf7\u52ff\u4f7f\u7528\u771f\u5b9e\u8def\u5f84\u3002 \u9ed8\u8ba4\u662f false .  showCircularDependencies  ( boolean ): \u5728\u6784\u5efa\u4e0a\u663e\u793a\u5faa\u73af\u4f9d\u8d56\u5173\u7cfb\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f true .  namedChunks  ( boolean ): \u4f7f\u7528\u61d2\u60f0\u52a0\u8f7d\u5757\u7684\u6587\u4ef6\u540d\u3002    serve : \u8981\u4f20\u9012\u7ed9serve\u547d\u4ee4\u7684\u5c5e\u6027  port  ( number ): \u5e94\u7528\u7a0b\u5e8f\u5c06\u88ab\u63d0\u4f9b\u7684\u7aef\u53e3\u3002\u9ed8\u8ba4\u662f 4200 .  host  ( string ): \u5e94\u7528\u7a0b\u5e8f\u5c06\u88ab\u63d0\u4f9b\u7ed9\u4e3b\u673a\u3002\u9ed8\u8ba4\u662f localhost .  ssl  ( boolean ): \u4e3a\u5e94\u7528\u7a0b\u5e8f\u542f\u7528ssl\u3002\u9ed8\u8ba4\u662f false .  sslKey  ( string ): \u670d\u52a1\u5668\u4f7f\u7528\u7684ssl\u5bc6\u94a5\u3002\u9ed8\u8ba4\u662f ssl/server.key .  sslCert  ( string ): \u670d\u52a1\u5668\u4f7f\u7528\u7684ssl\u8bc1\u4e66\u3002\u9ed8\u8ba4\u662f ssl/server.crt .  proxyConfig  ( string ): \u4ee3\u7406\u914d\u7f6e\u6587\u4ef6\u3002       packageManager  ( string ): \u6307\u5b9a\u4f7f\u7528\u54ea\u4e2a\u8f6f\u4ef6\u5305\u7ba1\u7406\u5668\u5de5\u5177\u3002 \u9009\u9879\u5305\u62ec npm \uff0c cnpm \u548c yarn \u3002    warnings : \u5141\u8bb8\u7528\u6237\u7981\u7528\u63a7\u5236\u53f0\u8b66\u544a\u3002   nodeDeprecation  ( boolean ): \u5f53\u8282\u70b9\u7248\u672c\u4e0d\u517c\u5bb9\u65f6\u663e\u793a\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f true .  packageDeprecation  ( boolean ): \u5f53\u7528\u6237\u5b89\u88c5\u89d2\u5ea6cli\u65f6\u663e\u793a\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f true .  versionMismatch  ( boolean ): \u5f53\u5168\u5c40\u7248\u672c\u6bd4\u672c\u5730\u7248\u672c\u66f4\u65b0\u65f6\u663e\u793a\u8b66\u544a\u3002 \u9ed8\u8ba4\u662f true .", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/cli/build/", 
            "text": "ng build\n\n\nOverview\n\n\nng build\n compiles the application into an output directory\n\n\nCreating a build\n\n\nng build\n\n\n\n\nThe build artifacts will be stored in the \ndist/\n directory.\n\n\nAll commands that build or serve your project, \nng build/serve/e2e\n, will delete the output\ndirectory (\ndist/\n by default).\nThis can be disabled via the \n--no-delete-output-path\n (or \n--delete-output-path=false\n) flag.\n\n\nBuild Targets and Environment Files\n\n\nng build\n can specify both a build target (\n--target=production\n or \n--target=development\n) and an\nenvironment file to be used with that build (\n--environment=dev\n or \n--environment=prod\n).\nBy default, the development build target and environment are used.\n\n\nThe mapping used to determine which environment file is used can be found in \n.angular-cli.json\n:\n\n\nenvironmentSource\n:\n \nenvironments/environment.ts\n,\n\n\nenvironments\n:\n \n{\n\n  \ndev\n:\n \nenvironments/environment.ts\n,\n\n  \nprod\n:\n \nenvironments/environment.prod.ts\n\n\n}\n\n\n\n\n\nThese options also apply to the serve command. If you do not pass a value for \nenvironment\n,\nit will default to \ndev\n for \ndevelopment\n and \nprod\n for \nproduction\n.\n\n\n# these are equivalent\n\nng build --target\n=\nproduction --environment\n=\nprod\nng build --prod --env\n=\nprod\nng build --prod\n\n# and so are these\n\nng build --target\n=\ndevelopment --environment\n=\ndev\nng build --dev --e\n=\ndev\nng build --dev\nng build\n\n\n\n\nYou can also add your own env files other than \ndev\n and \nprod\n by doing the following:\n- create a \nsrc/environments/environment.NAME.ts\n\n- add \n{ \"NAME\": 'src/environments/environment.NAME.ts' }\n to the \napps[0].environments\n object in \n.angular-cli.json\n\n- use them via the \n--env=NAME\n flag on the build/serve commands.\n\n\nBase tag handling in index.html\n\n\nWhen building you can modify base tag (\nbase href=\"/\"\n) in your index.html with \n--base-href your-url\n option.\n\n\n# Sets base tag href to /myUrl/ in your index.html\n\nng build --base-href /myUrl/\nng build --bh /myUrl/\n\n\n\n\nBundling \n Tree-Shaking\n\n\nAll builds make use of bundling and limited tree-shaking, while \n--prod\n builds also run limited\ndead code elimination via UglifyJS.\n\n\n--dev\n vs \n--prod\n builds\n\n\nBoth \n--dev\n/\n--target=development\n and \n--prod\n/\n--target=production\n are 'meta' flags, that set other flags.\nIf you do not specify either you will get the \n--dev\n defaults.\n\n\n\n\n\n\n\n\nFlag\n\n\n--dev\n\n\n--prod\n\n\n\n\n\n\n\n\n\n\n--aot\n\n\nfalse\n\n\ntrue\n\n\n\n\n\n\n--environment\n\n\ndev\n\n\nprod\n\n\n\n\n\n\n--output-hashing\n\n\nmedia\n\n\nall\n\n\n\n\n\n\n--sourcemaps\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\n--extract-css\n\n\nfalse\n\n\ntrue\n\n\n\n\n\n\n--named-chunks\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\n--build-optimizer\n\n\nfalse\n\n\ntrue\n with AOT and Angular 5\n\n\n\n\n\n\n\n\n--prod\n also sets the following non-flaggable settings:\n- Adds service worker if configured in \n.angular-cli.json\n.\n- Replaces \nprocess.env.NODE_ENV\n in modules with the \nproduction\n value (this is needed for some libraries, like react).\n- Runs UglifyJS on the code.\n\n\n--build-optimizer\n and \n--vendor-chunk\n\n\nWhen using Build Optimizer the vendor chunk will be disabled by default.\nYou can override this with \n--vendor-chunk=true\n.\n\n\nTotal bundle sizes with Build Optimizer are smaller if there is no separate vendor chunk because\nhaving vendor code in the same chunk as app code makes it possible for Uglify to remove more unused\ncode.\n\n\nCSS resources\n\n\nResources in CSS, such as images and fonts, will be copied over automatically as part of a build.\nIf a resource is less than 10kb it will also be inlined.\n\n\nYou'll see these resources be outputted and fingerprinted at the root of \ndist/\n.\n\n\nService Worker\n\n\nThere is experimental service worker support for production builds available in the CLI.\nTo enable it, run the following commands:\n\nnpm install @angular/service-worker --save\nng set apps.0.serviceWorker=true\n\n\n\nOn \n--prod\n builds a service worker manifest will be created and loaded automatically.\nRemember to disable the service worker while developing to avoid stale code.\n\n\nNote: service worker support is experimental and subject to change.\n\n\nES2015 support\n\n\nTo build in ES2015 mode, edit \n./tsconfig.json\n to use \n\"target\": \"es2015\"\n (instead of \nes5\n).\n\n\nThis will cause application TypeScript and Uglify be output as ES2015, and third party libraries\nto be loaded through the \nes2015\n entry in \npackage.json\n if available.\n\n\nBe aware that JIT does not support ES2015 and so you should build/serve your app with \n--aot\n.\nSee https://github.com/angular/angular-cli/issues/7797 for details.\n\n\nOptions\n\n\n\n  \naot\n\n  \n\n    \n--aot\n \ndefault value: false\n\n  \n\n  \n\n    Build using Ahead of Time compilation.\n  \n\n\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n)\n  \n\n  \n\n    Specifies app name or index to use.\n  \n\n\n\n\n\n  \nbase-href\n\n  \n\n    \n--base-href\n (aliases: \n-bh\n)\n  \n\n  \n\n    Base url for the application being built.\n  \n\n\n\n\n\n  \ndeploy-url\n\n  \n\n    \n--deploy-url\n (aliases: \n-d\n)\n  \n\n  \n\n    URL where files will be deployed.\n  \n\n\n\n\n\n  \nenvironment\n\n  \n\n    \n--environment\n (aliases: \n-e\n)\n  \n\n  \n\n    Defines the build environment.\n  \n\n\n\n\n\n  \nextract-css\n\n  \n\n    \n--extract-css\n (aliases: \n-ec\n)\n  \n\n  \n\n    Extract css from global styles onto css files instead of js ones.\n  \n\n\n\n\n\n  \ni18n-file\n\n  \n\n    \n--i18n-file\n\n  \n\n  \n\n    Localization file to use for i18n.\n  \n\n\n\n\n\n  \ni18n-format\n\n  \n\n    \n--i18n-format\n\n  \n\n  \n\n    Format of the localization file specified with --i18n-file.\n  \n\n\n\n\n\n  \nlocale\n\n  \n\n    \n--locale\n\n  \n\n  \n\n    Locale to use for i18n.\n  \n\n\n\n\n\n  \nmissing-translation\n\n  \n\n    \n--missing-translation\n\n  \n\n  \n\n    How to handle missing translations for i18n.\n  \n\n  \n\n    Values: \nerror\n, \nwarning\n, \nignore\n\n  \n\n\n\n\n\n  \noutput-hashing\n\n  \n\n    \n--output-hashing\n (aliases: \n-oh\n)\n  \n\n  \n\n    Define the output filename cache-busting hashing mode.\n  \n\n  \n\n    Values: \nnone\n, \nall\n, \nmedia\n, \nbundles\n\n  \n\n\n\n\n\n  \noutput-path\n\n  \n\n    \n--output-path\n (aliases: \n-op\n)\n  \n\n  \n\n    Path where output will be placed.\n  \n\n\n\n\n\n  \ndelete-output-path\n\n  \n\n    \n--delete-output-path\n (aliases: \n-dop\n) \ndefault value: true\n\n  \n\n  \n\n    Delete the output-path directory.\n  \n\n\n\n\n\n  \npoll\n\n  \n\n    \n--poll\n\n  \n\n  \n\n    Enable and define the file watching poll time period (milliseconds).\n  \n\n\n\n\n\n  \nprogress\n\n  \n\n    \n--progress\n (aliases: \n-pr\n) \ndefault value: true inside TTY, false otherwise\n\n  \n\n  \n\n    Log progress to the console while building.\n  \n\n\n\n\n\n  \nsourcemap\n\n  \n\n    \n--sourcemap\n (aliases: \n-sm\n, \nsourcemaps\n)\n  \n\n  \n\n    Output sourcemaps.\n  \n\n\n\n\n\n  \nstats-json\n\n  \n\n    \n--stats-json\n\n  \n\n  \n\n    Generates a \nstats.json\n file which can be analyzed using tools such as: \nwebpack-bundle-analyzer\n or https://webpack.github.io/analyse.\n  \n\n\n\n\n\n  \ntarget\n\n  \n\n    \n--target\n (aliases: \n-t\n, \n-dev\n, \n-prod\n) \ndefault value: development\n\n  \n\n  \n\n    Defines the build target.\n  \n\n\n\n\n\n  \nvendor-chunk\n\n  \n\n    \n--vendor-chunk\n (aliases: \n-vc\n) \ndefault value: true\n\n  \n\n  \n\n    Use a separate bundle containing only vendor libraries.\n  \n\n\n\n\n\n  \ncommon-chunk\n\n  \n\n    \n--common-chunk\n (aliases: \n-cc\n) \ndefault value: true\n\n  \n\n  \n\n    Use a separate bundle containing code used across multiple bundles.\n  \n\n\n\n\n\n  \nverbose\n\n  \n\n    \n--verbose\n (aliases: \n-v\n) \ndefault value: false\n\n  \n\n  \n\n    Adds more details to output logging.\n  \n\n\n\n\n\n  \nwatch\n\n  \n\n    \n--watch\n (aliases: \n-w\n)\n  \n\n  \n\n    Run build when files change.\n  \n\n\n\n\n\n  \nshow-circular-dependencies\n\n  \n\n    \n--show-circular-dependencies\n (aliases: \n-scd\n)\n  \n\n  \n\n    Show circular dependency warnings on builds.\n  \n\n\n\n\n\n  \nbuild-optimizer\n\n  \n\n    \n--build-optimizer\n\n  \n\n  \n\n    Enables @angular-devkit/build-optimizer optimizations when using \n--aot\n.\n  \n\n\n\n\n\n  \nnamed-chunks\n\n  \n\n    \n--named-chunks\n (aliases: \n-nc\n)\n  \n\n  \n\n    Use file name for lazy loaded chunks.\n  \n\n\n\n\n\n  \nbundle-dependencies\n\n  \n\n    \n--bundle-dependencies\n\n  \n\n  \n\n    In a server build, state whether \nall\n or \nnone\n dependencies should be bundles in the output.\n  \n\n\n\n\n\n  \nextract-licenses\n\n  \n\n    \n--extract-licenses\n \ndefault value: true\n\n  \n\n  \n\n    Extract all licenses in a separate file, in the case of production builds only.", 
            "title": "ng build"
        }, 
        {
            "location": "/cli/build/#ng-build", 
            "text": "", 
            "title": "ng build"
        }, 
        {
            "location": "/cli/build/#overview", 
            "text": "ng build  compiles the application into an output directory", 
            "title": "Overview"
        }, 
        {
            "location": "/cli/build/#creating-a-build", 
            "text": "ng build  The build artifacts will be stored in the  dist/  directory.  All commands that build or serve your project,  ng build/serve/e2e , will delete the output\ndirectory ( dist/  by default).\nThis can be disabled via the  --no-delete-output-path  (or  --delete-output-path=false ) flag.", 
            "title": "Creating a build"
        }, 
        {
            "location": "/cli/build/#build-targets-and-environment-files", 
            "text": "ng build  can specify both a build target ( --target=production  or  --target=development ) and an\nenvironment file to be used with that build ( --environment=dev  or  --environment=prod ).\nBy default, the development build target and environment are used.  The mapping used to determine which environment file is used can be found in  .angular-cli.json :  environmentSource :   environments/environment.ts ,  environments :   { \n   dev :   environments/environment.ts , \n   prod :   environments/environment.prod.ts  }   These options also apply to the serve command. If you do not pass a value for  environment ,\nit will default to  dev  for  development  and  prod  for  production .  # these are equivalent \nng build --target = production --environment = prod\nng build --prod --env = prod\nng build --prod # and so are these \nng build --target = development --environment = dev\nng build --dev --e = dev\nng build --dev\nng build  You can also add your own env files other than  dev  and  prod  by doing the following:\n- create a  src/environments/environment.NAME.ts \n- add  { \"NAME\": 'src/environments/environment.NAME.ts' }  to the  apps[0].environments  object in  .angular-cli.json \n- use them via the  --env=NAME  flag on the build/serve commands.", 
            "title": "Build Targets and Environment Files"
        }, 
        {
            "location": "/cli/build/#base-tag-handling-in-indexhtml", 
            "text": "When building you can modify base tag ( base href=\"/\" ) in your index.html with  --base-href your-url  option.  # Sets base tag href to /myUrl/ in your index.html \nng build --base-href /myUrl/\nng build --bh /myUrl/", 
            "title": "Base tag handling in index.html"
        }, 
        {
            "location": "/cli/build/#bundling-tree-shaking", 
            "text": "All builds make use of bundling and limited tree-shaking, while  --prod  builds also run limited\ndead code elimination via UglifyJS.", 
            "title": "Bundling &amp; Tree-Shaking"
        }, 
        {
            "location": "/cli/build/#-dev-vs-prod-builds", 
            "text": "Both  --dev / --target=development  and  --prod / --target=production  are 'meta' flags, that set other flags.\nIf you do not specify either you will get the  --dev  defaults.     Flag  --dev  --prod      --aot  false  true    --environment  dev  prod    --output-hashing  media  all    --sourcemaps  true  false    --extract-css  false  true    --named-chunks  true  false    --build-optimizer  false  true  with AOT and Angular 5     --prod  also sets the following non-flaggable settings:\n- Adds service worker if configured in  .angular-cli.json .\n- Replaces  process.env.NODE_ENV  in modules with the  production  value (this is needed for some libraries, like react).\n- Runs UglifyJS on the code.", 
            "title": "--dev vs --prod builds"
        }, 
        {
            "location": "/cli/build/#-build-optimizer-and-vendor-chunk", 
            "text": "When using Build Optimizer the vendor chunk will be disabled by default.\nYou can override this with  --vendor-chunk=true .  Total bundle sizes with Build Optimizer are smaller if there is no separate vendor chunk because\nhaving vendor code in the same chunk as app code makes it possible for Uglify to remove more unused\ncode.", 
            "title": "--build-optimizer and --vendor-chunk"
        }, 
        {
            "location": "/cli/build/#css-resources", 
            "text": "Resources in CSS, such as images and fonts, will be copied over automatically as part of a build.\nIf a resource is less than 10kb it will also be inlined.  You'll see these resources be outputted and fingerprinted at the root of  dist/ .", 
            "title": "CSS resources"
        }, 
        {
            "location": "/cli/build/#service-worker", 
            "text": "There is experimental service worker support for production builds available in the CLI.\nTo enable it, run the following commands: npm install @angular/service-worker --save\nng set apps.0.serviceWorker=true  On  --prod  builds a service worker manifest will be created and loaded automatically.\nRemember to disable the service worker while developing to avoid stale code.  Note: service worker support is experimental and subject to change.", 
            "title": "Service Worker"
        }, 
        {
            "location": "/cli/build/#es2015-support", 
            "text": "To build in ES2015 mode, edit  ./tsconfig.json  to use  \"target\": \"es2015\"  (instead of  es5 ).  This will cause application TypeScript and Uglify be output as ES2015, and third party libraries\nto be loaded through the  es2015  entry in  package.json  if available.  Be aware that JIT does not support ES2015 and so you should build/serve your app with  --aot .\nSee https://github.com/angular/angular-cli/issues/7797 for details.", 
            "title": "ES2015 support"
        }, 
        {
            "location": "/cli/build/#options", 
            "text": "aot \n   \n     --aot   default value: false \n   \n   \n    Build using Ahead of Time compilation.\n     \n   app \n   \n     --app  (aliases:  -a )\n   \n   \n    Specifies app name or index to use.\n     \n   base-href \n   \n     --base-href  (aliases:  -bh )\n   \n   \n    Base url for the application being built.\n     \n   deploy-url \n   \n     --deploy-url  (aliases:  -d )\n   \n   \n    URL where files will be deployed.\n     \n   environment \n   \n     --environment  (aliases:  -e )\n   \n   \n    Defines the build environment.\n     \n   extract-css \n   \n     --extract-css  (aliases:  -ec )\n   \n   \n    Extract css from global styles onto css files instead of js ones.\n     \n   i18n-file \n   \n     --i18n-file \n   \n   \n    Localization file to use for i18n.\n     \n   i18n-format \n   \n     --i18n-format \n   \n   \n    Format of the localization file specified with --i18n-file.\n     \n   locale \n   \n     --locale \n   \n   \n    Locale to use for i18n.\n     \n   missing-translation \n   \n     --missing-translation \n   \n   \n    How to handle missing translations for i18n.\n   \n   \n    Values:  error ,  warning ,  ignore \n     \n   output-hashing \n   \n     --output-hashing  (aliases:  -oh )\n   \n   \n    Define the output filename cache-busting hashing mode.\n   \n   \n    Values:  none ,  all ,  media ,  bundles \n     \n   output-path \n   \n     --output-path  (aliases:  -op )\n   \n   \n    Path where output will be placed.\n     \n   delete-output-path \n   \n     --delete-output-path  (aliases:  -dop )  default value: true \n   \n   \n    Delete the output-path directory.\n     \n   poll \n   \n     --poll \n   \n   \n    Enable and define the file watching poll time period (milliseconds).\n     \n   progress \n   \n     --progress  (aliases:  -pr )  default value: true inside TTY, false otherwise \n   \n   \n    Log progress to the console while building.\n     \n   sourcemap \n   \n     --sourcemap  (aliases:  -sm ,  sourcemaps )\n   \n   \n    Output sourcemaps.\n     \n   stats-json \n   \n     --stats-json \n   \n   \n    Generates a  stats.json  file which can be analyzed using tools such as:  webpack-bundle-analyzer  or https://webpack.github.io/analyse.\n     \n   target \n   \n     --target  (aliases:  -t ,  -dev ,  -prod )  default value: development \n   \n   \n    Defines the build target.\n     \n   vendor-chunk \n   \n     --vendor-chunk  (aliases:  -vc )  default value: true \n   \n   \n    Use a separate bundle containing only vendor libraries.\n     \n   common-chunk \n   \n     --common-chunk  (aliases:  -cc )  default value: true \n   \n   \n    Use a separate bundle containing code used across multiple bundles.\n     \n   verbose \n   \n     --verbose  (aliases:  -v )  default value: false \n   \n   \n    Adds more details to output logging.\n     \n   watch \n   \n     --watch  (aliases:  -w )\n   \n   \n    Run build when files change.\n     \n   show-circular-dependencies \n   \n     --show-circular-dependencies  (aliases:  -scd )\n   \n   \n    Show circular dependency warnings on builds.\n     \n   build-optimizer \n   \n     --build-optimizer \n   \n   \n    Enables @angular-devkit/build-optimizer optimizations when using  --aot .\n     \n   named-chunks \n   \n     --named-chunks  (aliases:  -nc )\n   \n   \n    Use file name for lazy loaded chunks.\n     \n   bundle-dependencies \n   \n     --bundle-dependencies \n   \n   \n    In a server build, state whether  all  or  none  dependencies should be bundles in the output.\n     \n   extract-licenses \n   \n     --extract-licenses   default value: true \n   \n   \n    Extract all licenses in a separate file, in the case of production builds only.", 
            "title": "Options"
        }, 
        {
            "location": "/cli/config/", 
            "text": "ng get\n\n\nOverview\n\n\nng get [key]\n Get a value from the configuration.\n\n[key]\n should be in JSON path format. Example: \na[3].foo.bar[2]\n.\n\n\nOptions\n\n\n\n  \nglobal\n\n  \n\n    \n--global\n \ndefault value: false\n\n  \n\n  \n\n    Get the value in the global configuration (in your home directory).\n  \n\n\n\n\nng set\n\n\nOverview\n\n\nng set [key]=[value]\n Set a value in the configuration.\n\n[key]\n should be in JSON path format. Example: \na[3].foo.bar[2]\n.\n\n\nOptions\n\n\n\n  \nglobal\n\n  \n\n    \n--global\n \ndefault value: false\n\n  \n\n  \n\n    Get the value in the global configuration (in your home directory).", 
            "title": "ng config"
        }, 
        {
            "location": "/cli/config/#ng-get", 
            "text": "", 
            "title": "ng get"
        }, 
        {
            "location": "/cli/config/#overview", 
            "text": "ng get [key]  Get a value from the configuration. [key]  should be in JSON path format. Example:  a[3].foo.bar[2] .", 
            "title": "Overview"
        }, 
        {
            "location": "/cli/config/#options", 
            "text": "global \n   \n     --global   default value: false \n   \n   \n    Get the value in the global configuration (in your home directory).", 
            "title": "Options"
        }, 
        {
            "location": "/cli/config/#ng-set", 
            "text": "", 
            "title": "ng set"
        }, 
        {
            "location": "/cli/config/#overview_1", 
            "text": "ng set [key]=[value]  Set a value in the configuration. [key]  should be in JSON path format. Example:  a[3].foo.bar[2] .", 
            "title": "Overview"
        }, 
        {
            "location": "/cli/config/#options_1", 
            "text": "global \n   \n     --global   default value: false \n   \n   \n    Get the value in the global configuration (in your home directory).", 
            "title": "Options"
        }, 
        {
            "location": "/cli/doc/", 
            "text": "ng doc\n\n\nOverview\n\n\nng doc [search term]\n Opens the official Angular API documentation for a given keyword on \nangular.io\n.\n\n\nOptions\n\n\n\n  \nsearch\n\n  \n\n    \n--search\n (alias: \n-s\n) \ndefault value: false\n\n  \n\n  \n\n    Search for the keyword in the whole \nangular.io\n documentation instead of just the API.", 
            "title": "ng doc"
        }, 
        {
            "location": "/cli/doc/#ng-doc", 
            "text": "", 
            "title": "ng doc"
        }, 
        {
            "location": "/cli/doc/#overview", 
            "text": "ng doc [search term]  Opens the official Angular API documentation for a given keyword on  angular.io .", 
            "title": "Overview"
        }, 
        {
            "location": "/cli/doc/#options", 
            "text": "search \n   \n     --search  (alias:  -s )  default value: false \n   \n   \n    Search for the keyword in the whole  angular.io  documentation instead of just the API.", 
            "title": "Options"
        }, 
        {
            "location": "/cli/e2e/", 
            "text": "ng e2e\n\n\nOverview\n\n\nng e2e\n serves the application and runs end-to-end tests\n\n\nRunning end-to-end tests\n\n\nng e2e\n\n\n\n\nEnd-to-end tests are run via \nProtractor\n.\n\n\nOptions\n\n\nPlease note that options that are supported by \nng serve\n are also supported by \nng e2e\n\n\n\n  \nconfig\n\n  \n\n    \n--config\n (aliases: \n-c\n)\n  \n\n  \n\n    Use a specific config file. Defaults to the protractor config file in \n.angular-cli.json\n.\n  \n\n\n\n\n\n  \nelement-explorer\n\n  \n\n    \n--element-explorer\n (aliases: \n-ee\n) \ndefault value: false\n\n  \n\n  \n\n    Start Protractor's \nElement Explorer\n for debugging.\n  \n\n\n\n\n\n  \nserve\n\n  \n\n    \n--serve\n (aliases: \n-s\n) \ndefault value: true\n\n  \n\n  \n\n    Compile and Serve the app. All serve options are also available. The live-reload option defaults to false, and the default port will be random.\n  \n\n  \n\n    NOTE: Build failure will not launch the e2e task. You must first fix error(s) and run e2e again.\n  \n\n\n\n\n\n  \nspecs\n\n  \n\n    \n--specs\n (aliases: \n-sp\n) \ndefault value: []\n\n  \n\n  \n\n    Override specs in the protractor config. Can send in multiple specs by repeating flag (\nng e2e --specs=spec1.ts --specs=spec2.ts\n).\n  \n\n\n\n\n\n  \nsuite\n\n  \n\n    \n--suite\n (aliases: \n-su\n)\n  \n\n  \n\n    Override suite in the protractor config. Can send in multiple suite by comma separated values (\nng e2e --suite=suiteA,suiteB\n).\n  \n\n\n\n\n\n  \nwebdriver-update\n\n  \n\n    \n--webdriver-update\n (aliases: \n-wu\n) \ndefault value: true\n\n  \n\n  \n\n    Try to update webdriver.", 
            "title": "ng e2e"
        }, 
        {
            "location": "/cli/e2e/#ng-e2e", 
            "text": "", 
            "title": "ng e2e"
        }, 
        {
            "location": "/cli/e2e/#overview", 
            "text": "ng e2e  serves the application and runs end-to-end tests", 
            "title": "Overview"
        }, 
        {
            "location": "/cli/e2e/#running-end-to-end-tests", 
            "text": "ng e2e  End-to-end tests are run via  Protractor .", 
            "title": "Running end-to-end tests"
        }, 
        {
            "location": "/cli/e2e/#options", 
            "text": "Please note that options that are supported by  ng serve  are also supported by  ng e2e  \n   config \n   \n     --config  (aliases:  -c )\n   \n   \n    Use a specific config file. Defaults to the protractor config file in  .angular-cli.json .\n     \n   element-explorer \n   \n     --element-explorer  (aliases:  -ee )  default value: false \n   \n   \n    Start Protractor's  Element Explorer  for debugging.\n     \n   serve \n   \n     --serve  (aliases:  -s )  default value: true \n   \n   \n    Compile and Serve the app. All serve options are also available. The live-reload option defaults to false, and the default port will be random.\n   \n   \n    NOTE: Build failure will not launch the e2e task. You must first fix error(s) and run e2e again.\n     \n   specs \n   \n     --specs  (aliases:  -sp )  default value: [] \n   \n   \n    Override specs in the protractor config. Can send in multiple specs by repeating flag ( ng e2e --specs=spec1.ts --specs=spec2.ts ).\n     \n   suite \n   \n     --suite  (aliases:  -su )\n   \n   \n    Override suite in the protractor config. Can send in multiple suite by comma separated values ( ng e2e --suite=suiteA,suiteB ).\n     \n   webdriver-update \n   \n     --webdriver-update  (aliases:  -wu )  default value: true \n   \n   \n    Try to update webdriver.", 
            "title": "Options"
        }, 
        {
            "location": "/cli/eject/", 
            "text": "ng eject\n\n\nOverview\n\n\nng eject\n ejects your app and output the proper webpack configuration and scripts.\n\n\nThis command uses the same flags as \nng build\n, generating webpack configuration to match those\nflags.\n\n\nYou can use \n--force\n to overwrite existing configurations.\nYou can eject multiple times, to have a dev and prod config for instance, by renaming the ejected\nconfiguration and using the \n--force\n flag.\n\n\nEjecting the CLI\n\n\nng eject\n\n\n\n\nOptions\n\n\n\n  \naot\n\n  \n\n    \n--aot\n\n  \n\n  \n\n    Build using Ahead of Time compilation.\n  \n\n\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \nbase-href\n\n  \n\n    \n--base-href\n (aliases: \n-bh\n)\n  \n\n  \n\n    Base url for the application being built.\n  \n\n\n\n\n\n  \ndeploy-url\n\n  \n\n    \n--deploy-url\n (aliases: \n-d\n)\n  \n\n  \n\n    URL where files will be deployed.\n  \n\n\n\n\n\n  \nenvironment\n\n  \n\n    \n--environment\n (aliases: \n-e\n)\n  \n\n  \n\n    Defines the build environment.\n  \n\n\n\n\n\n  \nextract-css\n\n  \n\n    \n--extract-css\n (aliases: \n-ec\n)\n  \n\n  \n\n    Extract css from global styles onto css files instead of js ones.\n  \n\n\n\n\n\n  \nforce\n\n  \n\n    \n--force\n \ndefault value: false\n\n  \n\n  \n\n    Overwrite any webpack.config.js and npm scripts already existing.\n  \n\n\n\n\n\n  \ni18n-file\n\n  \n\n    \n--i18n-file\n\n  \n\n  \n\n    Localization file to use for i18n.\n  \n\n\n\n\n\n  \ni18n-format\n\n  \n\n    \n--i18n-format\n\n  \n\n  \n\n    Format of the localization file specified with --i18n-file.\n  \n\n\n\n\n\n  \nlocale\n\n  \n\n    \n--locale\n\n  \n\n  \n\n    Locale to use for i18n.\n  \n\n\n\n\n\n  \nmissing-translation\n\n  \n\n    \n--missing-translation\n\n  \n\n  \n\n    How to handle missing translations for i18n.\n  \n\n  \n\n    Values: \nerror\n, \nwarning\n, \nignore\n\n  \n\n\n\n\n\n  \noutput-hashing\n\n  \n\n    \n--output-hashing\n (aliases: \n-oh\n) \ndefault value: \n\n  \n\n  \n\n    Define the output filename cache-busting hashing mode. Possible values: \nnone\n, \nall\n, \nmedia\n, \nbundles\n\n  \n\n\n\n\n\n  \noutput-path\n\n  \n\n    \n--output-path\n (aliases: \n-op\n) \ndefault value: \n\n  \n\n  \n\n    Path where output will be placed.\n  \n\n\n\n\n\n  \npoll\n\n  \n\n    \n--poll\n\n  \n\n  \n\n    Enable and define the file watching poll time period (milliseconds) .\n  \n\n\n\n\n\n  \nprogress\n\n  \n\n    \n--progress\n (aliases: \n-pr\n) \ndefault value: true inside TTY, false otherwise\n\n  \n\n  \n\n    Log progress to the console while building.\n  \n\n\n\n\n\n  \nsourcemap\n\n  \n\n    \n--sourcemap\n (aliases: \n-sm\n, \nsourcemaps\n)\n  \n\n  \n\n    Output sourcemaps.\n  \n\n\n\n\n\n  \ntarget\n\n  \n\n    \n--target\n (aliases: \n-t\n, \n-dev\n, \n-prod\n) \ndefault value: development\n\n  \n\n  \n\n    Defines the build target.\n  \n\n\n\n\n\n  \nvendor-chunk\n\n  \n\n    \n--vendor-chunk\n (aliases: \n-vc\n) \ndefault value: true\n\n  \n\n  \n\n    Use a separate bundle containing only vendor libraries.\n  \n\n\n\n\n\n  \ncommon-chunk\n\n  \n\n    \n--common-chunk\n (aliases: \n-cc\n) \ndefault value: true\n\n  \n\n  \n\n    Use a separate bundle containing code used across multiple bundles.\n  \n\n\n\n\n\n  \nverbose\n\n  \n\n    \n--verbose\n (aliases: \n-v\n) \ndefault value: false\n\n  \n\n  \n\n    Adds more details to output logging.\n  \n\n\n\n\n\n  \nwatch\n\n  \n\n    \n--watch\n (aliases: \n-w\n)\n  \n\n  \n\n    Run build when files change.", 
            "title": "ng eject"
        }, 
        {
            "location": "/cli/eject/#ng-eject", 
            "text": "", 
            "title": "ng eject"
        }, 
        {
            "location": "/cli/eject/#overview", 
            "text": "ng eject  ejects your app and output the proper webpack configuration and scripts.  This command uses the same flags as  ng build , generating webpack configuration to match those\nflags.  You can use  --force  to overwrite existing configurations.\nYou can eject multiple times, to have a dev and prod config for instance, by renaming the ejected\nconfiguration and using the  --force  flag.", 
            "title": "Overview"
        }, 
        {
            "location": "/cli/eject/#ejecting-the-cli", 
            "text": "ng eject", 
            "title": "Ejecting the CLI"
        }, 
        {
            "location": "/cli/eject/#options", 
            "text": "aot \n   \n     --aot \n   \n   \n    Build using Ahead of Time compilation.\n     \n   app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   base-href \n   \n     --base-href  (aliases:  -bh )\n   \n   \n    Base url for the application being built.\n     \n   deploy-url \n   \n     --deploy-url  (aliases:  -d )\n   \n   \n    URL where files will be deployed.\n     \n   environment \n   \n     --environment  (aliases:  -e )\n   \n   \n    Defines the build environment.\n     \n   extract-css \n   \n     --extract-css  (aliases:  -ec )\n   \n   \n    Extract css from global styles onto css files instead of js ones.\n     \n   force \n   \n     --force   default value: false \n   \n   \n    Overwrite any webpack.config.js and npm scripts already existing.\n     \n   i18n-file \n   \n     --i18n-file \n   \n   \n    Localization file to use for i18n.\n     \n   i18n-format \n   \n     --i18n-format \n   \n   \n    Format of the localization file specified with --i18n-file.\n     \n   locale \n   \n     --locale \n   \n   \n    Locale to use for i18n.\n     \n   missing-translation \n   \n     --missing-translation \n   \n   \n    How to handle missing translations for i18n.\n   \n   \n    Values:  error ,  warning ,  ignore \n     \n   output-hashing \n   \n     --output-hashing  (aliases:  -oh )  default value:  \n   \n   \n    Define the output filename cache-busting hashing mode. Possible values:  none ,  all ,  media ,  bundles \n     \n   output-path \n   \n     --output-path  (aliases:  -op )  default value:  \n   \n   \n    Path where output will be placed.\n     \n   poll \n   \n     --poll \n   \n   \n    Enable and define the file watching poll time period (milliseconds) .\n     \n   progress \n   \n     --progress  (aliases:  -pr )  default value: true inside TTY, false otherwise \n   \n   \n    Log progress to the console while building.\n     \n   sourcemap \n   \n     --sourcemap  (aliases:  -sm ,  sourcemaps )\n   \n   \n    Output sourcemaps.\n     \n   target \n   \n     --target  (aliases:  -t ,  -dev ,  -prod )  default value: development \n   \n   \n    Defines the build target.\n     \n   vendor-chunk \n   \n     --vendor-chunk  (aliases:  -vc )  default value: true \n   \n   \n    Use a separate bundle containing only vendor libraries.\n     \n   common-chunk \n   \n     --common-chunk  (aliases:  -cc )  default value: true \n   \n   \n    Use a separate bundle containing code used across multiple bundles.\n     \n   verbose \n   \n     --verbose  (aliases:  -v )  default value: false \n   \n   \n    Adds more details to output logging.\n     \n   watch \n   \n     --watch  (aliases:  -w )\n   \n   \n    Run build when files change.", 
            "title": "Options"
        }, 
        {
            "location": "/cli/lint/", 
            "text": "ng lint\n\n\nOverview\n\n\nng lint\n will lint you app code using tslint.\n\n\nOptions\n\n\n\n  \nfix\n\n  \n\n    \n--fix\n \ndefault value: false\n\n  \n\n  \n\n    Fixes linting errors (may overwrite linted files).\n  \n\n\n\n\n\n  \nforce\n\n  \n\n    \n--force\n \ndefault value: false\n\n  \n\n  \n\n    Succeeds even if there was linting errors.\n  \n\n\n\n\n\n  \ntype-check\n\n  \n\n    \n--type-check\n \ndefault value: false\n\n  \n\n  \n\n    Controls the type check for linting.\n  \n\n\n\n\n\n  \nformat\n\n  \n\n    \n--format\n (aliases: \n-t\n) \ndefault value: prose\n\n  \n\n  \n\n    Output format (prose, json, stylish, verbose, pmd, msbuild, checkstyle, vso, fileslist).", 
            "title": "ng lint"
        }, 
        {
            "location": "/cli/lint/#ng-lint", 
            "text": "", 
            "title": "ng lint"
        }, 
        {
            "location": "/cli/lint/#overview", 
            "text": "ng lint  will lint you app code using tslint.", 
            "title": "Overview"
        }, 
        {
            "location": "/cli/lint/#options", 
            "text": "fix \n   \n     --fix   default value: false \n   \n   \n    Fixes linting errors (may overwrite linted files).\n     \n   force \n   \n     --force   default value: false \n   \n   \n    Succeeds even if there was linting errors.\n     \n   type-check \n   \n     --type-check   default value: false \n   \n   \n    Controls the type check for linting.\n     \n   format \n   \n     --format  (aliases:  -t )  default value: prose \n   \n   \n    Output format (prose, json, stylish, verbose, pmd, msbuild, checkstyle, vso, fileslist).", 
            "title": "Options"
        }, 
        {
            "location": "/cli/new/", 
            "text": "ng new\n\n\nOverview\n\n\nng new [name]\n creates a new angular application.\n\n\nDefault applications are created in a directory of the same name, with an initialized Angular application.\n\n\nOptions\n\n\n\n  \ndirectory\n\n  \n\n    \n--directory\n (alias: \n-dir\n) \ndefault value: dir\n\n  \n\n  \n\n    The directory name to create the app in.\n  \n\n\n\n\n\n  \ndry-run\n\n  \n\n    \n--dry-run\n (alias: \n-d\n) \ndefault value: false\n\n  \n\n  \n\n    Run through without making any changes. Will list all files that would have been created when running \nng new\n.\n  \n\n\n\n\n\n  \ninline-style\n\n  \n\n    \n--inline-style\n (alias: \n-is\n) \ndefault value: false\n\n  \n\n  \n\n    Should have an inline style.\n  \n\n\n\n\n\n  \ninline-template\n\n  \n\n    \n--inline-template\n (alias: \n-it\n) \ndefault value: false\n\n  \n\n  \n\n    Should have an inline template.\n  \n\n\n\n\n\n  \nminimal\n\n  \n\n    \n--minimal\n \ndefault value: false\n\n  \n\n  \n\n    Should create a minimal app.\n  \n\n\n\n\n\n  \nprefix\n\n  \n\n    \n--prefix\n (alias: \n-p\n) \ndefault value: app\n\n  \n\n  \n\n    The prefix to use for all component selectors.\n  \n\n  \n\n    You can later change the value in \n.angular-cli.json\n (\napps[0].prefix\n).\n  \n\n\n\n\n\n  \nrouting\n\n  \n\n    \n--routing\n \ndefault value: false\n\n  \n\n  \n\n    Generate a routing module.\n  \n\n\n\n\n\n  \nskip-commit\n\n  \n\n    \n--skip-commit\n (alias: \n-sc\n) \ndefault value: false\n\n  \n\n  \n\n    Skip committing the first commit to git.\n  \n\n\n\n\n\n  \nskip-git\n\n  \n\n    \n--skip-git\n (alias: \n-sg\n) \ndefault value: false\n\n  \n\n  \n\n    Skip initializing a git repository.\n  \n\n\n\n\n\n  \nskip-install\n\n  \n\n    \n--skip-install\n (alias: \n-si\n) \ndefault value: false\n\n  \n\n  \n\n    Skip installing packages.\n  \n\n\n\n\n\n  \nskip-tests\n\n  \n\n    \n--skip-tests (aliases: \n-st) \ndefault value: false\n\n  \n\n  \n\n    Skip creating spec files.\n  \n\n  \n\n    Skip including e2e functionality.\n  \n\n\n\n\n\n  \nsource-dir\n\n  \n\n    \n--source-dir\n (alias: \n-sd\n) \ndefault value: src\n\n  \n\n  \n\n    The name of the source directory.\n  \n\n  \n\n    You can later change the value in \n.angular-cli.json\n (\napps[0].root\n).\n  \n\n\n\n\n\n  \nstyle\n\n  \n\n    \n--style\n \ndefault value: css\n\n  \n\n  \n\n    The style file default extension. Possible values:\n    \n\n      \ncss\n\n      \nscss\n\n      \nless\n\n      \nsass\n\n      \nstyl (\nstylus\n)\n\n    \n\n  \n\n  \n\n    You can later change the value in \n.angular-cli.json\n (\ndefaults.styleExt\n).\n  \n\n\n\n\n\n  \nverbose\n\n  \n\n    \n--verbose\n (alias: \n-v\n) \ndefault value: false\n\n  \n\n  \n\n    Adds more details to output logging.", 
            "title": "ng new"
        }, 
        {
            "location": "/cli/new/#ng-new", 
            "text": "", 
            "title": "ng new"
        }, 
        {
            "location": "/cli/new/#overview", 
            "text": "ng new [name]  creates a new angular application.  Default applications are created in a directory of the same name, with an initialized Angular application.", 
            "title": "Overview"
        }, 
        {
            "location": "/cli/new/#options", 
            "text": "directory \n   \n     --directory  (alias:  -dir )  default value: dir \n   \n   \n    The directory name to create the app in.\n     \n   dry-run \n   \n     --dry-run  (alias:  -d )  default value: false \n   \n   \n    Run through without making any changes. Will list all files that would have been created when running  ng new .\n     \n   inline-style \n   \n     --inline-style  (alias:  -is )  default value: false \n   \n   \n    Should have an inline style.\n     \n   inline-template \n   \n     --inline-template  (alias:  -it )  default value: false \n   \n   \n    Should have an inline template.\n     \n   minimal \n   \n     --minimal   default value: false \n   \n   \n    Should create a minimal app.\n     \n   prefix \n   \n     --prefix  (alias:  -p )  default value: app \n   \n   \n    The prefix to use for all component selectors.\n   \n   \n    You can later change the value in  .angular-cli.json  ( apps[0].prefix ).\n     \n   routing \n   \n     --routing   default value: false \n   \n   \n    Generate a routing module.\n     \n   skip-commit \n   \n     --skip-commit  (alias:  -sc )  default value: false \n   \n   \n    Skip committing the first commit to git.\n     \n   skip-git \n   \n     --skip-git  (alias:  -sg )  default value: false \n   \n   \n    Skip initializing a git repository.\n     \n   skip-install \n   \n     --skip-install  (alias:  -si )  default value: false \n   \n   \n    Skip installing packages.\n     \n   skip-tests \n   \n     --skip-tests (aliases:  -st)  default value: false \n   \n   \n    Skip creating spec files.\n   \n   \n    Skip including e2e functionality.\n     \n   source-dir \n   \n     --source-dir  (alias:  -sd )  default value: src \n   \n   \n    The name of the source directory.\n   \n   \n    You can later change the value in  .angular-cli.json  ( apps[0].root ).\n     \n   style \n   \n     --style   default value: css \n   \n   \n    The style file default extension. Possible values:\n     \n       css \n       scss \n       less \n       sass \n       styl ( stylus ) \n     \n   \n   \n    You can later change the value in  .angular-cli.json  ( defaults.styleExt ).\n     \n   verbose \n   \n     --verbose  (alias:  -v )  default value: false \n   \n   \n    Adds more details to output logging.", 
            "title": "Options"
        }, 
        {
            "location": "/cli/serve/", 
            "text": "ng serve\n\n\nOverview\n\n\nng serve\n builds the application and starts a web server.\n\n\nAll the build Options are available in serve, below are the additional options.\n\n\nOptions\n\n\n\n  \nhost\n\n  \n\n    \n--host\n (aliases: \n-H\n) \ndefault value: localhost\n\n  \n\n  \n\n    Listens only on localhost by default.\n  \n\n\n\n\n\n  \nhmr\n\n  \n\n    \n--hmr\n \ndefault value: false\n\n  \n\n  \n\n    Enable hot module replacement.\n  \n\n\n\n\n\n  \nlive-reload\n\n  \n\n    \n--live-reload\n (aliases: \n-lr\n) \ndefault value: true\n\n  \n\n  \n\n    Whether to reload the page on change, using live-reload.\n  \n\n\n\n\n\n  \npublic-host\n\n  \n\n    \n--public-host\n (aliases: \n--live-reload-client\n)\n  \n\n  \n\n    Specify the URL that the browser client will use.\n  \n\n\n\n\n\n  \ndisable-host-check\n\n  \n\n    \n--disable-host-check\n \ndefault value: false\n\n  \n\n  \n\n    Don't verify connected clients are part of allowed hosts.\n  \n\n\n\n\n\n  \nopen\n\n  \n\n    \n--open\n (aliases: \n-o\n) \ndefault value: false\n\n  \n\n  \n\n    Opens the url in default browser.\n  \n\n\n\n\n\n  \nport\n\n  \n\n    \n--port\n (aliases: \n-p\n) \ndefault value: 4200\n\n  \n\n  \n\n    Port to listen to for serving.\n  \n\n\n\n\n\n  \nssl\n\n  \n\n    \n--ssl\n\n  \n\n  \n\n    Serve using HTTPS.\n  \n\n\n\n\n\n  \nssl-cert\n\n  \n\n    \n--ssl-cert\n (aliases: \n-\n) \ndefault value: \n\n  \n\n  \n\n    SSL certificate to use for serving HTTPS.\n  \n\n\n\n\n\n  \nssl-key\n\n  \n\n    \n--ssl-key\n\n  \n\n  \n\n    SSL key to use for serving HTTPS.\n  \n\n\n\n\n\n  \naot\n\n  \n\n    \n--aot\n\n  \n\n  \n\n    Build using Ahead of Time compilation.\n  \n\n\n\n\n\n  \nbase-href\n\n  \n\n    \n--base-href\n (aliases: \n-bh\n)\n  \n\n  \n\n    Base url for the application being built.\n  \n\n\n\n\n\n  \ndeploy-url\n\n  \n\n    \n--deploy-url\n (aliases: \n-d\n)\n  \n\n  \n\n    URL where files will be deployed.\n  \n\n\n\n\n\n  \nenvironment\n\n  \n\n    \n--environment\n (aliases: \n-e\n)\n  \n\n  \n\n    Defines the build environment.\n  \n\n\n\n\n\n  \nextract-css\n\n  \n\n    \n--extract-css\n (aliases: \n-ec\n)\n  \n\n  \n\n    Extract css from global styles onto css files instead of js ones.\n  \n\n\n\n\n\n  \ni18n-file\n\n  \n\n    \n--i18n-file\n\n  \n\n  \n\n    Localization file to use for i18n.\n  \n\n\n\n\n\n  \ni18n-format\n\n  \n\n    \n--i18n-format\n\n  \n\n  \n\n    Format of the localization file specified with --i18n-file.\n  \n\n\n\n\n\n  \nlocale\n\n  \n\n    \n--locale\n\n  \n\n  \n\n    Locale to use for i18n.\n  \n\n\n\n\n\n  \nmissing-translation\n\n  \n\n    \n--missing-translation\n\n  \n\n  \n\n    How to handle missing translations for i18n.\n  \n\n  \n\n    Values: \nerror\n, \nwarning\n, \nignore\n\n  \n\n\n\n\n\n  \noutput-hashing\n\n  \n\n    \n--output-hashing\n (aliases: \n-oh\n) \ndefault value: \n\n  \n\n  \n\n    Define the output filename cache-busting hashing mode. Possible values: \nnone\n, \nall\n, \nmedia\n, \nbundles\n\n  \n\n\n\n\n\n  \noutput-path\n\n  \n\n    \n--output-path\n (aliases: \n-op\n) \ndefault value: \n\n  \n\n  \n\n    Path where output will be placed.\n  \n\n\n\n\n\n  \npoll\n\n  \n\n    \n--poll\n\n  \n\n  \n\n    Enable and define the file watching poll time period (milliseconds) .\n  \n\n\n\n\n\n  \nprogress\n\n  \n\n    \n--progress\n (aliases: \n-pr\n) \ndefault value: true inside TTY, false otherwise\n\n  \n\n  \n\n    Log progress to the console while building.\n  \n\n\n\n\n\n  \nproxy-config\n\n  \n\n    \n--proxy-config\n (aliases: \n-pc\n)\n  \n\n  \n\n    Use a \nproxy\n configuration file to send some requests to a backend server rather than the webpack dev server.\n  \n\n\n\n\n\n  \nsourcemap\n\n  \n\n    \n--sourcemap\n (aliases: \n-sm\n, \nsourcemaps\n)\n  \n\n  \n\n    Output sourcemaps.\n  \n\n\n\n\n\n  \ntarget\n\n  \n\n    \n--target\n (aliases: \n-t\n, \n-dev\n, \n-prod\n) \ndefault value: development\n\n  \n\n  \n\n    Defines the build target.\n  \n\n\n\n\n\n  \nvendor-chunk\n\n  \n\n    \n--vendor-chunk\n (aliases: \n-vc\n) \ndefault value: true\n\n  \n\n  \n\n    Use a separate bundle containing only vendor libraries.\n  \n\n\n\n\n\n  \ncommon-chunk\n\n  \n\n    \n--common-chunk\n (aliases: \n-cc\n) \ndefault value: true\n\n  \n\n  \n\n    Use a separate bundle containing code used across multiple bundles.\n  \n\n\n\n\n\n  \nverbose\n\n  \n\n    \n--verbose\n (aliases: \n-v\n) \ndefault value: false\n\n  \n\n  \n\n    Adds more details to output logging.\n  \n\n\n\n\n\n  \nwatch\n\n  \n\n    \n--watch\n (aliases: \n-w\n)\n  \n\n  \n\n    Run build when files change.\n  \n\n\n\n\nNote\n\n\nWhen running \nng serve\n, the compiled output is served from memory, not from disk. This means that the application being served is not located on disk in the \ndist\n folder.", 
            "title": "ng serve"
        }, 
        {
            "location": "/cli/serve/#ng-serve", 
            "text": "", 
            "title": "ng serve"
        }, 
        {
            "location": "/cli/serve/#overview", 
            "text": "ng serve  builds the application and starts a web server.  All the build Options are available in serve, below are the additional options.", 
            "title": "Overview"
        }, 
        {
            "location": "/cli/serve/#options", 
            "text": "host \n   \n     --host  (aliases:  -H )  default value: localhost \n   \n   \n    Listens only on localhost by default.\n     \n   hmr \n   \n     --hmr   default value: false \n   \n   \n    Enable hot module replacement.\n     \n   live-reload \n   \n     --live-reload  (aliases:  -lr )  default value: true \n   \n   \n    Whether to reload the page on change, using live-reload.\n     \n   public-host \n   \n     --public-host  (aliases:  --live-reload-client )\n   \n   \n    Specify the URL that the browser client will use.\n     \n   disable-host-check \n   \n     --disable-host-check   default value: false \n   \n   \n    Don't verify connected clients are part of allowed hosts.\n     \n   open \n   \n     --open  (aliases:  -o )  default value: false \n   \n   \n    Opens the url in default browser.\n     \n   port \n   \n     --port  (aliases:  -p )  default value: 4200 \n   \n   \n    Port to listen to for serving.\n     \n   ssl \n   \n     --ssl \n   \n   \n    Serve using HTTPS.\n     \n   ssl-cert \n   \n     --ssl-cert  (aliases:  - )  default value:  \n   \n   \n    SSL certificate to use for serving HTTPS.\n     \n   ssl-key \n   \n     --ssl-key \n   \n   \n    SSL key to use for serving HTTPS.\n     \n   aot \n   \n     --aot \n   \n   \n    Build using Ahead of Time compilation.\n     \n   base-href \n   \n     --base-href  (aliases:  -bh )\n   \n   \n    Base url for the application being built.\n     \n   deploy-url \n   \n     --deploy-url  (aliases:  -d )\n   \n   \n    URL where files will be deployed.\n     \n   environment \n   \n     --environment  (aliases:  -e )\n   \n   \n    Defines the build environment.\n     \n   extract-css \n   \n     --extract-css  (aliases:  -ec )\n   \n   \n    Extract css from global styles onto css files instead of js ones.\n     \n   i18n-file \n   \n     --i18n-file \n   \n   \n    Localization file to use for i18n.\n     \n   i18n-format \n   \n     --i18n-format \n   \n   \n    Format of the localization file specified with --i18n-file.\n     \n   locale \n   \n     --locale \n   \n   \n    Locale to use for i18n.\n     \n   missing-translation \n   \n     --missing-translation \n   \n   \n    How to handle missing translations for i18n.\n   \n   \n    Values:  error ,  warning ,  ignore \n     \n   output-hashing \n   \n     --output-hashing  (aliases:  -oh )  default value:  \n   \n   \n    Define the output filename cache-busting hashing mode. Possible values:  none ,  all ,  media ,  bundles \n     \n   output-path \n   \n     --output-path  (aliases:  -op )  default value:  \n   \n   \n    Path where output will be placed.\n     \n   poll \n   \n     --poll \n   \n   \n    Enable and define the file watching poll time period (milliseconds) .\n     \n   progress \n   \n     --progress  (aliases:  -pr )  default value: true inside TTY, false otherwise \n   \n   \n    Log progress to the console while building.\n     \n   proxy-config \n   \n     --proxy-config  (aliases:  -pc )\n   \n   \n    Use a  proxy  configuration file to send some requests to a backend server rather than the webpack dev server.\n     \n   sourcemap \n   \n     --sourcemap  (aliases:  -sm ,  sourcemaps )\n   \n   \n    Output sourcemaps.\n     \n   target \n   \n     --target  (aliases:  -t ,  -dev ,  -prod )  default value: development \n   \n   \n    Defines the build target.\n     \n   vendor-chunk \n   \n     --vendor-chunk  (aliases:  -vc )  default value: true \n   \n   \n    Use a separate bundle containing only vendor libraries.\n     \n   common-chunk \n   \n     --common-chunk  (aliases:  -cc )  default value: true \n   \n   \n    Use a separate bundle containing code used across multiple bundles.\n     \n   verbose \n   \n     --verbose  (aliases:  -v )  default value: false \n   \n   \n    Adds more details to output logging.\n     \n   watch \n   \n     --watch  (aliases:  -w )\n   \n   \n    Run build when files change.", 
            "title": "Options"
        }, 
        {
            "location": "/cli/serve/#note", 
            "text": "When running  ng serve , the compiled output is served from memory, not from disk. This means that the application being served is not located on disk in the  dist  folder.", 
            "title": "Note"
        }, 
        {
            "location": "/cli/test/", 
            "text": "ng test\n\n\n\u6982\u89c2\n\n\nng test\n \u5c06\u5e94\u7528\u7a0b\u5e8f\u7f16\u8bd1\u5230\u8f93\u51fa\u76ee\u5f55\u4e2d\n\n\n\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\n\n\nng \ntest\n\n\n\n\n\nTests will execute after a build is executed via \nKarma\n, and it will automatically watch your files for changes. You can run tests a single time via \n--watch=false\n or \n--single-run\n.\n\n\nYou can run tests with coverage via \n--code-coverage\n. The coverage report will be in the \ncoverage/\n directory.\n\n\n\u9009\u9879\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name or index to use.\n  \n\n\n\n\n\n  \nbrowsers\n\n  \n\n    \n--browsers\n\n  \n\n  \n\n    Override which browsers tests are run against.\n  \n\n\n\n\n\n  \ncode-coverage\n\n  \n\n    \n--code-coverage\n (aliases: \n-cc\n) \ndefault value: false\n\n  \n\n  \n\n    Coverage report will be in the coverage/ directory.\n  \n\n\n\n\n\n  \ncolors\n\n  \n\n    \n--colors\n\n  \n\n  \n\n    Enable or disable colors in the output (reporters and logs).\n  \n\n\n\n\n\n  \nconfig\n\n  \n\n    \n--config\n (aliases: \n-c\n)\n  \n\n  \n\n    Use a specific config file. Defaults to the karma config file in \n.angular-cli.json\n.\n  \n\n\n\n\n\n  \nenvironment\n\n  \n\n    \n--environment\n (aliases: \n-e\n)\n  \n\n  \n\n    Defines the build environment.\n  \n\n\n\n\n\n  \nlog-level\n\n  \n\n    \n--log-level\n\n  \n\n  \n\n    Level of logging.\n  \n\n\n\n\n\n  \npoll\n\n  \n\n    \n--poll\n\n  \n\n  \n\n    Enable and define the file watching poll time period (milliseconds).\n  \n\n\n\n\n\n  \nport\n\n  \n\n    \n--port\n\n  \n\n  \n\n    Port where the web server will be listening.\n  \n\n\n\n\n\n  \nprogress\n\n  \n\n    \n--progress\n \ndefault value: true inside TTY, false otherwise\n\n  \n\n  \n\n    Log progress to the console while in progress.\n  \n\n\n\n\n\n  \nreporters\n\n  \n\n    \n--reporters\n\n  \n\n  \n\n    List of reporters to use.\n  \n\n\n\n\n\n  \nsingle-run\n\n  \n\n    \n--single-run\n (aliases: \n-sr\n)\n  \n\n  \n\n    Run tests a single time.\n  \n\n\n\n\n\n  \nsourcemap\n\n  \n\n    \n--sourcemap\n (aliases: \n-sm\n, \nsourcemaps\n)\n  \n\n  \n\n    Output sourcemaps.\n  \n\n\n\n\n\n  \nwatch\n\n  \n\n    \n--watch\n (aliases: \n-w\n)\n  \n\n  \n\n    Run build when files change.", 
            "title": "ng test"
        }, 
        {
            "location": "/cli/test/#ng-test", 
            "text": "", 
            "title": "ng test"
        }, 
        {
            "location": "/cli/test/#_1", 
            "text": "ng test  \u5c06\u5e94\u7528\u7a0b\u5e8f\u7f16\u8bd1\u5230\u8f93\u51fa\u76ee\u5f55\u4e2d", 
            "title": "\u6982\u89c2"
        }, 
        {
            "location": "/cli/test/#_2", 
            "text": "ng  test   Tests will execute after a build is executed via  Karma , and it will automatically watch your files for changes. You can run tests a single time via  --watch=false  or  --single-run .  You can run tests with coverage via  --code-coverage . The coverage report will be in the  coverage/  directory.", 
            "title": "\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5"
        }, 
        {
            "location": "/cli/test/#_3", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name or index to use.\n     \n   browsers \n   \n     --browsers \n   \n   \n    Override which browsers tests are run against.\n     \n   code-coverage \n   \n     --code-coverage  (aliases:  -cc )  default value: false \n   \n   \n    Coverage report will be in the coverage/ directory.\n     \n   colors \n   \n     --colors \n   \n   \n    Enable or disable colors in the output (reporters and logs).\n     \n   config \n   \n     --config  (aliases:  -c )\n   \n   \n    Use a specific config file. Defaults to the karma config file in  .angular-cli.json .\n     \n   environment \n   \n     --environment  (aliases:  -e )\n   \n   \n    Defines the build environment.\n     \n   log-level \n   \n     --log-level \n   \n   \n    Level of logging.\n     \n   poll \n   \n     --poll \n   \n   \n    Enable and define the file watching poll time period (milliseconds).\n     \n   port \n   \n     --port \n   \n   \n    Port where the web server will be listening.\n     \n   progress \n   \n     --progress   default value: true inside TTY, false otherwise \n   \n   \n    Log progress to the console while in progress.\n     \n   reporters \n   \n     --reporters \n   \n   \n    List of reporters to use.\n     \n   single-run \n   \n     --single-run  (aliases:  -sr )\n   \n   \n    Run tests a single time.\n     \n   sourcemap \n   \n     --sourcemap  (aliases:  -sm ,  sourcemaps )\n   \n   \n    Output sourcemaps.\n     \n   watch \n   \n     --watch  (aliases:  -w )\n   \n   \n    Run build when files change.", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/cli/update/", 
            "text": "ng update\n\n\n\u6982\u8ff0\n\n\nng update\n \u5c06\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u66f4\u65b0\u4e3a\u6700\u65b0\u7248\u672c\u3002\n\n\n\u9009\u9879\n\n\n\n  \ndry-run\n\n  \n\n    \n--dry-run\n (alias: \n-d\n) \ndefault value: false\n\n  \n\n  \n\n    Run through without making any changes. Will list all files that would have been created when running \nng update\n.", 
            "title": "ng update"
        }, 
        {
            "location": "/cli/update/#ng-update", 
            "text": "", 
            "title": "ng update"
        }, 
        {
            "location": "/cli/update/#_1", 
            "text": "ng update  \u5c06\u5f53\u524d\u5e94\u7528\u7a0b\u5e8f\u66f4\u65b0\u4e3a\u6700\u65b0\u7248\u672c\u3002", 
            "title": "\u6982\u8ff0"
        }, 
        {
            "location": "/cli/update/#_2", 
            "text": "dry-run \n   \n     --dry-run  (alias:  -d )  default value: false \n   \n   \n    Run through without making any changes. Will list all files that would have been created when running  ng update .", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/generate/", 
            "text": "ng generate\n\n\n\u6982\u89c2\n\n\nng generate [name]\n\u751f\u6210\u6307\u5b9a\u7684\u84dd\u56fe\n\n\n\u53ef\u7528\u7684\u84dd\u56fe\n\n\n\n\nclass\n\n\ncomponent\n\n\ndirective\n\n\nenum\n\n\nguard\n\n\ninterface\n\n\nmodule\n\n\npipe\n\n\nservice\n\n\n\n\n\u9009\u9879\n\n\n\n  \ndry-run\n\n  \n\n    \n--dry-run\n (aliases: \n-d\n) \ndefault value: false\n\n  \n\n  \n\n     Run through without making any changes. Will list all files that would have been created when running \nng generate\n.\n  \n\n\n\n\n\n  \nlint-fix\n\n  \n\n    \n--lint-fix\n (aliases: \n-lf\n)\n  \n\n  \n\n    Use lint to fix files after generation.\n  \n\n  \n\n    You can also set default true to use lint every time after generation. To do this, change the value in \n.angular-cli.json\n (\ndefaults.lintFix\n).\n  \n\n\n\n\n\n  \nverbose\n\n  \n\n    \n--verbose\n (aliases: \n-v\n) \ndefault value: false\n\n  \n\n  \n\n    Adds more details to output logging.\n  \n\n\n\n\n\n  \ncollection\n\n  \n\n    \n--collection\n (aliases: \n-c\n) \ndefault value: @schematics/angular\n\n  \n\n  \n\n    Schematics collection to use.", 
            "title": "ng generate"
        }, 
        {
            "location": "/generate/#ng-generate", 
            "text": "", 
            "title": "ng generate"
        }, 
        {
            "location": "/generate/#_1", 
            "text": "ng generate [name] \u751f\u6210\u6307\u5b9a\u7684\u84dd\u56fe", 
            "title": "\u6982\u89c2"
        }, 
        {
            "location": "/generate/#_2", 
            "text": "class  component  directive  enum  guard  interface  module  pipe  service", 
            "title": "\u53ef\u7528\u7684\u84dd\u56fe"
        }, 
        {
            "location": "/generate/#_3", 
            "text": "dry-run \n   \n     --dry-run  (aliases:  -d )  default value: false \n   \n   \n     Run through without making any changes. Will list all files that would have been created when running  ng generate .\n     \n   lint-fix \n   \n     --lint-fix  (aliases:  -lf )\n   \n   \n    Use lint to fix files after generation.\n   \n   \n    You can also set default true to use lint every time after generation. To do this, change the value in  .angular-cli.json  ( defaults.lintFix ).\n     \n   verbose \n   \n     --verbose  (aliases:  -v )  default value: false \n   \n   \n    Adds more details to output logging.\n     \n   collection \n   \n     --collection  (aliases:  -c )  default value: @schematics/angular \n   \n   \n    Schematics collection to use.", 
            "title": "\u9009\u9879"
        }, 
        {
            "location": "/generate/class/", 
            "text": "ng generate class\n\n\nOverview\n\n\nng generate class [name]\n generates a class\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \nspec\n\n  \n\n    \n--spec\n\n  \n\n  \n\n    Specifies if a spec file is generated.", 
            "title": "ng generate class"
        }, 
        {
            "location": "/generate/class/#ng-generate-class", 
            "text": "", 
            "title": "ng generate class"
        }, 
        {
            "location": "/generate/class/#overview", 
            "text": "ng generate class [name]  generates a class", 
            "title": "Overview"
        }, 
        {
            "location": "/generate/class/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   spec \n   \n     --spec \n   \n   \n    Specifies if a spec file is generated.", 
            "title": "Options"
        }, 
        {
            "location": "/generate/component/", 
            "text": "ng generate component\n\n\nOverview\n\n\nng generate component [name]\n generates a component\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \nchange-detection\n\n  \n\n    \n--change-detection\n (aliases: \n-cd\n)\n  \n\n  \n\n    Specifies the change detection strategy.\n  \n\n\n\n\n\n  \nflat\n\n  \n\n    \n--flat\n \ndefault value: false\n\n  \n\n  \n\n    Flag to indicate if a dir is created.\n  \n\n\n\n\n\n  \nexport\n\n  \n\n    \n--export\n \ndefault value: false\n\n  \n\n  \n\n    Specifies if declaring module exports the component.\n  \n\n\n\n\n\n  \ninline-style\n\n  \n\n    \n--inline-style\n (aliases: \n-is\n) \ndefault value: false\n\n  \n\n  \n\n    Specifies if the style will be in the ts file.\n  \n\n\n\n\n\n  \ninline-template\n\n  \n\n    \n--inline-template\n (aliases: \n-it\n) \ndefault value: false\n\n  \n\n  \n\n    Specifies if the template will be in the ts file.\n  \n\n\n\n\n\n  \nmodule\n\n  \n\n    \n--module\n (aliases: \n-m\n)\n  \n\n  \n\n    \u5141\u8bb8\u6307\u5b9a\u58f0\u660e\u6a21\u5757\u7684\u6587\u4ef6\u540d\u79f0\uff08\u4f8b\u5982\napp.module.ts\n\uff09\u3002\n  \n\n\n\n\n\n  \nprefix\n\n  \n\n    \n--prefix\n\n  \n\n  \n\n    Specifies whether to use the prefix.\n  \n\n\n\n\n\n  \nskip-import\n\n  \n\n    \n--skip-import\n \ndefault value: false\n\n  \n\n  \n\n    Allows for skipping the module import.\n  \n\n\n\n\n\n  \nspec\n\n  \n\n    \n--spec\n\n  \n\n  \n\n    Specifies if a spec file is generated.\n  \n\n\n\n\n\n  \nview-encapsulation\n\n  \n\n    \n--view-encapsulation\n (aliases: \n-ve\n)\n  \n\n  \n\n    Specifies the view encapsulation strategy.", 
            "title": "ng generate component"
        }, 
        {
            "location": "/generate/component/#ng-generate-component", 
            "text": "", 
            "title": "ng generate component"
        }, 
        {
            "location": "/generate/component/#overview", 
            "text": "ng generate component [name]  generates a component", 
            "title": "Overview"
        }, 
        {
            "location": "/generate/component/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   change-detection \n   \n     --change-detection  (aliases:  -cd )\n   \n   \n    Specifies the change detection strategy.\n     \n   flat \n   \n     --flat   default value: false \n   \n   \n    Flag to indicate if a dir is created.\n     \n   export \n   \n     --export   default value: false \n   \n   \n    Specifies if declaring module exports the component.\n     \n   inline-style \n   \n     --inline-style  (aliases:  -is )  default value: false \n   \n   \n    Specifies if the style will be in the ts file.\n     \n   inline-template \n   \n     --inline-template  (aliases:  -it )  default value: false \n   \n   \n    Specifies if the template will be in the ts file.\n     \n   module \n   \n     --module  (aliases:  -m )\n   \n   \n    \u5141\u8bb8\u6307\u5b9a\u58f0\u660e\u6a21\u5757\u7684\u6587\u4ef6\u540d\u79f0\uff08\u4f8b\u5982 app.module.ts \uff09\u3002\n     \n   prefix \n   \n     --prefix \n   \n   \n    Specifies whether to use the prefix.\n     \n   skip-import \n   \n     --skip-import   default value: false \n   \n   \n    Allows for skipping the module import.\n     \n   spec \n   \n     --spec \n   \n   \n    Specifies if a spec file is generated.\n     \n   view-encapsulation \n   \n     --view-encapsulation  (aliases:  -ve )\n   \n   \n    Specifies the view encapsulation strategy.", 
            "title": "Options"
        }, 
        {
            "location": "/generate/directive/", 
            "text": "ng generate directive\n\n\nOverview\n\n\nng generate directive [name]\n generates a directive\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \nexport\n\n  \n\n    \n--export\n \ndefault value: false\n\n  \n\n  \n\n    Specifies if declaring module exports the component.\n  \n\n\n\n\n\n  \nflat\n\n  \n\n    \n--flat\n\n  \n\n  \n\n    Flag to indicate if a dir is created.\n  \n\n\n\n\n\n  \nmodule\n\n  \n\n    \n--module\n (aliases: \n-m\n)\n  \n\n  \n\n    Allows specification of the declaring module.\n  \n\n\n\n\n\n  \nprefix\n\n  \n\n    \n--prefix\n\n  \n\n  \n\n    Specifies whether to use the prefix.\n  \n\n\n\n\n\n  \nskip-import\n\n  \n\n    \n--skip-import\n\n  \n\n  \n\n    Allows for skipping the module import.\n  \n\n\n\n\n\n  \nspec\n\n  \n\n    \n--spec\n\n  \n\n  \n\n    Specifies if a spec file is generated.", 
            "title": "ng generate directive"
        }, 
        {
            "location": "/generate/directive/#ng-generate-directive", 
            "text": "", 
            "title": "ng generate directive"
        }, 
        {
            "location": "/generate/directive/#overview", 
            "text": "ng generate directive [name]  generates a directive", 
            "title": "Overview"
        }, 
        {
            "location": "/generate/directive/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   export \n   \n     --export   default value: false \n   \n   \n    Specifies if declaring module exports the component.\n     \n   flat \n   \n     --flat \n   \n   \n    Flag to indicate if a dir is created.\n     \n   module \n   \n     --module  (aliases:  -m )\n   \n   \n    Allows specification of the declaring module.\n     \n   prefix \n   \n     --prefix \n   \n   \n    Specifies whether to use the prefix.\n     \n   skip-import \n   \n     --skip-import \n   \n   \n    Allows for skipping the module import.\n     \n   spec \n   \n     --spec \n   \n   \n    Specifies if a spec file is generated.", 
            "title": "Options"
        }, 
        {
            "location": "/generate/enum/", 
            "text": "ng generate enum\n\n\n\u6982\u89c2\n\n\nng generate enum [name]\n generates an enumeration\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.", 
            "title": "ng generate enum"
        }, 
        {
            "location": "/generate/enum/#ng-generate-enum", 
            "text": "", 
            "title": "ng generate enum"
        }, 
        {
            "location": "/generate/enum/#_1", 
            "text": "ng generate enum [name]  generates an enumeration", 
            "title": "\u6982\u89c2"
        }, 
        {
            "location": "/generate/enum/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.", 
            "title": "Options"
        }, 
        {
            "location": "/generate/guard/", 
            "text": "ng generate guard\n\n\nOverview\n\n\nng generate guard [name]\n generates a guard\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \nflat\n\n  \n\n    \n--flat\n\n  \n\n  \n\n    Indicate if a dir is created.\n  \n\n\n\n\n\n  \nmodule\n\n  \n\n    \n--module\n (aliases: \n-m\n)\n  \n\n  \n\n    Specifies where the guard should be provided.\n  \n\n\n\n\n\n  \nspec\n\n  \n\n    \n--spec\n\n  \n\n  \n\n    Specifies if a spec file is generated.", 
            "title": "ng generate guard"
        }, 
        {
            "location": "/generate/guard/#ng-generate-guard", 
            "text": "", 
            "title": "ng generate guard"
        }, 
        {
            "location": "/generate/guard/#overview", 
            "text": "ng generate guard [name]  generates a guard", 
            "title": "Overview"
        }, 
        {
            "location": "/generate/guard/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   flat \n   \n     --flat \n   \n   \n    Indicate if a dir is created.\n     \n   module \n   \n     --module  (aliases:  -m )\n   \n   \n    Specifies where the guard should be provided.\n     \n   spec \n   \n     --spec \n   \n   \n    Specifies if a spec file is generated.", 
            "title": "Options"
        }, 
        {
            "location": "/generate/interface/", 
            "text": "ng generate interface\n\n\nOverview\n\n\nng generate interface [name] \ntype\n generates an interface\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \ntype\n\n  \n\n    Optional String to specify the type of interface.", 
            "title": "ng generate interface"
        }, 
        {
            "location": "/generate/interface/#ng-generate-interface", 
            "text": "", 
            "title": "ng generate interface"
        }, 
        {
            "location": "/generate/interface/#overview", 
            "text": "ng generate interface [name]  type  generates an interface", 
            "title": "Overview"
        }, 
        {
            "location": "/generate/interface/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   type \n   \n    Optional String to specify the type of interface.", 
            "title": "Options"
        }, 
        {
            "location": "/generate/module/", 
            "text": "ng generate module\n\n\nOverview\n\n\nng generate module [name]\n generates an NgModule\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \nflat\n\n  \n\n    \n--flat\n\n  \n\n  \n\n    Flag to indicate if a dir is created.\n  \n\n\n\n\n\n  \nmodule\n\n  \n\n    \n--module\n (aliases: \n-m\n)\n  \n\n  \n\n    Specifies where the module should be imported.\n  \n\n\n\n\n\n  \nspec\n\n  \n\n    \n--spec\n\n  \n\n  \n\n    Specifies if a spec file is generated.\n  \n\n\n\n\n\n  \nrouting\n\n  \n\n    \n--routing\n\n  \n\n  \n\n    Specifies if a routing module file should be generated.", 
            "title": "ng generate module"
        }, 
        {
            "location": "/generate/module/#ng-generate-module", 
            "text": "", 
            "title": "ng generate module"
        }, 
        {
            "location": "/generate/module/#overview", 
            "text": "ng generate module [name]  generates an NgModule", 
            "title": "Overview"
        }, 
        {
            "location": "/generate/module/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   flat \n   \n     --flat \n   \n   \n    Flag to indicate if a dir is created.\n     \n   module \n   \n     --module  (aliases:  -m )\n   \n   \n    Specifies where the module should be imported.\n     \n   spec \n   \n     --spec \n   \n   \n    Specifies if a spec file is generated.\n     \n   routing \n   \n     --routing \n   \n   \n    Specifies if a routing module file should be generated.", 
            "title": "Options"
        }, 
        {
            "location": "/generate/pipe/", 
            "text": "ng generate pipe\n\n\nOverview\n\n\nng generate pipe [name]\n generates a pipe\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \nexport\n\n  \n\n    \n--export\n\n  \n\n  \n\n    Specifies if declaring module exports the pipe.\n  \n\n\n\n\n\n  \nflat\n\n  \n\n    \n--flat\n\n  \n\n  \n\n    Flag to indicate if a dir is created.\n  \n\n\n\n\n\n  \nmodule\n\n  \n\n    \n--module\n (aliases: \n-m\n)\n  \n\n  \n\n    Allows specification of the declaring module.\n  \n\n\n\n\n\n  \nskip-import\n\n  \n\n    \n--skip-import\n\n  \n\n  \n\n    Allows for skipping the module import.\n  \n\n\n\n\n\n  \nspec\n\n  \n\n    \n--spec\n\n  \n\n  \n\n    Specifies if a spec file is generated.", 
            "title": "ng generate pipe"
        }, 
        {
            "location": "/generate/pipe/#ng-generate-pipe", 
            "text": "", 
            "title": "ng generate pipe"
        }, 
        {
            "location": "/generate/pipe/#overview", 
            "text": "ng generate pipe [name]  generates a pipe", 
            "title": "Overview"
        }, 
        {
            "location": "/generate/pipe/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   export \n   \n     --export \n   \n   \n    Specifies if declaring module exports the pipe.\n     \n   flat \n   \n     --flat \n   \n   \n    Flag to indicate if a dir is created.\n     \n   module \n   \n     --module  (aliases:  -m )\n   \n   \n    Allows specification of the declaring module.\n     \n   skip-import \n   \n     --skip-import \n   \n   \n    Allows for skipping the module import.\n     \n   spec \n   \n     --spec \n   \n   \n    Specifies if a spec file is generated.", 
            "title": "Options"
        }, 
        {
            "location": "/generate/service/", 
            "text": "ng generate service\n\n\nOverview\n\n\nng generate service [name]\n generates a service\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \nflat\n\n  \n\n    \n--flat\n\n  \n\n  \n\n    Flag to indicate if a dir is created.\n  \n\n\n\n\n\n  \nmodule\n\n  \n\n    \n--module\n (aliases: \n-m\n)\n  \n\n  \n\n    Specifies where the service should be provided.\n  \n\n\n\n\n\n  \nspec\n\n  \n\n    \n--spec\n\n  \n\n  \n\n    Specifies if a spec file is generated.", 
            "title": "ng generate service"
        }, 
        {
            "location": "/generate/service/#ng-generate-service", 
            "text": "", 
            "title": "ng generate service"
        }, 
        {
            "location": "/generate/service/#overview", 
            "text": "ng generate service [name]  generates a service", 
            "title": "Overview"
        }, 
        {
            "location": "/generate/service/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   flat \n   \n     --flat \n   \n   \n    Flag to indicate if a dir is created.\n     \n   module \n   \n     --module  (aliases:  -m )\n   \n   \n    Specifies where the service should be provided.\n     \n   spec \n   \n     --spec \n   \n   \n    Specifies if a spec file is generated.", 
            "title": "Options"
        }, 
        {
            "location": "/include/angular-flex/", 
            "text": "Include \nFlex Layout\n in your CLI application\n\n\n\n  \n\n\n\n\n\n\nAbove is snapshot of a \nOnline Demos\n using @angular/flex-layout\n\n\n\n\n\n\nInclude \n@angular/flex-layout\n as detailed below:\n\n\nInstall the  library and add the dependency to package.json...\n\nnpm install --save @angular/flex-layout\n\n\n\n\u6216\u8005\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u6bcf\u665a\u6784\u5efa\uff1a\n\n\nnpm i --save @angular/flex-layout-builds\n\n\n\n\nImport the Angular Flex-Layout NgModule into your app module...\n\n//in src/app/app.module.ts\n\n\n\nimport\n \n{\n \nFlexLayoutModule\n \n}\n \nfrom\n \n@angular/flex-layout\n;\n\n\n// other imports\n\n\n\n@\nNgModule\n({\n\n  \nimports\n:\n \n[\n\n    \n...\n\n    \nFlexLayoutModule\n\n  \n],\n\n  \n...\n\n\n})\n\n\n\n\nRun \nng serve\n to run your application in develop mode, and navigate to \nhttp://localhost:4200\n\n\n\n\nSample App\n\n\nAdd the following to \nsrc/app/app.component.css\n...\n\n[\nfxLayout\n=\ncolumn\n]\n \n{\n \nborder\n:\n \n1\npx\n \nsolid\n;\npadding\n:\n4\npx\n;\n \nmargin-top\n:\n50\npx\n;\n \n}\n,\n\n\n[\nfxFlex\n]\n{\n  \npadding\n:\n5\npx\n;}\n,\n\n\nh3\n      \n{\n  \npadding-top\n:\n20\npx\n;\n \n}\n,\n\n\n.\nheader\n \n{\n  \nbackground-color\n:\n \nlightyellow\n;\n  \n}\n,\n\n\n.\nleft\n   \n{\n  \nbackground-color\n:\n \nlightblue\n;\n  \n}\n,\n\n\n.\nright\n  \n{\n  \nbackground-color\n:\n \npink\n;\n  \n}\n\n\n\n\nTo verify flex-layout has been set up correctly, change \nsrc/app/app.component.html\n to the following...\n\nhtml\n \ndiv fxLayout=\"column\"\n\n   \ndiv class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\"\n\n       \nh3\n\n         {{title}}\n       \n/h3\n\n   \n/div\n\n   \ndiv fxLayout=\"row\"\n\n       \ndiv class=\"left\" fxFlex=\"20\"\n LEFT: 20% wide \n/div\n\n       \ndiv class=\"right\" fxFlex\n RIGHT: 80% wide \n/div\n\n   \n/div\n\n \n/div\n\n\nAfter saving this file, return to the browser to see the very ugly but demonstrative flex-layout.\n\n\n\n\nAmong what you should see are - a light yellow header that is the entire width of the window, sitting directly atop 2 columns. Of those 2 columns, the left column should be light blue, and 20% wide, while the right column is pink, 80% to start, and will flex with window (re)size.\n\n\n\n\nMore Info\n\n\n\n\nInstallation\n\n\nAPI Overview\n\n\nDemo", 
            "title": "\u5f15\u5165\u89d2\u66f2"
        }, 
        {
            "location": "/include/angular-flex/#include-flex-layout-in-your-cli-application", 
            "text": "Above is snapshot of a  Online Demos  using @angular/flex-layout", 
            "title": "Include Flex Layout in your CLI application"
        }, 
        {
            "location": "/include/angular-flex/#include-angularflex-layout-as-detailed-below", 
            "text": "Install the  library and add the dependency to package.json... npm install --save @angular/flex-layout  \u6216\u8005\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u5b89\u88c5\u6bcf\u665a\u6784\u5efa\uff1a  npm i --save @angular/flex-layout-builds  Import the Angular Flex-Layout NgModule into your app module... //in src/app/app.module.ts  import   {   FlexLayoutModule   }   from   @angular/flex-layout ;  // other imports  @ NgModule ({ \n   imports :   [ \n     ... \n     FlexLayoutModule \n   ], \n   ...  })   Run  ng serve  to run your application in develop mode, and navigate to  http://localhost:4200", 
            "title": "Include @angular/flex-layout as detailed below:"
        }, 
        {
            "location": "/include/angular-flex/#sample-app", 
            "text": "Add the following to  src/app/app.component.css ... [ fxLayout = column ]   {   border :   1 px   solid ; padding : 4 px ;   margin-top : 50 px ;   } ,  [ fxFlex ] {    padding : 5 px ;} ,  h3        {    padding-top : 20 px ;   } ,  . header   {    background-color :   lightyellow ;    } ,  . left     {    background-color :   lightblue ;    } ,  . right    {    background-color :   pink ;    }   To verify flex-layout has been set up correctly, change  src/app/app.component.html  to the following... html\n  div fxLayout=\"column\" \n    div class=\"header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" \n        h3 \n         {{title}}\n        /h3 \n    /div \n    div fxLayout=\"row\" \n        div class=\"left\" fxFlex=\"20\"  LEFT: 20% wide  /div \n        div class=\"right\" fxFlex  RIGHT: 80% wide  /div \n    /div \n  /div  After saving this file, return to the browser to see the very ugly but demonstrative flex-layout.   Among what you should see are - a light yellow header that is the entire width of the window, sitting directly atop 2 columns. Of those 2 columns, the left column should be light blue, and 20% wide, while the right column is pink, 80% to start, and will flex with window (re)size.", 
            "title": "Sample App"
        }, 
        {
            "location": "/include/angular-flex/#more-info", 
            "text": "Installation  API Overview  Demo", 
            "title": "More Info"
        }, 
        {
            "location": "/include/angular-material/", 
            "text": "\u5f15\u5165\n\u89d2\u6599\n\n\n\u89d2\u6599\n\u662f\u4e00\u7ec4\u9002\u7528\u4e8eAngular\u5e94\u7528\u7a0b\u5e8f\u7684\u7269\u6599\u8bbe\u8ba1\u7ec4\u4ef6\u3002 \u8981\u5f00\u59cb\u4f7f\u7528\uff0c\u8bf7\u8bbf\u95ee\u89d2\u6599\u9879\u76ee\u7684\u94fe\u63a5:\n\n\n\n\n\u5165\u95e8\n\n\n\u4e3b\u9898\u5316\u89d2\u6599\n\n\n\u4e3b\u9898\u5316\u60a8\u81ea\u5df1\u7684\u7ec4\u4ef6", 
            "title": "\u5f15\u5165\u89d2\u6599"
        }, 
        {
            "location": "/include/angular-material/#_1", 
            "text": "\u89d2\u6599 \u662f\u4e00\u7ec4\u9002\u7528\u4e8eAngular\u5e94\u7528\u7a0b\u5e8f\u7684\u7269\u6599\u8bbe\u8ba1\u7ec4\u4ef6\u3002 \u8981\u5f00\u59cb\u4f7f\u7528\uff0c\u8bf7\u8bbf\u95ee\u89d2\u6599\u9879\u76ee\u7684\u94fe\u63a5:   \u5165\u95e8  \u4e3b\u9898\u5316\u89d2\u6599  \u4e3b\u9898\u5316\u60a8\u81ea\u5df1\u7684\u7ec4\u4ef6", 
            "title": "\u5f15\u5165\u89d2\u6599"
        }, 
        {
            "location": "/include/angularfire/", 
            "text": "Include AngularFire\n\n\nFirebase\n is a mobile and web application platform with tools and infrastructure designed\nto help developers build high-quality apps. \nAngularFire2\n is the official\nAngular library to use Firebase in your apps.\n\n\nCreate new project\n\n\nCreate a new project and navigate into the project.\n\n\n$ ng new my-app\n$ \ncd\n my-app\n\n\n\n\nInstall dependencies\n\n\nIn the new project you need to install the required dependencies.\n\n\n$ npm install --save angularfire2 firebase\n\n\n\n\nGet Firebase configuration details\n\n\nIn order to connect AngularFire to Firebase you need to get the configuration details.\n\n\nFirebase offers an easy way to get this, by showing a JavaScript object that you can copy and paste.\n\n\n\n\nLog in to the \nFirebase\n console.\n\n\nCreate New Project or open an existing one.\n\n\nClick \nAdd Firebase to your web app\n.\n\n\nFrom the modal window that pops up you copy the \nconfig\n object.\n\n\n\n\n  \nvar\n \nconfig\n \n=\n \n{\n\n    \napiKey\n:\n \nyour-api-key\n,\n\n    \nauthDomain\n:\n \nyour-auth-domain\n,\n\n    \ndatabaseURL\n:\n \nyour-database-url\n,\n\n    \nstorageBucket\n:\n \nyour-storage-bucket\n,\n\n    \nmessagingSenderId\n:\n \nyour-message-sender-id\n\n  \n};\n\n\n\n\n\nConfigure the Environment\n\n\nThese configuration details need to be stored in our app, one way to do this using the \nenvironment\n. This allows you to\nuse different credentials in development and production.\n\n\nOpen \nsrc/environments/environment.ts\n and add a key \nfirebase\n to the exported constant:\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n  \nproduction\n: \nfalse\n,\n\n  \nfirebase\n:\n \n{\n\n    \napiKey\n:\n \nyour-api-key\n,\n\n    \nauthDomain\n:\n \nyour-auth-domain\n,\n\n    \ndatabaseURL\n:\n \nyour-database-url\n,\n\n    \nstorageBucket\n:\n \nyour-storage-bucket\n,\n\n  \n}\n\n\n};\n\n\n\n\n\nTo define the keys for production you need to update \nsrc/environments/environment.prod.ts\n.\n\n\nImport and load FirebaseModule\n\n\nThe final step is to import \nAngularFireModule\n and initialize it using the parameters from the \nenvironment\n.\n\n\nOpen \nsrc/app/app.module.ts\n and add the following lines on the top of the file, with the other imports:\n\n\nimport\n \n{\n \nAngularFireModule\n \n}\n \nfrom\n \nangularfire2\n;\n\n\nimport\n \n{\n \nenvironment\n \n}\n \nfrom\n \n../environments/environment\n;\n\n\n\n\n\nTo initialize AngularFire add the following line to the \nimports\n array inside the \nNgModule\n:\n\n\n@NgModule\n({\n\n  \n// declarations\n\n  \nimports\n:\n \n[\n\n    \n// BrowserModule, etc\n\n    \nAngularFireModule\n.\ninitializeApp\n(\nenvironment\n.\nfirebase\n),\n\n  \n]\n\n  \n// providers\n\n  \n// bootstrap\n\n\n})\n\n\n\n\n\nCongratulations, you can now use Firebase in your Angular app!", 
            "title": "\u5f15\u5165\u89d2\u706b"
        }, 
        {
            "location": "/include/angularfire/#include-angularfire", 
            "text": "Firebase  is a mobile and web application platform with tools and infrastructure designed\nto help developers build high-quality apps.  AngularFire2  is the official\nAngular library to use Firebase in your apps.", 
            "title": "Include AngularFire"
        }, 
        {
            "location": "/include/angularfire/#create-new-project", 
            "text": "Create a new project and navigate into the project.  $ ng new my-app\n$  cd  my-app", 
            "title": "Create new project"
        }, 
        {
            "location": "/include/angularfire/#install-dependencies", 
            "text": "In the new project you need to install the required dependencies.  $ npm install --save angularfire2 firebase", 
            "title": "Install dependencies"
        }, 
        {
            "location": "/include/angularfire/#get-firebase-configuration-details", 
            "text": "In order to connect AngularFire to Firebase you need to get the configuration details.  Firebase offers an easy way to get this, by showing a JavaScript object that you can copy and paste.   Log in to the  Firebase  console.  Create New Project or open an existing one.  Click  Add Firebase to your web app .  From the modal window that pops up you copy the  config  object.      var   config   =   { \n     apiKey :   your-api-key , \n     authDomain :   your-auth-domain , \n     databaseURL :   your-database-url , \n     storageBucket :   your-storage-bucket , \n     messagingSenderId :   your-message-sender-id \n   };", 
            "title": "Get Firebase configuration details"
        }, 
        {
            "location": "/include/angularfire/#configure-the-environment", 
            "text": "These configuration details need to be stored in our app, one way to do this using the  environment . This allows you to\nuse different credentials in development and production.  Open  src/environments/environment.ts  and add a key  firebase  to the exported constant:  export   const   environment   =   { \n   production :  false , \n   firebase :   { \n     apiKey :   your-api-key , \n     authDomain :   your-auth-domain , \n     databaseURL :   your-database-url , \n     storageBucket :   your-storage-bucket , \n   }  };   To define the keys for production you need to update  src/environments/environment.prod.ts .", 
            "title": "Configure the Environment"
        }, 
        {
            "location": "/include/angularfire/#import-and-load-firebasemodule", 
            "text": "The final step is to import  AngularFireModule  and initialize it using the parameters from the  environment .  Open  src/app/app.module.ts  and add the following lines on the top of the file, with the other imports:  import   {   AngularFireModule   }   from   angularfire2 ;  import   {   environment   }   from   ../environments/environment ;   To initialize AngularFire add the following line to the  imports  array inside the  NgModule :  @NgModule ({ \n   // declarations \n   imports :   [ \n     // BrowserModule, etc \n     AngularFireModule . initializeApp ( environment . firebase ), \n   ] \n   // providers \n   // bootstrap  })", 
            "title": "Import and load FirebaseModule"
        }, 
        {
            "location": "/include/angularfire/#congratulations-you-can-now-use-firebase-in-your-angular-app", 
            "text": "", 
            "title": "Congratulations, you can now use Firebase in your Angular app!"
        }, 
        {
            "location": "/include/bootstrap/", 
            "text": "Include \nBootstrap\n\n\nBootstrap\n is a popular CSS framework which can be used within an Angular project.\nThis guide will walk you through adding bootstrap to your Angular CLI project and configuring it to use bootstrap.\n\n\nUsing CSS\n\n\nGetting Started\n\n\nCreate a new project and navigate into the project\n\n\nng new my-app\ncd my-app\n\n\n\n\nInstalling Bootstrap\n\n\nWith the new project created and ready you will next need to install bootstrap to your project as a dependency.\nUsing the \n--save\n option the dependency will be saved in package.json\n\n\n# version 3.x\n\nnpm install bootstrap --save\n\n\n# version 4.x\n\nnpm install bootstrap@next --save\n\n\n\n\nConfiguring Project\n\n\nNow that the project is set up it must be configured to include the bootstrap CSS.\n\n\n\n\nOpen the file \n.angular-cli.json\n from the root of your project.\n\n\nUnder the property \napps\n the first item in that array is the default application.\n\n\nThere is a property \nstyles\n which allows external global styles to be applied to your application.\n\n\nSpecify the path to \nbootstrap.min.css\n\n\n\n\nIt should look like the following when you are done:\n  \nstyles\n:\n \n[\n\n  \n../node_modules/bootstrap/dist/css/bootstrap.min.css\n,\n\n  \nstyles.css\n\n\n]\n,\n\n\n\n\nNote:\n When you make changes to \n.angular-cli.json\n you will need to re-start \nng serve\n to pick up configuration changes.\n\n\nTesting Project\n\n\nOpen \napp.component.html\n and add the following markup:\n\n\nbutton\n \nclass\n=\nbtn btn-primary\nTest Button\n/\nbutton\n\n\n\n\n\nWith the application configured, run \nng serve\n to run your application in develop mode.\nIn your browser navigate to the application \nlocalhost:4200\n.\nVerify the bootstrap styled button appears.\n\n\nUsing SASS\n\n\nGetting Started\n\n\nCreate a new project and navigate into the project\n\n\nng new my-app --style=scss\ncd my-app\n\n\n\n\nInstalling Bootstrap\n\n\n# version 3.x\n\nnpm install bootstrap-sass --save\n\n\n# version 4.x\n\nnpm install bootstrap@next --save\n\n\n\n\nConfiguring Project\n\n\nCreate an empty file \n_variables.scss\n in \nsrc/\n.\n\n\nIf you are using \nbootstrap-sass\n, add the following to \n_variables.scss\n:\n\n\n$icon-font-path\n:\n \n../node_modules/bootstrap-sass/assets/fonts/bootstrap/\n;\n\n\n\n\n\nIn \nstyles.scss\n add the following:\n\n\n// version 3\n\n\n@import\n \nvariables\n;\n\n\n@import\n \n../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap\n;\n\n\n\n// version 4\n\n\n@import\n \nvariables\n;\n\n\n@import\n \n../node_modules/bootstrap/scss/bootstrap\n;\n\n\n\n\n\nTesting Project\n\n\nOpen \napp.component.html\n and add the following markup:\n\n\nbutton\n \nclass\n=\nbtn btn-primary\nTest Button\n/\nbutton\n\n\n\n\n\nWith the application configured, run \nng serve\n to run your application in develop mode.\nIn your browser navigate to the application \nlocalhost:4200\n.\nVerify the bootstrap styled button appears.\nTo ensure your variables are used open \n_variables.scss\n and add the following:\n\n\n// version 3\n\n\n$brand-primary\n:\n \nred\n;\n\n\n\n// version 4\n\n\n$primary\n:\n \nred\n;\n\n\n\n\n\nReturn the browser to see the font color changed.", 
            "title": "\u5f15\u5165bootstrap"
        }, 
        {
            "location": "/include/bootstrap/#include-bootstrap", 
            "text": "Bootstrap  is a popular CSS framework which can be used within an Angular project.\nThis guide will walk you through adding bootstrap to your Angular CLI project and configuring it to use bootstrap.", 
            "title": "Include Bootstrap"
        }, 
        {
            "location": "/include/bootstrap/#using-css", 
            "text": "", 
            "title": "Using CSS"
        }, 
        {
            "location": "/include/bootstrap/#getting-started", 
            "text": "Create a new project and navigate into the project  ng new my-app\ncd my-app", 
            "title": "Getting Started"
        }, 
        {
            "location": "/include/bootstrap/#installing-bootstrap", 
            "text": "With the new project created and ready you will next need to install bootstrap to your project as a dependency.\nUsing the  --save  option the dependency will be saved in package.json  # version 3.x \nnpm install bootstrap --save # version 4.x \nnpm install bootstrap@next --save", 
            "title": "Installing Bootstrap"
        }, 
        {
            "location": "/include/bootstrap/#configuring-project", 
            "text": "Now that the project is set up it must be configured to include the bootstrap CSS.   Open the file  .angular-cli.json  from the root of your project.  Under the property  apps  the first item in that array is the default application.  There is a property  styles  which allows external global styles to be applied to your application.  Specify the path to  bootstrap.min.css   It should look like the following when you are done:\n   styles :   [ \n   ../node_modules/bootstrap/dist/css/bootstrap.min.css , \n   styles.css  ] ,   Note:  When you make changes to  .angular-cli.json  you will need to re-start  ng serve  to pick up configuration changes.", 
            "title": "Configuring Project"
        }, 
        {
            "location": "/include/bootstrap/#testing-project", 
            "text": "Open  app.component.html  and add the following markup:  button   class = btn btn-primary Test Button / button   With the application configured, run  ng serve  to run your application in develop mode.\nIn your browser navigate to the application  localhost:4200 .\nVerify the bootstrap styled button appears.", 
            "title": "Testing Project"
        }, 
        {
            "location": "/include/bootstrap/#using-sass", 
            "text": "", 
            "title": "Using SASS"
        }, 
        {
            "location": "/include/bootstrap/#getting-started_1", 
            "text": "Create a new project and navigate into the project  ng new my-app --style=scss\ncd my-app", 
            "title": "Getting Started"
        }, 
        {
            "location": "/include/bootstrap/#installing-bootstrap_1", 
            "text": "# version 3.x \nnpm install bootstrap-sass --save # version 4.x \nnpm install bootstrap@next --save", 
            "title": "Installing Bootstrap"
        }, 
        {
            "location": "/include/bootstrap/#configuring-project_1", 
            "text": "Create an empty file  _variables.scss  in  src/ .  If you are using  bootstrap-sass , add the following to  _variables.scss :  $icon-font-path :   ../node_modules/bootstrap-sass/assets/fonts/bootstrap/ ;   In  styles.scss  add the following:  // version 3  @import   variables ;  @import   ../node_modules/bootstrap-sass/assets/stylesheets/_bootstrap ;  // version 4  @import   variables ;  @import   ../node_modules/bootstrap/scss/bootstrap ;", 
            "title": "Configuring Project"
        }, 
        {
            "location": "/include/bootstrap/#testing-project_1", 
            "text": "Open  app.component.html  and add the following markup:  button   class = btn btn-primary Test Button / button   With the application configured, run  ng serve  to run your application in develop mode.\nIn your browser navigate to the application  localhost:4200 .\nVerify the bootstrap styled button appears.\nTo ensure your variables are used open  _variables.scss  and add the following:  // version 3  $brand-primary :   red ;  // version 4  $primary :   red ;   Return the browser to see the font color changed.", 
            "title": "Testing Project"
        }, 
        {
            "location": "/include/font-awesome/", 
            "text": "Include \nFont Awesome\n\n\nFont Awesome\n gives you scalable vector icons that can instantly be customized \u2014 size, color, drop shadow, and anything that can be done with the power of CSS.\n\n\nCreate a new project and navigate into the project...\n\nng new my-app\ncd my-app\n\n\n\nInstall the \nfont-awesome\n library and add the dependency to package.json...\n\nnpm install --save font-awesome\n\n\n\nUsing CSS\n\n\nTo add Font Awesome CSS icons to your app...\n\n//\n \nin\n \n.angular-cli.json\n\n\n\nstyles\n:\n \n[\n\n  \nstyles.css\n,\n\n  \n../node_modules/font-awesome/css/font-awesome.css\n\n\n]\n\n\n\n\nUsing SASS\n\n\nCreate an empty file _variables.scss in src/.\n\n\nAdd the following to _variables.scss:\n\n\n$fa-font-path : \n../node_modules/font-awesome/fonts\n;\n\n\nIn styles.scss add the following:\n\n\n@import\n \nvariables\n;\n\n\n@import\n \n../node_modules/font-awesome/scss/font-awesome\n;\n\n\n\n\n\nTest\n\n\nRun \nng serve\n to run your application in develop mode, and navigate to \nhttp://localhost:4200\n.\n\n\nTo verify Font Awesome has been set up correctly, change \nsrc/app/app.component.html\n to the following...\n\nh1\n\n  {{title}} \ni\n \nclass\n=\nfa fa-check\n/\ni\n\n\n/\nh1\n\n\n\n\nAfter saving this file, return to the browser to see the Font Awesome icon next to the app title.\n\n\nMore Info\n\n\n\n\nExamples", 
            "title": "\u5f15\u5165font awesome"
        }, 
        {
            "location": "/include/font-awesome/#include-font-awesome", 
            "text": "Font Awesome  gives you scalable vector icons that can instantly be customized \u2014 size, color, drop shadow, and anything that can be done with the power of CSS.  Create a new project and navigate into the project... ng new my-app\ncd my-app  Install the  font-awesome  library and add the dependency to package.json... npm install --save font-awesome", 
            "title": "Include Font Awesome"
        }, 
        {
            "location": "/include/font-awesome/#using-css", 
            "text": "To add Font Awesome CSS icons to your app... //   in   .angular-cli.json  styles :   [ \n   styles.css , \n   ../node_modules/font-awesome/css/font-awesome.css  ]", 
            "title": "Using CSS"
        }, 
        {
            "location": "/include/font-awesome/#using-sass", 
            "text": "Create an empty file _variables.scss in src/.  Add the following to _variables.scss:  $fa-font-path :  ../node_modules/font-awesome/fonts ; \nIn styles.scss add the following:  @import   variables ;  @import   ../node_modules/font-awesome/scss/font-awesome ;", 
            "title": "Using SASS"
        }, 
        {
            "location": "/include/font-awesome/#test", 
            "text": "Run  ng serve  to run your application in develop mode, and navigate to  http://localhost:4200 .  To verify Font Awesome has been set up correctly, change  src/app/app.component.html  to the following... h1 \n  {{title}}  i   class = fa fa-check / i  / h1   After saving this file, return to the browser to see the Font Awesome icon next to the app title.", 
            "title": "Test"
        }, 
        {
            "location": "/include/font-awesome/#more-info", 
            "text": "Examples", 
            "title": "More Info"
        }, 
        {
            "location": "/stories/configure-hmr/", 
            "text": "\u914d\u7f6e\u70ed\u6a21\u5757\u52a0\u8f7d\n\n\n\u70ed\u6a21\u5757\u66ff\u6362\uff08HMR\uff09\u662f\u4e00\u79cdWebPack\u529f\u80fd\uff0c\u53ef\u5728\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u66f4\u65b0\u4ee3\u7801\u800c\u65e0\u9700\u91cd\u65b0\u6784\u5efa\u4ee3\u7801\u3002\n\u8fd9\u5bfc\u81f4\u66f4\u5feb\u7684\u66f4\u65b0\u548c\u66f4\u5c11\u7684\u5b8c\u6574\u9875\u9762\u91cd\u65b0\u52a0\u8f7d\u3002\n\n\n\u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u6b64\n\u9875\u9762\n\u9605\u8bfb\u6709\u5173HMR\u7684\u66f4\u591a\u4fe1\u606f.\n\n\n\u4e3a\u4e86\u8ba9HMR\u4e0eAngular CLI\u534f\u540c\u5de5\u4f5c\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u73af\u5883\u5e76\u542f\u7528\u5b83\u3002\n\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u542f\u52a8\u8fc7\u7a0b\u4ee5\u542f\u7528\n@angularclass/hmr\n\u6a21\u5757\u3002\n\n\n\u4e3aHMR\u6dfb\u52a0\u73af\u5883\n\n\n\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\nsrc/environments/environment.hmr.ts\n\u7684\u6587\u4ef6\uff1a\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n \nproduction\n: \nfalse\n,\n\n \nhmr\n: \ntrue\n\n\n};\n\n\n\n\n\n\u66f4\u65b0\nsrc/environments/environment.prod.ts\n\u5e76\u5c06\nhmr:false\n\u6807\u5fd7\u6dfb\u52a0\u5230\u73af\u5883\u4e2d\uff1a\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n \nproduction\n: \ntrue\n,\n\n \nhmr\n: \nfalse\n\n\n};\n\n\n\n\n\n\u66f4\u65b0\nsrc/environments/environment.ts\n\u5e76\u5c06\nhmr:false\n\u6807\u5fd7\u6dfb\u52a0\u5230\u73af\u5883\u4e2d:\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n \nproduction\n: \nfalse\n,\n\n \nhmr\n: \nfalse\n\n\n};\n\n\n\n\n\n\u901a\u8fc7\u5411\u73b0\u6709\u73af\u5883\u5bf9\u8c61\u6dfb\u52a0\u65b0\u73af\u5883\u6765\u66f4\u65b0\n.angular-cli.json\n:\n\n\nenvironmentSource\n:\n \nenvironments/environment.ts\n,\n\n\nenvironments\n:\n \n{\n\n  \ndev\n:\n \nenvironments/environment.ts\n,\n\n  \nhmr\n:\n \nenvironments/environment.hmr.ts\n,\n\n  \nprod\n:\n \nenvironments/environment.prod.ts\n\n\n}\n,\n\n\n\n\n\n\u4f7f\u7528\n--hmr -e=hmr\n\u6807\u5fd7\u8fd0\u884c\nng serve\n\u6765\u542f\u7528hmr\u5e76\u9009\u62e9\u65b0\u7684\u73af\u5883\uff1a\n\n\nng serve --hmr -e\n=\nhmr\n\n\n\n\n\u901a\u8fc7\u66f4\u65b0\npackage.json\n\u5e76\u5411\u811a\u672c\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u6761\u76ee\u6765\u4e3a\u6b64\u521b\u5efa\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f:\n\n\nscripts\n:\n \n{\n\n  \n...\n\n  \nhmr\n:\n \nng serve --hmr -e=hmr\n\n\n}\n\n\n\n\n\n\u4e3a\n@angularclass/hmr\n\u6dfb\u52a0\u4f9d\u8d56\u9879\u5e76\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f\n\n\n\u4e3a\u4e86\u8ba9HMR\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5\u4f9d\u8d56\u9879\u5e76\u914d\u7f6e\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u4f7f\u7528\u5b83\u3002\n\n\n\u5b89\u88c5\n@angularclass/hmr\n\u6a21\u5757\u4f5c\u4e3adev-dependency\n\n\n...\n$ npm install --save-dev @angularclass/hmr\n\n\n\n\n\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a\nsrc/hmr.ts\n\u7684\u6587\u4ef6\uff1a\n\n\nimport\n \n{\n \nNgModuleRef\n,\n \nApplicationRef\n \n}\n \nfrom\n \n@angular/core\n;\n\n\nimport\n \n{\n \ncreateNewHosts\n \n}\n \nfrom\n \n@angularclass/hmr\n;\n\n\n\nexport\n \nconst\n \nhmrBootstrap\n \n=\n \n(\nmodule\n: \nany\n,\n \nbootstrap\n:\n \n()\n \n=\n \nPromise\nNgModuleRef\nany\n)\n \n=\n \n{\n\n  \nlet\n \nngModule\n: \nNgModuleRef\nany\n;\n\n  \nmodule\n.hot.accept\n();\n\n  \nbootstrap\n().\nthen\n(\nmod\n \n=\n \nngModule\n \n=\n \nmod\n);\n\n  \nmodule\n.hot.dispose\n(()\n \n=\n \n{\n\n    \nconst\n \nappRef\n: \nApplicationRef\n \n=\n \nngModule\n.\ninjector\n.\nget\n(\nApplicationRef\n);\n\n    \nconst\n \nelements\n \n=\n \nappRef\n.\ncomponents\n.\nmap\n(\nc\n \n=\n \nc\n.\nlocation\n.\nnativeElement\n);\n\n    \nconst\n \nmakeVisible\n \n=\n \ncreateNewHosts\n(\nelements\n);\n\n    \nngModule\n.\ndestroy\n();\n\n    \nmakeVisible\n();\n\n  \n});\n\n\n};\n\n\n\n\n\n\u66f4\u65b0\nsrc/main.ts\n\u6765\u4f7f\u7528\u6211\u4eec\u521a\u521b\u5efa\u7684\u6587\u4ef6\uff1a\n\n\nimport\n \n{\n \nenableProdMode\n \n}\n \nfrom\n \n@angular/core\n;\n\n\nimport\n \n{\n \nplatformBrowserDynamic\n \n}\n \nfrom\n \n@angular/platform-browser-dynamic\n;\n\n\n\nimport\n \n{\n \nAppModule\n \n}\n \nfrom\n \n./app/app.module\n;\n\n\nimport\n \n{\n \nenvironment\n \n}\n \nfrom\n \n./environments/environment\n;\n\n\n\nimport\n \n{\n \nhmrBootstrap\n \n}\n \nfrom\n \n./hmr\n;\n\n\n\nif\n \n(\nenvironment\n.\nproduction\n)\n \n{\n\n  \nenableProdMode\n();\n\n\n}\n\n\n\nconst\n \nbootstrap\n \n=\n \n()\n \n=\n \nplatformBrowserDynamic\n().\nbootstrapModule\n(\nAppModule\n);\n\n\n\nif\n \n(\nenvironment\n.\nhmr\n)\n \n{\n\n  \nif\n \n(\nmodule\n[\n \nhot\n \n])\n \n{\n\n    \nhmrBootstrap\n(\nmodule\n,\n \nbootstrap\n);\n\n  \n}\n \nelse\n \n{\n\n    \nconsole\n.\nerror\n(\nHMR is not enabled for webpack-dev-server!\n);\n\n    \nconsole\n.\nlog\n(\nAre you using the --hmr flag for ng serve?\n);\n\n  \n}\n\n\n}\n \nelse\n \n{\n\n  \nbootstrap\n();\n\n\n}\n\n\n\n\n\n\u542f\u7528HMR\u542f\u52a8\u5f00\u53d1\u73af\u5883\n\n\n\u73b0\u5728\u4e00\u5207\u90fd\u5df2\u8bbe\u597d\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u65b0\u7684\u914d\u7f6e:\n\n\n...\n$ npm run hmr\n\n\n\n\n\u5f53\u542f\u52a8\u670d\u52a1\u5668\u65f6\uff0cWebpack\u4f1a\u544a\u8bc9\u4f60\u5b83\u5df2\u7ecf\u542f\u7528:\n\n\n\u6ce8\u610f\u4e3a\u5f00\u53d1\u670d\u52a1\u5668\u542f\u7528\u70ed\u6a21\u5757\u66f4\u6362\uff08HMR\uff09\u3002\n\n\n\n\n\n\u73b0\u5728\uff0c\u5982\u679c\u60a8\u5bf9\u5176\u4e2d\u4e00\u4e2a\u7ec4\u4ef6\u8fdb\u884c\u4e86\u66f4\u6539\uff0c\u5219\u5e94\u8be5\u5728\u6ca1\u6709\u5b8c\u6574\u6d4f\u89c8\u5668\u5237\u65b0\u7684\u60c5\u51b5\u4e0b\u81ea\u52a8\u663e\u793a\u66f4\u6539\u3002", 
            "title": "\u914d\u7f6ehmr"
        }, 
        {
            "location": "/stories/configure-hmr/#_1", 
            "text": "\u70ed\u6a21\u5757\u66ff\u6362\uff08HMR\uff09\u662f\u4e00\u79cdWebPack\u529f\u80fd\uff0c\u53ef\u5728\u6b63\u5728\u8fd0\u884c\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u66f4\u65b0\u4ee3\u7801\u800c\u65e0\u9700\u91cd\u65b0\u6784\u5efa\u4ee3\u7801\u3002\n\u8fd9\u5bfc\u81f4\u66f4\u5feb\u7684\u66f4\u65b0\u548c\u66f4\u5c11\u7684\u5b8c\u6574\u9875\u9762\u91cd\u65b0\u52a0\u8f7d\u3002  \u60a8\u53ef\u4ee5\u901a\u8fc7\u8bbf\u95ee\u6b64 \u9875\u9762 \u9605\u8bfb\u6709\u5173HMR\u7684\u66f4\u591a\u4fe1\u606f.  \u4e3a\u4e86\u8ba9HMR\u4e0eAngular CLI\u534f\u540c\u5de5\u4f5c\uff0c\u6211\u4eec\u9996\u5148\u9700\u8981\u6dfb\u52a0\u4e00\u4e2a\u65b0\u73af\u5883\u5e76\u542f\u7528\u5b83\u3002  \u63a5\u4e0b\u6765\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b0\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u7684\u542f\u52a8\u8fc7\u7a0b\u4ee5\u542f\u7528 @angularclass/hmr \u6a21\u5757\u3002", 
            "title": "\u914d\u7f6e\u70ed\u6a21\u5757\u52a0\u8f7d"
        }, 
        {
            "location": "/stories/configure-hmr/#hmr", 
            "text": "\u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a src/environments/environment.hmr.ts \u7684\u6587\u4ef6\uff1a  export   const   environment   =   { \n  production :  false , \n  hmr :  true  };   \u66f4\u65b0 src/environments/environment.prod.ts \u5e76\u5c06 hmr:false \u6807\u5fd7\u6dfb\u52a0\u5230\u73af\u5883\u4e2d\uff1a  export   const   environment   =   { \n  production :  true , \n  hmr :  false  };   \u66f4\u65b0 src/environments/environment.ts \u5e76\u5c06 hmr:false \u6807\u5fd7\u6dfb\u52a0\u5230\u73af\u5883\u4e2d:  export   const   environment   =   { \n  production :  false , \n  hmr :  false  };   \u901a\u8fc7\u5411\u73b0\u6709\u73af\u5883\u5bf9\u8c61\u6dfb\u52a0\u65b0\u73af\u5883\u6765\u66f4\u65b0 .angular-cli.json :  environmentSource :   environments/environment.ts ,  environments :   { \n   dev :   environments/environment.ts , \n   hmr :   environments/environment.hmr.ts , \n   prod :   environments/environment.prod.ts  } ,   \u4f7f\u7528 --hmr -e=hmr \u6807\u5fd7\u8fd0\u884c ng serve \u6765\u542f\u7528hmr\u5e76\u9009\u62e9\u65b0\u7684\u73af\u5883\uff1a  ng serve --hmr -e = hmr  \u901a\u8fc7\u66f4\u65b0 package.json \u5e76\u5411\u811a\u672c\u5bf9\u8c61\u6dfb\u52a0\u4e00\u4e2a\u6761\u76ee\u6765\u4e3a\u6b64\u521b\u5efa\u4e00\u4e2a\u5feb\u6377\u65b9\u5f0f:  scripts :   { \n   ... \n   hmr :   ng serve --hmr -e=hmr  }", 
            "title": "\u4e3aHMR\u6dfb\u52a0\u73af\u5883"
        }, 
        {
            "location": "/stories/configure-hmr/#angularclasshmr", 
            "text": "\u4e3a\u4e86\u8ba9HMR\u5de5\u4f5c\uff0c\u6211\u4eec\u9700\u8981\u5b89\u88c5\u4f9d\u8d56\u9879\u5e76\u914d\u7f6e\u6211\u4eec\u7684\u5e94\u7528\u7a0b\u5e8f\u6765\u4f7f\u7528\u5b83\u3002  \u5b89\u88c5 @angularclass/hmr \u6a21\u5757\u4f5c\u4e3adev-dependency  ...\n$ npm install --save-dev @angularclass/hmr  \u4f7f\u7528\u4ee5\u4e0b\u5185\u5bb9\u521b\u5efa\u4e00\u4e2a\u540d\u4e3a src/hmr.ts \u7684\u6587\u4ef6\uff1a  import   {   NgModuleRef ,   ApplicationRef   }   from   @angular/core ;  import   {   createNewHosts   }   from   @angularclass/hmr ;  export   const   hmrBootstrap   =   ( module :  any ,   bootstrap :   ()   =   Promise NgModuleRef any )   =   { \n   let   ngModule :  NgModuleRef any ; \n   module .hot.accept (); \n   bootstrap (). then ( mod   =   ngModule   =   mod ); \n   module .hot.dispose (()   =   { \n     const   appRef :  ApplicationRef   =   ngModule . injector . get ( ApplicationRef ); \n     const   elements   =   appRef . components . map ( c   =   c . location . nativeElement ); \n     const   makeVisible   =   createNewHosts ( elements ); \n     ngModule . destroy (); \n     makeVisible (); \n   });  };   \u66f4\u65b0 src/main.ts \u6765\u4f7f\u7528\u6211\u4eec\u521a\u521b\u5efa\u7684\u6587\u4ef6\uff1a  import   {   enableProdMode   }   from   @angular/core ;  import   {   platformBrowserDynamic   }   from   @angular/platform-browser-dynamic ;  import   {   AppModule   }   from   ./app/app.module ;  import   {   environment   }   from   ./environments/environment ;  import   {   hmrBootstrap   }   from   ./hmr ;  if   ( environment . production )   { \n   enableProdMode ();  }  const   bootstrap   =   ()   =   platformBrowserDynamic (). bootstrapModule ( AppModule );  if   ( environment . hmr )   { \n   if   ( module [   hot   ])   { \n     hmrBootstrap ( module ,   bootstrap ); \n   }   else   { \n     console . error ( HMR is not enabled for webpack-dev-server! ); \n     console . log ( Are you using the --hmr flag for ng serve? ); \n   }  }   else   { \n   bootstrap ();  }", 
            "title": "\u4e3a@angularclass/hmr\u6dfb\u52a0\u4f9d\u8d56\u9879\u5e76\u914d\u7f6e\u5e94\u7528\u7a0b\u5e8f"
        }, 
        {
            "location": "/stories/configure-hmr/#hmr_1", 
            "text": "\u73b0\u5728\u4e00\u5207\u90fd\u5df2\u8bbe\u597d\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u65b0\u7684\u914d\u7f6e:  ...\n$ npm run hmr  \u5f53\u542f\u52a8\u670d\u52a1\u5668\u65f6\uff0cWebpack\u4f1a\u544a\u8bc9\u4f60\u5b83\u5df2\u7ecf\u542f\u7528:  \u6ce8\u610f\u4e3a\u5f00\u53d1\u670d\u52a1\u5668\u542f\u7528\u70ed\u6a21\u5757\u66f4\u6362\uff08HMR\uff09\u3002  \u73b0\u5728\uff0c\u5982\u679c\u60a8\u5bf9\u5176\u4e2d\u4e00\u4e2a\u7ec4\u4ef6\u8fdb\u884c\u4e86\u66f4\u6539\uff0c\u5219\u5e94\u8be5\u5728\u6ca1\u6709\u5b8c\u6574\u6d4f\u89c8\u5668\u5237\u65b0\u7684\u60c5\u51b5\u4e0b\u81ea\u52a8\u663e\u793a\u66f4\u6539\u3002", 
            "title": "\u542f\u7528HMR\u542f\u52a8\u5f00\u53d1\u73af\u5883"
        }, 
        {
            "location": "/stories/application-environments/", 
            "text": "\u5e94\u7528\u7a0b\u5e8f\u4e2d\n\n\n\u914d\u7f6e\u53ef\u7528\u7684\u73af\u5883\n\n\n.angular-cli.json\n\u5305\u542b\nenvironments\n\u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\uff1a\n\n\nenvironments\n:\n \n{\n\n    \ndev\n:\n \nenvironments/environment.ts\n,\n\n    \nprod\n:\n \nenvironments/environment.prod.ts\n\n\n}\n\n\n\n\n\n\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6dfb\u52a0\u5176\u4ed6\u73af\u5883\u3002  \u6dfb\u52a0\nstaging\n\u73af\u5883, \u4f60\u7684\u914d\u7f6e\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n\n\nenvironments\n:\n \n{\n\n    \ndev\n:\n \nenvironments/environment.ts\n,\n\n    \nstaging\n:\n \nenvironments/environment.staging.ts\n,\n\n    \nprod\n:\n \nenvironments/environment.prod.ts\n\n\n}\n\n\n\n\n\n\u6dfb\u52a0\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u6587\u4ef6\n\n\n\u73af\u5883\u7279\u5b9a\u7684\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a\n\n\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u2514\u2500\u2500 environment.ts\n\n\n\n\n\u5982\u679c\u4f60\u60f3\u4e3a\nstaging\n\u6dfb\u52a0\u53e6\u4e00\u4e2a\u73af\u5883\uff0c\u4f60\u7684\u6587\u4ef6\u7ed3\u6784\u5c06\u53d8\u6210\uff1a\n\n\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u251c\u2500\u2500 environment.staging.ts\n        \u2514\u2500\u2500 environment.ts\n\n\n\n\n\u4fee\u6539\u73af\u5883\u7279\u5b9a\u7684\u6587\u4ef6\n\n\nenvironment.ts\n\u5305\u542b\u9ed8\u8ba4\u8bbe\u7f6e\u3002  \u5982\u679c\u4f60\u770b\u4e00\u4e0b\u8fd9\u4e2a\u6587\u4ef6\uff0c\u5b83\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n  \nproduction\n: \nfalse\n\n\n};\n\n\n\n\n\n\u5982\u679c\u4f60\u5c06\u5b83\u4e0e\nenvironment.prod.ts\n\u8fdb\u884c\u6bd4\u8f83\uff0c \u8fd9\u770b\u8d77\u6765\u50cf\uff1a\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n  \nproduction\n: \ntrue\n\n\n};\n\n\n\n\n\n\u60a8\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u53d8\u91cf\uff0c\u6216\u8005\u4f5c\u4e3a\nenvironment\n\u5bf9\u8c61\u7684\u9644\u52a0\u5c5e\u6027\uff0c \u6216\u4f5c\u4e3a\u5355\u72ec\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n  \nproduction\n: \nfalse\n,\n\n  \napiUrl\n:\n \nhttp://my-api-url\n\n\n};\n\n\n\n\n\n\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u53d8\u91cf\n\n\n\u9274\u4e8e\u4ee5\u4e0b\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784\uff1a\n\n\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 app\n        \u251c\u2500\u2500 app.component.html\n        \u2514\u2500\u2500 app.component.ts\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u251c\u2500\u2500 environment.staging.ts\n        \u2514\u2500\u2500 environment.ts\n\n\n\n\n\u5728\napp.component.ts\n\u5185\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n\n\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n@angular/core\n;\n\n\nimport\n \n{\n \nenvironment\n \n}\n \nfrom\n \n./../environments/environment\n;\n\n\n\n@Component\n({\n\n  \nselector\n:\n \napp-root\n,\n\n  \ntemplateUrl\n:\n \n./app.component.html\n,\n\n  \nstyleUrls\n:\n \n[\n./app.component.css\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \nconstructor\n()\n \n{\n\n    \nconsole\n.\nlog\n(\nenvironment\n.\nproduction\n);\n \n// Logs false for default environment\n\n  \n}\n\n  \ntitle\n \n=\n \napp works!\n;\n\n\n}\n\n\n\n\n\n\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u6784\u5efa\n\n\n\u8fd0\u884c:\n\n\nng build\n\n\n\n\n\u5c06\u4f7f\u7528\nenvironment.ts\n\u4e2d\u7684\u9ed8\u8ba4\u503c\n\n\n\u8fd0\u884c:\n\n\nng build --env\n=\nstaging\n\n\n\n\n\u5c06\u4f7f\u7528\nenvironment.staging.ts\n\u4e2d\u7684\u503c", 
            "title": "\u5e94\u7528\u73af\u5883"
        }, 
        {
            "location": "/stories/application-environments/#_1", 
            "text": "", 
            "title": "\u5e94\u7528\u7a0b\u5e8f\u4e2d"
        }, 
        {
            "location": "/stories/application-environments/#_2", 
            "text": ".angular-cli.json \u5305\u542b environments \u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\uff1a  environments :   { \n     dev :   environments/environment.ts , \n     prod :   environments/environment.prod.ts  }   \u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6dfb\u52a0\u5176\u4ed6\u73af\u5883\u3002  \u6dfb\u52a0 staging \u73af\u5883, \u4f60\u7684\u914d\u7f6e\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a  environments :   { \n     dev :   environments/environment.ts , \n     staging :   environments/environment.staging.ts , \n     prod :   environments/environment.prod.ts  }", 
            "title": "\u914d\u7f6e\u53ef\u7528\u7684\u73af\u5883"
        }, 
        {
            "location": "/stories/application-environments/#_3", 
            "text": "\u73af\u5883\u7279\u5b9a\u7684\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a  \u2514\u2500\u2500 src\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u2514\u2500\u2500 environment.ts  \u5982\u679c\u4f60\u60f3\u4e3a staging \u6dfb\u52a0\u53e6\u4e00\u4e2a\u73af\u5883\uff0c\u4f60\u7684\u6587\u4ef6\u7ed3\u6784\u5c06\u53d8\u6210\uff1a  \u2514\u2500\u2500 src\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u251c\u2500\u2500 environment.staging.ts\n        \u2514\u2500\u2500 environment.ts", 
            "title": "\u6dfb\u52a0\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u6587\u4ef6"
        }, 
        {
            "location": "/stories/application-environments/#_4", 
            "text": "environment.ts \u5305\u542b\u9ed8\u8ba4\u8bbe\u7f6e\u3002  \u5982\u679c\u4f60\u770b\u4e00\u4e0b\u8fd9\u4e2a\u6587\u4ef6\uff0c\u5b83\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a  export   const   environment   =   { \n   production :  false  };   \u5982\u679c\u4f60\u5c06\u5b83\u4e0e environment.prod.ts \u8fdb\u884c\u6bd4\u8f83\uff0c \u8fd9\u770b\u8d77\u6765\u50cf\uff1a  export   const   environment   =   { \n   production :  true  };   \u60a8\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u53d8\u91cf\uff0c\u6216\u8005\u4f5c\u4e3a environment \u5bf9\u8c61\u7684\u9644\u52a0\u5c5e\u6027\uff0c \u6216\u4f5c\u4e3a\u5355\u72ec\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a  export   const   environment   =   { \n   production :  false , \n   apiUrl :   http://my-api-url  };", 
            "title": "\u4fee\u6539\u73af\u5883\u7279\u5b9a\u7684\u6587\u4ef6"
        }, 
        {
            "location": "/stories/application-environments/#_5", 
            "text": "\u9274\u4e8e\u4ee5\u4e0b\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784\uff1a  \u2514\u2500\u2500 src\n    \u2514\u2500\u2500 app\n        \u251c\u2500\u2500 app.component.html\n        \u2514\u2500\u2500 app.component.ts\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u251c\u2500\u2500 environment.staging.ts\n        \u2514\u2500\u2500 environment.ts  \u5728 app.component.ts \u5185\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a  import   {   Component   }   from   @angular/core ;  import   {   environment   }   from   ./../environments/environment ;  @Component ({ \n   selector :   app-root , \n   templateUrl :   ./app.component.html , \n   styleUrls :   [ ./app.component.css ]  })  export   class   AppComponent   { \n   constructor ()   { \n     console . log ( environment . production );   // Logs false for default environment \n   } \n   title   =   app works! ;  }", 
            "title": "\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u53d8\u91cf"
        }, 
        {
            "location": "/stories/application-environments/#_6", 
            "text": "\u8fd0\u884c:  ng build  \u5c06\u4f7f\u7528 environment.ts \u4e2d\u7684\u9ed8\u8ba4\u503c  \u8fd0\u884c:  ng build --env = staging  \u5c06\u4f7f\u7528 environment.staging.ts \u4e2d\u7684\u503c", 
            "title": "\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u6784\u5efa"
        }, 
        {
            "location": "/stories/application-environments/", 
            "text": "\u5e94\u7528\u7a0b\u5e8f\u4e2d\n\n\n\u914d\u7f6e\u53ef\u7528\u7684\u73af\u5883\n\n\n.angular-cli.json\n\u5305\u542b\nenvironments\n\u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\uff1a\n\n\nenvironments\n:\n \n{\n\n    \ndev\n:\n \nenvironments/environment.ts\n,\n\n    \nprod\n:\n \nenvironments/environment.prod.ts\n\n\n}\n\n\n\n\n\n\u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6dfb\u52a0\u5176\u4ed6\u73af\u5883\u3002  \u6dfb\u52a0\nstaging\n\u73af\u5883, \u4f60\u7684\u914d\u7f6e\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n\n\nenvironments\n:\n \n{\n\n    \ndev\n:\n \nenvironments/environment.ts\n,\n\n    \nstaging\n:\n \nenvironments/environment.staging.ts\n,\n\n    \nprod\n:\n \nenvironments/environment.prod.ts\n\n\n}\n\n\n\n\n\n\u6dfb\u52a0\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u6587\u4ef6\n\n\n\u73af\u5883\u7279\u5b9a\u7684\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a\n\n\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u2514\u2500\u2500 environment.ts\n\n\n\n\n\u5982\u679c\u4f60\u60f3\u4e3a\nstaging\n\u6dfb\u52a0\u53e6\u4e00\u4e2a\u73af\u5883\uff0c\u4f60\u7684\u6587\u4ef6\u7ed3\u6784\u5c06\u53d8\u6210\uff1a\n\n\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u251c\u2500\u2500 environment.staging.ts\n        \u2514\u2500\u2500 environment.ts\n\n\n\n\n\u4fee\u6539\u73af\u5883\u7279\u5b9a\u7684\u6587\u4ef6\n\n\nenvironment.ts\n\u5305\u542b\u9ed8\u8ba4\u8bbe\u7f6e\u3002  \u5982\u679c\u4f60\u770b\u4e00\u4e0b\u8fd9\u4e2a\u6587\u4ef6\uff0c\u5b83\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n  \nproduction\n: \nfalse\n\n\n};\n\n\n\n\n\n\u5982\u679c\u4f60\u5c06\u5b83\u4e0e\nenvironment.prod.ts\n\u8fdb\u884c\u6bd4\u8f83\uff0c \u8fd9\u770b\u8d77\u6765\u50cf\uff1a\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n  \nproduction\n: \ntrue\n\n\n};\n\n\n\n\n\n\u60a8\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u53d8\u91cf\uff0c\u6216\u8005\u4f5c\u4e3a\nenvironment\n\u5bf9\u8c61\u7684\u9644\u52a0\u5c5e\u6027\uff0c \u6216\u4f5c\u4e3a\u5355\u72ec\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a\n\n\nexport\n \nconst\n \nenvironment\n \n=\n \n{\n\n  \nproduction\n: \nfalse\n,\n\n  \napiUrl\n:\n \nhttp://my-api-url\n\n\n};\n\n\n\n\n\n\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u53d8\u91cf\n\n\n\u9274\u4e8e\u4ee5\u4e0b\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784\uff1a\n\n\n\u2514\u2500\u2500 src\n    \u2514\u2500\u2500 app\n        \u251c\u2500\u2500 app.component.html\n        \u2514\u2500\u2500 app.component.ts\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u251c\u2500\u2500 environment.staging.ts\n        \u2514\u2500\u2500 environment.ts\n\n\n\n\n\u5728\napp.component.ts\n\u5185\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a\n\n\nimport\n \n{\n \nComponent\n \n}\n \nfrom\n \n@angular/core\n;\n\n\nimport\n \n{\n \nenvironment\n \n}\n \nfrom\n \n./../environments/environment\n;\n\n\n\n@Component\n({\n\n  \nselector\n:\n \napp-root\n,\n\n  \ntemplateUrl\n:\n \n./app.component.html\n,\n\n  \nstyleUrls\n:\n \n[\n./app.component.css\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \nconstructor\n()\n \n{\n\n    \nconsole\n.\nlog\n(\nenvironment\n.\nproduction\n);\n \n// Logs false for default environment\n\n  \n}\n\n  \ntitle\n \n=\n \napp works!\n;\n\n\n}\n\n\n\n\n\n\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u6784\u5efa\n\n\n\u8fd0\u884c:\n\n\nng build\n\n\n\n\n\u5c06\u4f7f\u7528\nenvironment.ts\n\u4e2d\u7684\u9ed8\u8ba4\u503c\n\n\n\u8fd0\u884c:\n\n\nng build --env\n=\nstaging\n\n\n\n\n\u5c06\u4f7f\u7528\nenvironment.staging.ts\n\u4e2d\u7684\u503c", 
            "title": "\u8d44\u4ea7\u914d\u7f6e"
        }, 
        {
            "location": "/stories/application-environments/#_1", 
            "text": "", 
            "title": "\u5e94\u7528\u7a0b\u5e8f\u4e2d"
        }, 
        {
            "location": "/stories/application-environments/#_2", 
            "text": ".angular-cli.json \u5305\u542b environments \u90e8\u5206\u3002\u9ed8\u8ba4\u60c5\u51b5\u4e0b\uff0c\u8fd9\u770b\u8d77\u6765\u50cf\uff1a  environments :   { \n     dev :   environments/environment.ts , \n     prod :   environments/environment.prod.ts  }   \u60a8\u53ef\u4ee5\u6839\u636e\u9700\u8981\u6dfb\u52a0\u5176\u4ed6\u73af\u5883\u3002  \u6dfb\u52a0 staging \u73af\u5883, \u4f60\u7684\u914d\u7f6e\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a  environments :   { \n     dev :   environments/environment.ts , \n     staging :   environments/environment.staging.ts , \n     prod :   environments/environment.prod.ts  }", 
            "title": "\u914d\u7f6e\u53ef\u7528\u7684\u73af\u5883"
        }, 
        {
            "location": "/stories/application-environments/#_3", 
            "text": "\u73af\u5883\u7279\u5b9a\u7684\u6587\u4ef6\u5982\u4e0b\u6240\u793a\uff1a  \u2514\u2500\u2500 src\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u2514\u2500\u2500 environment.ts  \u5982\u679c\u4f60\u60f3\u4e3a staging \u6dfb\u52a0\u53e6\u4e00\u4e2a\u73af\u5883\uff0c\u4f60\u7684\u6587\u4ef6\u7ed3\u6784\u5c06\u53d8\u6210\uff1a  \u2514\u2500\u2500 src\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u251c\u2500\u2500 environment.staging.ts\n        \u2514\u2500\u2500 environment.ts", 
            "title": "\u6dfb\u52a0\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u6587\u4ef6"
        }, 
        {
            "location": "/stories/application-environments/#_4", 
            "text": "environment.ts \u5305\u542b\u9ed8\u8ba4\u8bbe\u7f6e\u3002  \u5982\u679c\u4f60\u770b\u4e00\u4e0b\u8fd9\u4e2a\u6587\u4ef6\uff0c\u5b83\u5e94\u8be5\u770b\u8d77\u6765\u50cf\u8fd9\u6837\uff1a  export   const   environment   =   { \n   production :  false  };   \u5982\u679c\u4f60\u5c06\u5b83\u4e0e environment.prod.ts \u8fdb\u884c\u6bd4\u8f83\uff0c \u8fd9\u770b\u8d77\u6765\u50cf\uff1a  export   const   environment   =   { \n   production :  true  };   \u60a8\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u53d8\u91cf\uff0c\u6216\u8005\u4f5c\u4e3a environment \u5bf9\u8c61\u7684\u9644\u52a0\u5c5e\u6027\uff0c \u6216\u4f5c\u4e3a\u5355\u72ec\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\uff1a  export   const   environment   =   { \n   production :  false , \n   apiUrl :   http://my-api-url  };", 
            "title": "\u4fee\u6539\u73af\u5883\u7279\u5b9a\u7684\u6587\u4ef6"
        }, 
        {
            "location": "/stories/application-environments/#_5", 
            "text": "\u9274\u4e8e\u4ee5\u4e0b\u5e94\u7528\u7a0b\u5e8f\u7ed3\u6784\uff1a  \u2514\u2500\u2500 src\n    \u2514\u2500\u2500 app\n        \u251c\u2500\u2500 app.component.html\n        \u2514\u2500\u2500 app.component.ts\n    \u2514\u2500\u2500 environments\n        \u251c\u2500\u2500 environment.prod.ts\n        \u251c\u2500\u2500 environment.staging.ts\n        \u2514\u2500\u2500 environment.ts  \u5728 app.component.ts \u5185\u4f7f\u7528\u73af\u5883\u53d8\u91cf\u53ef\u80fd\u5982\u4e0b\u6240\u793a\uff1a  import   {   Component   }   from   @angular/core ;  import   {   environment   }   from   ./../environments/environment ;  @Component ({ \n   selector :   app-root , \n   templateUrl :   ./app.component.html , \n   styleUrls :   [ ./app.component.css ]  })  export   class   AppComponent   { \n   constructor ()   { \n     console . log ( environment . production );   // Logs false for default environment \n   } \n   title   =   app works! ;  }", 
            "title": "\u5728\u5e94\u7528\u7a0b\u5e8f\u4e2d\u4f7f\u7528\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u53d8\u91cf"
        }, 
        {
            "location": "/stories/application-environments/#_6", 
            "text": "\u8fd0\u884c:  ng build  \u5c06\u4f7f\u7528 environment.ts \u4e2d\u7684\u9ed8\u8ba4\u503c  \u8fd0\u884c:  ng build --env = staging  \u5c06\u4f7f\u7528 environment.staging.ts \u4e2d\u7684\u503c", 
            "title": "\u7279\u5b9a\u4e8e\u73af\u5883\u7684\u6784\u5efa"
        }, 
        {
            "location": "/global/lib/", 
            "text": "Global Library Installation\n\n\nSome javascript libraries need to be added to the global scope, and loaded as if\nthey were in a script tag. We can do this using the \napps[0].scripts\n and\n\napps[0].styles\n properties of \n.angular-cli.json\n.\n\n\nAs an example, to use \nBootstrap 4\n this is\nwhat you need to do:\n\n\nFirst install Bootstrap from \nnpm\n:\n\n\nnpm install jquery --save\nnpm install popper.js --save\nnpm install bootstrap@next --save\n\n\n\n\nThen add the needed script files to \napps[0].scripts\n:\n\n\nscripts\n:\n \n[\n\n  \n../node_modules/jquery/dist/jquery.slim.js\n,\n\n  \n../node_modules/popper.js/dist/umd/popper.js\n,\n\n  \n../node_modules/bootstrap/dist/js/bootstrap.js\n\n\n]\n,\n\n\n\n\n\nFinally add the Bootstrap CSS to the \napps[0].styles\n array:\n\nstyles\n:\n \n[\n\n  \n../node_modules/bootstrap/dist/css/bootstrap.css\n,\n\n  \nstyles.css\n\n\n]\n,\n\n\n\n\nRestart \nng serve\n if you're running it, and Bootstrap 4 should be working on\nyour app.", 
            "title": "\u5168\u5c40\u5e93"
        }, 
        {
            "location": "/global/lib/#global-library-installation", 
            "text": "Some javascript libraries need to be added to the global scope, and loaded as if\nthey were in a script tag. We can do this using the  apps[0].scripts  and apps[0].styles  properties of  .angular-cli.json .  As an example, to use  Bootstrap 4  this is\nwhat you need to do:  First install Bootstrap from  npm :  npm install jquery --save\nnpm install popper.js --save\nnpm install bootstrap@next --save  Then add the needed script files to  apps[0].scripts :  scripts :   [ \n   ../node_modules/jquery/dist/jquery.slim.js , \n   ../node_modules/popper.js/dist/umd/popper.js , \n   ../node_modules/bootstrap/dist/js/bootstrap.js  ] ,   Finally add the Bootstrap CSS to the  apps[0].styles  array: styles :   [ \n   ../node_modules/bootstrap/dist/css/bootstrap.css , \n   styles.css  ] ,   Restart  ng serve  if you're running it, and Bootstrap 4 should be working on\nyour app.", 
            "title": "Global Library Installation"
        }, 
        {
            "location": "/global/scripts/", 
            "text": "Global scripts\n\n\nYou can add Javascript files to the global scope via the \napps[0].scripts\n\nproperty in \n.angular-cli.json\n.\nThese will be loaded exactly as if you had added them in a \nscript\n tag inside \nindex.html\n.\n\n\nThis is especially useful for legacy libraries or analytic snippets.\n\n\nscripts\n:\n \n[\n\n  \nglobal-script.js\n,\n\n\n]\n,\n\n\n\n\n\nYou can also rename the output and lazy load it by using the object format:\n\n\nscripts\n:\n \n[\n\n  \nglobal-script.js\n,\n\n  \n{\n \ninput\n:\n \nlazy-script.js\n,\n \nlazy\n:\n \ntrue\n \n},\n\n  \n{\n \ninput\n:\n \npre-rename-script.js\n,\n \noutput\n:\n \nrenamed-script\n \n},\n\n\n]\n,\n\n\n\n\n\nUsing global libraries inside your app\n\n\nOnce you import a library via the scripts array, you should \nnot\n import it via a import statement\nin your TypeScript code (e.g. \nimport * as $ from 'jquery';\n).\nIf you do that, you'll end up with two different copies of the library: one imported as a\nglobal library, and one imported as a module.\n\n\nThis is especially bad for libraries with plugins, like JQuery, because each copy will have\ndifferent plugins.\n\n\nInstead, download typings for your library (\nnpm install @types/jquery\n) and follow\nthe \n3rd Party Library Installation\n steps,\nthis will give you access to the global variables exposed by that library.\n\n\nIf the global library you need to use does not have global typings, you can also declare them\nmanually in \nsrc/typings.d.ts\n as \nany\n:\n\n\ndeclare\n \nvar\n \nlibraryName\n:\n \nany\n;\n\n\n\n\n\nWhen working with scripts that extend other libraries, for instance with JQuery plugins\n(e.g, \n$('.test').myPlugin();\n), since the installed \n@types/jquery\n may not include \nmyPlugin\n,\nyou would need to add an interface like the one below in \nsrc/typings.d.ts\n.\n\n\ninterface\n \nJQuery\n \n{\n\n  \nmyPlugin\n(\noptions?\n: \nany\n)\n:\n \nany\n;\n\n\n}\n\n\n\n\n\nOtherwise you may see \n[TS][Error] Property 'myPlugin' does not exist on type 'JQuery'.\n in your IDE.", 
            "title": "\u5168\u5c40\u811a\u672c"
        }, 
        {
            "location": "/global/scripts/#global-scripts", 
            "text": "You can add Javascript files to the global scope via the  apps[0].scripts \nproperty in  .angular-cli.json .\nThese will be loaded exactly as if you had added them in a  script  tag inside  index.html .  This is especially useful for legacy libraries or analytic snippets.  scripts :   [ \n   global-script.js ,  ] ,   You can also rename the output and lazy load it by using the object format:  scripts :   [ \n   global-script.js , \n   {   input :   lazy-script.js ,   lazy :   true   }, \n   {   input :   pre-rename-script.js ,   output :   renamed-script   },  ] ,", 
            "title": "Global scripts"
        }, 
        {
            "location": "/global/scripts/#using-global-libraries-inside-your-app", 
            "text": "Once you import a library via the scripts array, you should  not  import it via a import statement\nin your TypeScript code (e.g.  import * as $ from 'jquery'; ).\nIf you do that, you'll end up with two different copies of the library: one imported as a\nglobal library, and one imported as a module.  This is especially bad for libraries with plugins, like JQuery, because each copy will have\ndifferent plugins.  Instead, download typings for your library ( npm install @types/jquery ) and follow\nthe  3rd Party Library Installation  steps,\nthis will give you access to the global variables exposed by that library.  If the global library you need to use does not have global typings, you can also declare them\nmanually in  src/typings.d.ts  as  any :  declare   var   libraryName :   any ;   When working with scripts that extend other libraries, for instance with JQuery plugins\n(e.g,  $('.test').myPlugin(); ), since the installed  @types/jquery  may not include  myPlugin ,\nyou would need to add an interface like the one below in  src/typings.d.ts .  interface   JQuery   { \n   myPlugin ( options? :  any ) :   any ;  }   Otherwise you may see  [TS][Error] Property 'myPlugin' does not exist on type 'JQuery'.  in your IDE.", 
            "title": "Using global libraries inside your app"
        }, 
        {
            "location": "/global/styles/", 
            "text": "Global styles\n\n\nThe \nstyles.css\n file allows users to add global styles and supports\n\nCSS imports\n.\n\n\nIf the project is created with the \n--style=sass\n option, this will be a \n.sass\n\nfile instead, and the same applies to \nscss/less/styl\n.\n\n\nYou can add more global styles via the \napps[0].styles\n property in \n.angular-cli.json\n.\nThese will be loaded exactly as if you had added them in a \nlink\n tag inside \nindex.html\n.\n\n\nstyles\n:\n \n[\n\n  \nstyles.css\n,\n\n  \nmore-styles.css\n,\n\n\n]\n,\n\n\n\n\n\nYou can also rename the output and lazy load it by using the object format:\n\n\nstyles\n:\n \n[\n\n  \nstyles.css\n,\n\n  \nmore-styles.css\n,\n\n  \n{\n \ninput\n:\n \nlazy-style.scss\n,\n \nlazy\n:\n \ntrue\n \n},\n\n  \n{\n \ninput\n:\n \npre-rename-style.scss\n,\n \noutput\n:\n \nrenamed-style\n \n},\n\n\n]\n,\n\n\n\n\n\nIn Sass and Stylus you can also make use of the \nincludePaths\n functionality for both component and\nglobal styles, which allows you to add extra base paths that will be checked for imports.\n\n\nTo add paths, use the \nstylePreprocessorOptions\n entry in angular-cli.json \napp\n object:\n\n\nstylePreprocessorOptions\n: {\n  \nincludePaths\n: [\n    \nstyle-paths\n\n  ]\n},\n\n\n\n\nFiles in that folder, e.g. \nsrc/style-paths/_variables.scss\n, can be imported from anywhere in your\nproject without the need for a relative path:\n\n\n//\n \nsrc\n/\napp\n/\napp\n.\ncomponent\n.\nscss\n\n\n//\n \nA\n \nrelative\n \npath\n \nworks\n\n\n@import\n \n../style-paths/variables\n;\n\n\n//\n \nBut\n \nnow\n \nthis\n \nworks\n \nas\n \nwell\n\n\n@import\n \nvariables\n;", 
            "title": "\u5168\u5c40\u98ce\u683c"
        }, 
        {
            "location": "/global/styles/#global-styles", 
            "text": "The  styles.css  file allows users to add global styles and supports CSS imports .  If the project is created with the  --style=sass  option, this will be a  .sass \nfile instead, and the same applies to  scss/less/styl .  You can add more global styles via the  apps[0].styles  property in  .angular-cli.json .\nThese will be loaded exactly as if you had added them in a  link  tag inside  index.html .  styles :   [ \n   styles.css , \n   more-styles.css ,  ] ,   You can also rename the output and lazy load it by using the object format:  styles :   [ \n   styles.css , \n   more-styles.css , \n   {   input :   lazy-style.scss ,   lazy :   true   }, \n   {   input :   pre-rename-style.scss ,   output :   renamed-style   },  ] ,   In Sass and Stylus you can also make use of the  includePaths  functionality for both component and\nglobal styles, which allows you to add extra base paths that will be checked for imports.  To add paths, use the  stylePreprocessorOptions  entry in angular-cli.json  app  object:  stylePreprocessorOptions : {\n   includePaths : [\n     style-paths \n  ]\n},  Files in that folder, e.g.  src/style-paths/_variables.scss , can be imported from anywhere in your\nproject without the need for a relative path:  //   src / app / app . component . scss  //   A   relative   path   works  @import   ../style-paths/variables ;  //   But   now   this   works   as   well  @import   variables ;", 
            "title": "Global styles"
        }, 
        {
            "location": "/stories/css-preprocessors/", 
            "text": "CSS Preprocessor integration\n\n\nAngular CLI supports all major CSS preprocessors:\n- sass/scss (\nhttp://sass-lang.com/\n)\n- less (\nhttp://lesscss.org/\n)\n- stylus (\nhttp://stylus-lang.com/\n)\n\n\nTo use these preprocessors simply add the file to your component's \nstyleUrls\n:\n\n\n@\nComponent\n({\n\n  \nselector\n:\n \napp-root\n,\n\n  \ntemplateUrl\n:\n \n./app.component.html\n,\n\n  \nstyleUrls\n:\n \n[\n./app.component.scss\n]\n\n\n})\n\n\nexport\n \nclass\n \nAppComponent\n \n{\n\n  \ntitle\n \n=\n \napp works!\n;\n\n\n}\n\n\n\n\n\nWhen generating a new project you can also define which extension you want for\nstyle files:\n\n\nng new sassy-project --style\n=\nsass\n\n\n\n\nOr set the default style on an existing project:\n\n\nng \nset\n defaults.styleExt scss\n\n\n\n\nStyle strings added to the \n@Component.styles\n array \nmust be written in CSS\n because the CLI cannot apply a pre-processor to inline styles.", 
            "title": "css\u9884\u5904\u7406\u5668"
        }, 
        {
            "location": "/stories/css-preprocessors/#css-preprocessor-integration", 
            "text": "Angular CLI supports all major CSS preprocessors:\n- sass/scss ( http://sass-lang.com/ )\n- less ( http://lesscss.org/ )\n- stylus ( http://stylus-lang.com/ )  To use these preprocessors simply add the file to your component's  styleUrls :  @ Component ({ \n   selector :   app-root , \n   templateUrl :   ./app.component.html , \n   styleUrls :   [ ./app.component.scss ]  })  export   class   AppComponent   { \n   title   =   app works! ;  }   When generating a new project you can also define which extension you want for\nstyle files:  ng new sassy-project --style = sass  Or set the default style on an existing project:  ng  set  defaults.styleExt scss  Style strings added to the  @Component.styles  array  must be written in CSS  because the CLI cannot apply a pre-processor to inline styles.", 
            "title": "CSS Preprocessor integration"
        }, 
        {
            "location": "/stories/third-party-lib/", 
            "text": "3rd Party Library Installation\n\n\nSimply install your library via \nnpm install lib-name --save\n and import it in your code.\n\n\nIf the library does not include typings, you can install them using npm:\n\n\nnpm install d3 --save\nnpm install @types/d3 --save-dev\n\n\n\n\nThen open \nsrc/tsconfig.app.json\n and add it to the \ntypes\n array:\n\n\ntypes\n:[\n  \nd3\n\n]\n\n\n\n\nIf the library you added typings for is only to be used on your e2e tests,\ninstead use \ne2e/tsconfig.e2e.json\n.\nThe same goes for unit tests and \nsrc/tsconfig.spec.json\n.\n\n\nIf the library doesn't have typings available at \n@types/\n, you can still use it by\nmanually adding typings for it:\n\n\n\n\n\n\nFirst, create a \ntypings.d.ts\n file in your \nsrc/\n folder. This file will be automatically included as global type definition.\n\n\n\n\n\n\nThen, in \nsrc/typings.d.ts\n, add the following code:\n\n\n\n\n\n\ndeclare\n \nmodule\n \ntypeless-package\n;\n\n\n\n\n\n\n\nFinally, in the component or file that uses the library, add the following code:\n\n\n\n\nimport\n \n*\n \nas\n \ntypelessPackage\n \nfrom\n \ntypeless-package\n;\n\n\ntypelessPackage\n.\nmethod\n();\n\n\n\n\n\nDone. Note: you might need or find useful to define more typings for the library that you're trying to use.", 
            "title": "\u7b2c\u4e09\u65b9\u5e93"
        }, 
        {
            "location": "/stories/third-party-lib/#3rd-party-library-installation", 
            "text": "Simply install your library via  npm install lib-name --save  and import it in your code.  If the library does not include typings, you can install them using npm:  npm install d3 --save\nnpm install @types/d3 --save-dev  Then open  src/tsconfig.app.json  and add it to the  types  array:  types :[\n   d3 \n]  If the library you added typings for is only to be used on your e2e tests,\ninstead use  e2e/tsconfig.e2e.json .\nThe same goes for unit tests and  src/tsconfig.spec.json .  If the library doesn't have typings available at  @types/ , you can still use it by\nmanually adding typings for it:    First, create a  typings.d.ts  file in your  src/  folder. This file will be automatically included as global type definition.    Then, in  src/typings.d.ts , add the following code:    declare   module   typeless-package ;    Finally, in the component or file that uses the library, add the following code:   import   *   as   typelessPackage   from   typeless-package ;  typelessPackage . method ();   Done. Note: you might need or find useful to define more typings for the library that you're trying to use.", 
            "title": "3rd Party Library Installation"
        }, 
        {
            "location": "/stories/autocompletion/", 
            "text": "\u81ea\u52a8\u5b8c\u6210\n\n\n\u8981\u6253\u5f00\u81ea\u52a8\u5b8c\u6210\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a\n\n\nFor bash:\n\n\nng completion --bash \n ~/.bashrc\n\nsource\n ~/.bashrc\n\n\n\n\nFor zsh:\n\n\nng completion --zsh \n ~/.zshrc\n\nsource\n ~/.zshrc\n\n\n\n\nWindows users using gitbash:\n\n\nng completion --bash \n ~/.bash_profile\n\nsource\n ~/.bash_profile", 
            "title": "\u81ea\u52a8\u5b8c\u6210"
        }, 
        {
            "location": "/stories/autocompletion/#_1", 
            "text": "\u8981\u6253\u5f00\u81ea\u52a8\u5b8c\u6210\uff0c\u8bf7\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\uff1a  For bash:  ng completion --bash   ~/.bashrc source  ~/.bashrc  For zsh:  ng completion --zsh   ~/.zshrc source  ~/.zshrc  Windows users using gitbash:  ng completion --bash   ~/.bash_profile source  ~/.bash_profile", 
            "title": "\u81ea\u52a8\u5b8c\u6210"
        }, 
        {
            "location": "/stories/autoprefixer/", 
            "text": "\u66f4\u6539Autoprefixe\u7684\u76ee\u6807\u6d4f\u89c8\u5668\n\n\nCurrently, the CLI uses \nAutoprefixer\n to ensure compatibility\nwith different browser and browser versions. You may find it necessary to target specific browsers\nor exclude certain browser versions from your build.\n\n\nInternally, Autoprefixer relies on a library called \nBrowserslist\n\nto figure out which browsers to support with prefixing.\n\n\nThere are a few ways to tell Autoprefixer what browsers to target:\n\n\n\u5c06\u4e00\u4e2abrowserslist\u5c5e\u6027\u6dfb\u52a0\u5230\npackage.json\n\u6587\u4ef6\u4e2d\n\n\nbrowserslist\n:\n \n[\n\n  \n 1%\n,\n\n  \nlast 2 versions\n\n\n]\n\n\n\n\n\n\u5c06\u4e00\u4e2a\u65b0\u6587\u4ef6\u6dfb\u52a0\u5230\u540d\u4e3a\n.browserslistrc\n\u7684\u9879\u76ee\u76ee\u5f55\u4e2d\n\n\n### Supported Browsers\n\n\n\n \n1\n%\nlast \n2\n versions\n\n\n\n\nAutoprefixer will look for the configuration file/property to use when it prefixes your css.\nCheck out the \nbrowserslist repo\n for more examples of how to target\nspecific browsers and versions.\n\n\nSide note:\n\nThose who are seeking to produce a \nprogressive web app\n and are using \nLighthouse\n to grade the project will\nneed to add the following browserslist config to their package.json file to eliminate the \nold flexbox\n prefixes:\n\n\npackage.json\n config:\n\n\nbrowserslist\n:\n \n[\n\n  \nlast 2 versions\n,\n\n  \nnot ie \n= 10\n,\n\n  \nnot ie_mob \n= 10\n\n\n]", 
            "title": "autoprefixer"
        }, 
        {
            "location": "/stories/autoprefixer/#autoprefixe", 
            "text": "Currently, the CLI uses  Autoprefixer  to ensure compatibility\nwith different browser and browser versions. You may find it necessary to target specific browsers\nor exclude certain browser versions from your build.  Internally, Autoprefixer relies on a library called  Browserslist \nto figure out which browsers to support with prefixing.  There are a few ways to tell Autoprefixer what browsers to target:", 
            "title": "\u66f4\u6539Autoprefixe\u7684\u76ee\u6807\u6d4f\u89c8\u5668"
        }, 
        {
            "location": "/stories/autoprefixer/#browserslistpackagejson", 
            "text": "browserslist :   [ \n    1% , \n   last 2 versions  ]", 
            "title": "\u5c06\u4e00\u4e2abrowserslist\u5c5e\u6027\u6dfb\u52a0\u5230package.json\u6587\u4ef6\u4e2d"
        }, 
        {
            "location": "/stories/autoprefixer/#browserslistrc", 
            "text": "### Supported Browsers    1 %\nlast  2  versions  Autoprefixer will look for the configuration file/property to use when it prefixes your css.\nCheck out the  browserslist repo  for more examples of how to target\nspecific browsers and versions.  Side note: \nThose who are seeking to produce a  progressive web app  and are using  Lighthouse  to grade the project will\nneed to add the following browserslist config to their package.json file to eliminate the  old flexbox  prefixes:  package.json  config:  browserslist :   [ \n   last 2 versions , \n   not ie  = 10 , \n   not ie_mob  = 10  ]", 
            "title": "\u5c06\u4e00\u4e2a\u65b0\u6587\u4ef6\u6dfb\u52a0\u5230\u540d\u4e3a.browserslistrc\u7684\u9879\u76ee\u76ee\u5f55\u4e2d"
        }, 
        {
            "location": "/stories/budgets/", 
            "text": "Budgets\n\n\nAs applications grow in functionality, they also grow in size. Budgets is a feature in the\nAngular CLI which allows you to set budget thresholds in your configuration to ensure parts\nof your application stay within boundries which you set.\n\n\n.angular-cli.json\n\n\n{\n  ...\n  apps: [\n    {\n      ...\n      budgets: []\n    }\n  ]\n}\n\n\n\nBudget Definition\n\n\n\n\ntype\n\n\nThe type of budget.\n\n\nPossible values:\n\n\nbundle - The size of a specific bundle.\n\n\ninitial - The initial size of the app.\n\n\nallScript - The size of all scripts.\n\n\nall - The size of the entire app.\n\n\nanyScript - The size of any one script.\n\n\nany - The size of any file.\n\n\n\n\n\n\nname\n\n\nThe name of the bundle.\n\n\nRequired only for type of \"bundle\"\n\n\nbaseline\n\n\nThe baseline size for comparison.\n\n\nmaximumWarning\n\n\nThe maximum threshold for warning relative to the baseline.\n\n\nmaximumError\n\n\nThe maximum threshold for error relative to the baseline.\n\n\nminimumWarning\n\n\nThe minimum threshold for warning relative to the baseline.\n\n\nminimumError\n\n\nThe minimum threshold for error relative to the baseline.\n\n\nwarning\n\n\nThe threshold for warning relative to the baseline (min \n max).\n\n\nerror\n\n\nThe threshold for error relative to the baseline (min \n max).\n\n\n\n\nSpecifying sizes\n\n\nAvailable formats:\n123 - size in bytes\n123b - size in bytes\n123kb - size in kilobytes\n123mb - size in megabytes\n12% - percentage\n\n\nNOTES\n\n\nAll sizes are relative to baseline.\nPercentages are not valid for baseline values.", 
            "title": "budgets"
        }, 
        {
            "location": "/stories/budgets/#budgets", 
            "text": "As applications grow in functionality, they also grow in size. Budgets is a feature in the\nAngular CLI which allows you to set budget thresholds in your configuration to ensure parts\nof your application stay within boundries which you set.  .angular-cli.json  {\n  ...\n  apps: [\n    {\n      ...\n      budgets: []\n    }\n  ]\n}", 
            "title": "Budgets"
        }, 
        {
            "location": "/stories/budgets/#budget-definition", 
            "text": "type  The type of budget.  Possible values:  bundle - The size of a specific bundle.  initial - The initial size of the app.  allScript - The size of all scripts.  all - The size of the entire app.  anyScript - The size of any one script.  any - The size of any file.    name  The name of the bundle.  Required only for type of \"bundle\"  baseline  The baseline size for comparison.  maximumWarning  The maximum threshold for warning relative to the baseline.  maximumError  The maximum threshold for error relative to the baseline.  minimumWarning  The minimum threshold for warning relative to the baseline.  minimumError  The minimum threshold for error relative to the baseline.  warning  The threshold for warning relative to the baseline (min   max).  error  The threshold for error relative to the baseline (min   max).", 
            "title": "Budget Definition"
        }, 
        {
            "location": "/stories/budgets/#specifying-sizes", 
            "text": "Available formats:\n123 - size in bytes\n123b - size in bytes\n123kb - size in kilobytes\n123mb - size in megabytes\n12% - percentage", 
            "title": "Specifying sizes"
        }, 
        {
            "location": "/stories/budgets/#notes", 
            "text": "All sizes are relative to baseline.\nPercentages are not valid for baseline values.", 
            "title": "NOTES"
        }, 
        {
            "location": "/stories/continuous-integration/", 
            "text": "Continuous Integration\n\n\nOne of the best ways to keep your project bug free is through a test suite, but it's easy to forget\nto run tests all the time.\n\n\nThat's where Continuous Integration (CI) servers come in.\nYou can set up your project repository so that your tests run on every commit and pull request.\n\n\nThere are paid CI services like \nCircle CI\n and\n\nTravis CI\n, and you can also host your own for free using\n\nJenkins\n and others.\n\n\nEven though Circle CI and Travis CI are paid services, they are provided free for open source\nprojects.\nYou can create a public project on GitHub and add these services without paying.\n\n\nWe're going to see how to update your test configuration to run in CI environments, and how to\nset up Circle CI and Travis CI.\n\n\nUpdate test configuration\n\n\nEven though \nng test\n and \nng e2e\n already run on your environment, they need to be adjusted to\nrun in CI environments.\n\n\nWhen using Chrome in CI environments it has to be started without sandboxing.\nWe can achieve that by editing our test configs.\n\n\nIn \nkarma.conf.js\n, add a custom launcher called \nChromeNoSandbox\n below \nbrowsers\n:\n\n\nbrowsers: [\nChrome\n],\ncustomLaunchers: {\n  ChromeNoSandbox: {\n    base: \nChrome\n,\n    flags: [\n--no-sandbox\n]\n  }\n},\n\n\n\n\nCreate a new file in the root of your project called \nprotractor-ci.conf.js\n, that extends\nthe original \nprotractor.conf.js\n:\n\n\nconst config = require(\n./protractor.conf\n).config;\n\nconfig.capabilities = {\n  browserName: \nchrome\n,\n  chromeOptions: {\n    args: [\n--no-sandbox\n]\n  }\n};\n\nexports.config = config;\n\n\n\n\nNow you can run the following commands to use the \n--no-sandbox\n flag:\n\n\nng test --single-run --no-progress --browser=ChromeNoSandbox\nng e2e --no-progress --config=protractor-ci.conf.js\n\n\n\n\nFor CI environments it's also a good idea to disable progress reporting (via \n--no-progress\n)\nto avoid spamming the server log with progress messages.\n\n\nUsing Circle CI\n\n\nCreate a folder called \n.circleci\n at the project root, and inside of it create a file called\n\nconfig.yml\n:\n\n\nversion\n:\n \n2\n\n\njobs\n:\n\n  \nbuild\n:\n\n    \nworking_directory\n:\n \n~/my-project\n\n    \ndocker\n:\n\n      \n-\n \nimage\n:\n \ncircleci/node:8-browsers\n\n    \nsteps\n:\n\n      \n-\n \ncheckout\n\n      \n-\n \nrestore_cache\n:\n\n          \nkey\n:\n \nmy-project-{{ .Branch }}-{{ checksum \npackage.json\n }}\n\n      \n-\n \nrun\n:\n \nnpm install\n\n      \n-\n \nsave_cache\n:\n\n          \nkey\n:\n \nmy-project-{{ .Branch }}-{{ checksum \npackage.json\n }}\n\n          \npaths\n:\n\n            \n-\n \nnode_modules\n\n      \n-\n \nrun\n:\n \nxvfb-run -a npm run test -- --single-run --no-progress --browser=ChromeNoSandbox\n\n      \n-\n \nrun\n:\n \nxvfb-run -a npm run e2e -- --no-progress --config=protractor-ci.conf.js\n\n\n\n\n\nWe're doing a few things here:\n  -\n  - \nnode_modules\n is cached.\n  - \nnpm run\n is used to run \nng\n because \n@angular/cli\n is\n  not installed globally. The double dash (\n--\n) is needed to pass arguments into the npm script.\n  - \nxvfb-run\n is used to run \nnpm run\n to run a command using a virtual screen, which is needed by\n  Chrome.\n\n\nCommit your changes and push them to your repository.\n\n\nNext you'll need to \nsign up for Circle CI\n and\n\nadd your project\n.\nYour project should start building.\n\n\nBe sure to check out the \nCircle CI docs\n if you want to know more.\n\n\nUsing Travis CI\n\n\nCreate a file called \n.travis.yml\n at the project root:\n\n\ndist\n:\n \ntrusty\n\n\nsudo\n:\n \nfalse\n\n\n\nlanguage\n:\n \nnode_js\n\n\nnode_js\n:\n\n  \n-\n \n8\n\n\n\naddons\n:\n\n  \napt\n:\n\n    \nsources\n:\n\n      \n-\n \ngoogle-chrome\n\n    \npackages\n:\n\n      \n-\n \ngoogle-chrome-stable\n\n\n\ncache\n:\n\n  \ndirectories\n:\n\n     \n-\n \n./node_modules\n\n\n\ninstall\n:\n\n  \n-\n \nnpm install\n\n\n\nscript\n:\n\n  \n# Use Chromium instead of Chrome.\n\n  \n-\n \nexport CHROME_BIN=chromium-browser\n\n  \n-\n \nxvfb-run -a npm run test -- --single-run --no-progress --browser=ChromeNoSandbox\n\n  \n-\n \nxvfb-run -a npm run e2e -- --no-progress --config=protractor-ci.conf.js\n\n\n\n\n\nAlthough the syntax is different, we're mostly doing the same steps as were done in the\nCircle CI config.\nThe only difference is that Travis doesn't come with Chrome, so we use Chromium instead.\n\n\nCommit your changes and push them to your repository.\n\n\nNext you'll need to \nsign up for Travis CI\n and\n\nadd your project\n.\nYou'll need to push a new commit to trigger a build.\n\n\nBe sure to check out the \nTravis CI docs\n if you want to know more.", 
            "title": "\u6301\u7eed\u96c6\u6210"
        }, 
        {
            "location": "/stories/continuous-integration/#continuous-integration", 
            "text": "One of the best ways to keep your project bug free is through a test suite, but it's easy to forget\nto run tests all the time.  That's where Continuous Integration (CI) servers come in.\nYou can set up your project repository so that your tests run on every commit and pull request.  There are paid CI services like  Circle CI  and Travis CI , and you can also host your own for free using Jenkins  and others.  Even though Circle CI and Travis CI are paid services, they are provided free for open source\nprojects.\nYou can create a public project on GitHub and add these services without paying.  We're going to see how to update your test configuration to run in CI environments, and how to\nset up Circle CI and Travis CI.", 
            "title": "Continuous Integration"
        }, 
        {
            "location": "/stories/continuous-integration/#update-test-configuration", 
            "text": "Even though  ng test  and  ng e2e  already run on your environment, they need to be adjusted to\nrun in CI environments.  When using Chrome in CI environments it has to be started without sandboxing.\nWe can achieve that by editing our test configs.  In  karma.conf.js , add a custom launcher called  ChromeNoSandbox  below  browsers :  browsers: [ Chrome ],\ncustomLaunchers: {\n  ChromeNoSandbox: {\n    base:  Chrome ,\n    flags: [ --no-sandbox ]\n  }\n},  Create a new file in the root of your project called  protractor-ci.conf.js , that extends\nthe original  protractor.conf.js :  const config = require( ./protractor.conf ).config;\n\nconfig.capabilities = {\n  browserName:  chrome ,\n  chromeOptions: {\n    args: [ --no-sandbox ]\n  }\n};\n\nexports.config = config;  Now you can run the following commands to use the  --no-sandbox  flag:  ng test --single-run --no-progress --browser=ChromeNoSandbox\nng e2e --no-progress --config=protractor-ci.conf.js  For CI environments it's also a good idea to disable progress reporting (via  --no-progress )\nto avoid spamming the server log with progress messages.", 
            "title": "Update test configuration"
        }, 
        {
            "location": "/stories/continuous-integration/#using-circle-ci", 
            "text": "Create a folder called  .circleci  at the project root, and inside of it create a file called config.yml :  version :   2  jobs : \n   build : \n     working_directory :   ~/my-project \n     docker : \n       -   image :   circleci/node:8-browsers \n     steps : \n       -   checkout \n       -   restore_cache : \n           key :   my-project-{{ .Branch }}-{{ checksum  package.json  }} \n       -   run :   npm install \n       -   save_cache : \n           key :   my-project-{{ .Branch }}-{{ checksum  package.json  }} \n           paths : \n             -   node_modules \n       -   run :   xvfb-run -a npm run test -- --single-run --no-progress --browser=ChromeNoSandbox \n       -   run :   xvfb-run -a npm run e2e -- --no-progress --config=protractor-ci.conf.js   We're doing a few things here:\n  -\n  -  node_modules  is cached.\n  -  npm run  is used to run  ng  because  @angular/cli  is\n  not installed globally. The double dash ( -- ) is needed to pass arguments into the npm script.\n  -  xvfb-run  is used to run  npm run  to run a command using a virtual screen, which is needed by\n  Chrome.  Commit your changes and push them to your repository.  Next you'll need to  sign up for Circle CI  and add your project .\nYour project should start building.  Be sure to check out the  Circle CI docs  if you want to know more.", 
            "title": "Using Circle CI"
        }, 
        {
            "location": "/stories/continuous-integration/#using-travis-ci", 
            "text": "Create a file called  .travis.yml  at the project root:  dist :   trusty  sudo :   false  language :   node_js  node_js : \n   -   8  addons : \n   apt : \n     sources : \n       -   google-chrome \n     packages : \n       -   google-chrome-stable  cache : \n   directories : \n      -   ./node_modules  install : \n   -   npm install  script : \n   # Use Chromium instead of Chrome. \n   -   export CHROME_BIN=chromium-browser \n   -   xvfb-run -a npm run test -- --single-run --no-progress --browser=ChromeNoSandbox \n   -   xvfb-run -a npm run e2e -- --no-progress --config=protractor-ci.conf.js   Although the syntax is different, we're mostly doing the same steps as were done in the\nCircle CI config.\nThe only difference is that Travis doesn't come with Chrome, so we use Chromium instead.  Commit your changes and push them to your repository.  Next you'll need to  sign up for Travis CI  and add your project .\nYou'll need to push a new commit to trigger a build.  Be sure to check out the  Travis CI docs  if you want to know more.", 
            "title": "Using Travis CI"
        }, 
        {
            "location": "/stories/github-pages/", 
            "text": "Deploy to GitHub Pages\n\n\nA simple way to deploy your Angular app is to use\n\nGitHub Pages\n.\n\n\nThe first step is to \ncreate a GitHub account\n, and then\n\ncreate a repository\n for your project.\nMake a note of the user name and project name in GitHub.\n\n\nThen all you need to do is run \nng build --prod --output-path docs --base-href PROJECT_NAME\n, where\n\nPROJECT_NAME\n is the name of your project in GitHub.\nMake a copy of \ndocs/index.html\n and name it \ndocs/404.html\n.\n\n\nCommit your changes and push. On the GitHub project page, configure it to\n\npublish from the docs folder\n.\n\n\nAnd that's all you need to do! Now you can see your page at\n\nhttps://USER_NAME.github.io/PROJECT_NAME/\n.\n\n\nYou can also use \nangular-cli-ghpages\n, a full\nfeatured package that does this all this for you and has extra functionality.", 
            "title": "github\u9875\u9762"
        }, 
        {
            "location": "/stories/github-pages/#deploy-to-github-pages", 
            "text": "A simple way to deploy your Angular app is to use GitHub Pages .  The first step is to  create a GitHub account , and then create a repository  for your project.\nMake a note of the user name and project name in GitHub.  Then all you need to do is run  ng build --prod --output-path docs --base-href PROJECT_NAME , where PROJECT_NAME  is the name of your project in GitHub.\nMake a copy of  docs/index.html  and name it  docs/404.html .  Commit your changes and push. On the GitHub project page, configure it to publish from the docs folder .  And that's all you need to do! Now you can see your page at https://USER_NAME.github.io/PROJECT_NAME/ .  You can also use  angular-cli-ghpages , a full\nfeatured package that does this all this for you and has extra functionality.", 
            "title": "Deploy to GitHub Pages"
        }, 
        {
            "location": "/stories/universal-rendering/", 
            "text": "Angular Universal Integration\n\n\nThe Angular CLI supports generation of a Universal build for your application. This is a CommonJS-formatted bundle which can be \nrequire()\n'd into a Node application (for example, an Express server) and used with \n@angular/platform-server\n's APIs to prerender your application.\n\n\n\n\nExample CLI Integration:\n\n\nAngular Universal-Starter\n - Clone the universal-starter for a working example.\n\n\n\n\nIntegrating Angular Universal into existing CLI Applications\n\n\nThis story will show you how to set up Universal bundling for an existing \n@angular/cli\n project in 5 steps.\n\n\n\n\nInstall Dependencies\n\n\nInstall \n@angular/platform-server\n into your project. Make sure you use the same version as the other \n@angular\n packages in your project.\n\n\n\n\nYou'll also need ts-loader (for your webpack build we'll show later) and @nguniversal/module-map-ngfactory-loader, as it's used to handle lazy-loading in the context of a server-render. (by loading the chunks right away)\n\n\n\n\n$ npm install --save @angular/platform-server @nguniversal/module-map-ngfactory-loader ts-loader\n\n\n\n\nStep 1: Prepare your App for Universal rendering\n\n\nThe first thing you need to do is make your \nAppModule\n compatible with Universal by adding \n.withServerTransition()\n and an application ID to your \nBrowserModule\n import:\n\n\nsrc/app/app.module.ts:\n\n\n@\nNgModule\n({\n\n  \nbootstrap\n:\n \n[\nAppComponent\n],\n\n  \nimports\n:\n \n[\n\n    \n// Add .withServerTransition() to support Universal rendering.\n\n    \n// The application ID can be any identifier which is unique on\n\n    \n// the page.\n\n    \nBrowserModule\n.\nwithServerTransition\n({\nappId\n:\n \nmy-app\n}),\n\n    \n...\n\n  \n],\n\n\n\n})\n\n\nexport\n \nclass\n \nAppModule\n \n{}\n\n\n\n\n\nNext, create a module specifically for your application when running on the server. It's recommended to call this module \nAppServerModule\n.\n\n\nThis example places it alongside \napp.module.ts\n in a file named \napp.server.module.ts\n:\n\n\nsrc/app/app.server.module.ts:\n\n\nYou can see here we're simply Importing everything from AppModule, followed by ServerModule.\n\n\n\n\nOne important thing to Note: We need \nModuleMapLoaderModule\n to help make Lazy-loaded routes possible during Server-side renders with the Angular-CLI.\n\n\n\n\nimport\n \n{\nNgModule\n}\n \nfrom\n \n@angular/core\n;\n\n\nimport\n \n{\nServerModule\n}\n \nfrom\n \n@angular/platform-server\n;\n\n\nimport\n \n{\nModuleMapLoaderModule\n}\n \nfrom\n \n@nguniversal/module-map-ngfactory-loader\n;\n\n\n\nimport\n \n{\nAppModule\n}\n \nfrom\n \n./app.module\n;\n\n\nimport\n \n{\nAppComponent\n}\n \nfrom\n \n./app.component\n;\n\n\n\n@NgModule\n({\n\n  \nimports\n:\n \n[\n\n    \n// The AppServerModule should import your AppModule followed\n\n    \n// by the ServerModule from @angular/platform-server.\n\n    \nAppModule\n,\n\n    \nServerModule\n,\n\n    \nModuleMapLoaderModule\n \n// \n-- *Important* to have lazy-loaded routes work\n\n  \n],\n\n  \n// Since the bootstrapped component is not inherited from your\n\n  \n// imported AppModule, it needs to be repeated here.\n\n  \nbootstrap\n:\n \n[\nAppComponent\n],\n\n\n})\n\n\nexport\n \nclass\n \nAppServerModule\n \n{}\n\n\n\n\n\n\n\nStep 2: Create a server \"main\" file and tsconfig to build it\n\n\nCreate a main file for your Universal bundle. This file only needs to export your \nAppServerModule\n. It can go in \nsrc\n. This example calls this file \nmain.server.ts\n:\n\n\nsrc/main.server.ts:\n\n\nexport\n \n{\n \nAppServerModule\n \n}\n \nfrom\n \n./app/app.server.module\n;\n\n\n\n\n\nCopy \ntsconfig.app.json\n to \ntsconfig.server.json\n and change it to build with a \n\"module\"\n target of \n\"commonjs\"\n.\n\n\nAdd a section for \n\"angularCompilerOptions\"\n and set \n\"entryModule\"\n to your \nAppServerModule\n, specified as a path to the import with a hash (\n#\n) containing the symbol name. In this example, this would be \napp/app.server.module#AppServerModule\n.\n\n\nsrc/tsconfig.server.json:\n\n\n{\n\n  \nextends\n:\n \n../tsconfig.json\n,\n\n  \ncompilerOptions\n:\n \n{\n\n    \noutDir\n:\n \n../out-tsc/app\n,\n\n    \nbaseUrl\n:\n \n./\n,\n\n    \n// Set the module format to \ncommonjs\n:\n\n    \nmodule\n:\n \ncommonjs\n,\n\n    \ntypes\n:\n \n[]\n\n  \n},\n\n  \nexclude\n:\n \n[\n\n    \ntest.ts\n,\n\n    \n**/*.spec.ts\n\n  \n],\n\n  \n// Add \nangularCompilerOptions\n with the AppServerModule you wrote\n\n  \n// set as the \nentryModule\n.\n\n  \nangularCompilerOptions\n:\n \n{\n\n    \nentryModule\n:\n \napp/app.server.module#AppServerModule\n\n  \n}\n\n\n}\n\n\n\n\n\n\n\nStep 3: Create a new project in \n.angular-cli.json\n\n\nIn \n.angular-cli.json\n there is an array under the key \n\"apps\"\n. Copy the configuration for your client application there, and paste it as a new entry in the array, with an additional key \n\"platform\"\n set to \n\"server\"\n.\n\n\nThen, remove the \n\"polyfills\"\n key - those aren't needed on the server, and adjust \n\"main\"\n, and \n\"tsconfig\"\n to point to the files you wrote in step 2. Finally, adjust \n\"outDir\"\n to a new location (this example uses \ndist-server\n).\n\n\n.angular-cli.json:\n\n\n{\n\n  \n...\n\n  \napps\n:\n \n[\n\n    \n{\n\n      \n// Keep your original application config intact here, this is app 0\n\n      \n// -EXCEPT- for outDir, update it to dist/browser\n\n      \noutDir\n:\n \ndist/browser\n \n// \n-- update this\n\n    \n},\n\n    \n{\n\n      \n// This is your server app. It is app 1.\n\n      \nplatform\n:\n \nserver\n,\n\n      \nroot\n:\n \nsrc\n,\n\n      \n// Build to dist/server instead of dist. This prevents\n\n      \n// client and server builds from overwriting each other.\n\n      \noutDir\n:\n \ndist/server\n,\n\n      \nassets\n:\n \n[\n\n        \nassets\n,\n\n        \nfavicon.ico\n\n      \n],\n\n      \nindex\n:\n \nindex.html\n,\n\n      \n// Change the main file to point to your server main.\n\n      \nmain\n:\n \nmain.server.ts\n,\n\n      \n// Remove polyfills.\n\n      \n// \npolyfills\n: \npolyfills.ts\n,\n\n      \ntest\n:\n \ntest.ts\n,\n\n      \n// Change the tsconfig to point to your server config.\n\n      \ntsconfig\n:\n \ntsconfig.server.json\n,\n\n      \ntestTsconfig\n:\n \ntsconfig.spec.json\n,\n\n      \nprefix\n:\n \napp\n,\n\n      \nstyles\n:\n \n[\n\n        \nstyles.css\n\n      \n],\n\n      \nscripts\n:\n \n[],\n\n      \nenvironmentSource\n:\n \nenvironments/environment.ts\n,\n\n      \nenvironments\n:\n \n{\n\n        \ndev\n:\n \nenvironments/environment.ts\n,\n\n        \nprod\n:\n \nenvironments/environment.prod.ts\n\n      \n}\n\n    \n}\n\n  \n],\n\n  \n...\n\n\n}\n\n\n\n\n\nBuilding the bundle\n\n\nWith these steps complete, you should be able to build a server bundle for your application, using the \n--app\n flag to tell the CLI to build the server bundle, referencing its index of \n1\n in the \n\"apps\"\n array in \n.angular-cli.json\n:\n\n\n# This builds the client application in dist/browser/\n\n$ ng build --prod\n...\n\n# This builds the server bundle in dist/server/\n\n$ ng build --prod --app \n1\n --output-hashing\n=\nfalse\n\n\n\n# outputs:\n\nDate: \n2017\n-07-24T22:42:09.739Z\nHash: 9cac7d8e9434007fd8da\nTime: 4933ms\nchunk \n{\n0\n}\n main.js \n(\nmain\n)\n \n9\n.49 kB \n[\nentry\n]\n \n[\nrendered\n]\n\nchunk \n{\n1\n}\n styles.css \n(\nstyles\n)\n \n0\n bytes \n[\nentry\n]\n \n[\nrendered\n]\n\n\n\n\n\n\n\nStep 4: Setting up an Express Server to run our Universal bundles\n\n\nNow that we have everything set up to -make- the bundles, how we get everything running?\n\n\nPlatformServer offers a method called \nrenderModuleFactory()\n that we can use to pass in our AoT'd AppServerModule, to serialize our application, and then we'll be returning that result to the Browser.\n\n\napp\n.\nengine\n(\nhtml\n,\n \n(\n_\n,\n \noptions\n,\n \ncallback\n)\n \n=\n \n{\n\n  \nrenderModuleFactory\n(\nAppServerModuleNgFactory\n,\n \n{\n\n    \n// Our index.html\n\n    \ndocument\n:\n \ntemplate\n,\n\n    \nurl\n: \noptions.req.url\n,\n\n    \n// DI so that we can get lazy-loading to work differently (since we need it to just instantly render it)\n\n    \nextraProviders\n:\n \n[\n\n      \nprovideModuleMap\n(\nLAZY_MODULE_MAP\n)\n\n    \n]\n\n  \n}).\nthen\n(\nhtml\n \n=\n \n{\n\n    \ncallback\n(\nnull\n,\n \nhtml\n);\n\n  \n});\n\n\n});\n\n\n\n\n\nYou could do this, if you want complete flexibility, or use an express-engine with a few other built in features from \n@nguniversal/express-engine\n found here.\n\n\n// It\ns used as easily as\n\n\nimport\n \n{\n \nngExpressEngine\n \n}\n \nfrom\n \n@nguniversal/express-engine\n;\n\n\n\napp\n.\nengine\n(\nhtml\n,\n \nngExpressEngine\n({\n\n  \nbootstrap\n: \nAppServerModuleNgFactory\n,\n\n  \nproviders\n:\n \n[\n\n    \nprovideModuleMap\n(\nLAZY_MODULE_MAP\n)\n\n  \n]\n\n\n}));\n\n\n\n\n\nBelow we can see a TypeScript implementation of a -very- simple Express server to fire everything up.\n\n\n\n\nNote: This is a very bare bones Express application, and is just for demonstrations sake. In a real production environment, you'd want to make sure you have other authentication and security things setup here as well. This is just meant just to show the specific things needed that are relevant to Universal itself. The rest is up to you!\n\n\n\n\nAt the ROOT level of your project (where package.json / etc are), created a file named: \nserver.ts\n\n\n./server.ts (root project level)\n\n\n// These are important and needed before anything else\n\n\nimport\n \nzone.js/dist/zone-node\n;\n\n\nimport\n \nreflect-metadata\n;\n\n\n\nimport\n \n{\n \nrenderModuleFactory\n \n}\n \nfrom\n \n@angular/platform-server\n;\n\n\nimport\n \n{\n \nenableProdMode\n \n}\n \nfrom\n \n@angular/core\n;\n\n\n\nimport\n \n*\n \nas\n \nexpress\n \nfrom\n \nexpress\n;\n\n\nimport\n \n{\n \njoin\n \n}\n \nfrom\n \npath\n;\n\n\nimport\n \n{\n \nreadFileSync\n \n}\n \nfrom\n \nfs\n;\n\n\n\n// Faster server renders w/ Prod mode (dev mode never needed)\n\n\nenableProdMode\n();\n\n\n\n// Express server\n\n\nconst\n \napp\n \n=\n \nexpress\n();\n\n\n\nconst\n \nPORT\n \n=\n \nprocess\n.\nenv\n.\nPORT\n \n||\n \n4000\n;\n\n\nconst\n \nDIST_FOLDER\n \n=\n \njoin\n(\nprocess\n.\ncwd\n(),\n \ndist\n);\n\n\n\n// Our index.html we\nll use as our template\n\n\nconst\n \ntemplate\n \n=\n \nreadFileSync\n(\njoin\n(\nDIST_FOLDER\n,\n \nbrowser\n,\n \nindex.html\n)).\ntoString\n();\n\n\n\n// * NOTE :: leave this as require() since this file is built Dynamically from webpack\n\n\nconst\n \n{\n \nAppServerModuleNgFactory\n,\n \nLAZY_MODULE_MAP\n \n}\n \n=\n \nrequire\n(\n./dist/server/main.bundle\n);\n\n\n\nconst\n \n{\n \nprovideModuleMap\n \n}\n \n=\n \nrequire\n(\n@nguniversal/module-map-ngfactory-loader\n);\n\n\n\napp\n.\nengine\n(\nhtml\n,\n \n(\n_\n,\n \noptions\n,\n \ncallback\n)\n \n=\n \n{\n\n  \nrenderModuleFactory\n(\nAppServerModuleNgFactory\n,\n \n{\n\n    \n// Our index.html\n\n    \ndocument\n:\n \ntemplate\n,\n\n    \nurl\n: \noptions.req.url\n,\n\n    \n// DI so that we can get lazy-loading to work differently (since we need it to just instantly render it)\n\n    \nextraProviders\n:\n \n[\n\n      \nprovideModuleMap\n(\nLAZY_MODULE_MAP\n)\n\n    \n]\n\n  \n}).\nthen\n(\nhtml\n \n=\n \n{\n\n    \ncallback\n(\nnull\n,\n \nhtml\n);\n\n  \n});\n\n\n});\n\n\n\napp\n.\nset\n(\nview engine\n,\n \nhtml\n);\n\n\napp\n.\nset\n(\nviews\n,\n \njoin\n(\nDIST_FOLDER\n,\n \nbrowser\n));\n\n\n\n// Server static files from /browser\n\n\napp\n.\nget\n(\n*.*\n,\n \nexpress\n.\nstatic\n(\njoin\n(\nDIST_FOLDER\n,\n \nbrowser\n)));\n\n\n\n// All regular routes use the Universal engine\n\n\napp\n.\nget\n(\n*\n,\n \n(\nreq\n,\n \nres\n)\n \n=\n \n{\n\n  \nres\n.\nrender\n(\njoin\n(\nDIST_FOLDER\n,\n \nbrowser\n,\n \nindex.html\n),\n \n{\n \nreq\n \n});\n\n\n});\n\n\n\n// Start up the Node server\n\n\napp\n.\nlisten\n(\nPORT\n,\n \n()\n \n=\n \n{\n\n  \nconsole\n.\nlog\n(\n`Node server listening on http://localhost:\n${\nPORT\n}\n`\n);\n\n\n});\n\n\n\n\n\nStep 5: Setup a webpack config to handle this Node server.ts file and serve your application!\n\n\nNow that we have our Node Express server setup, we need to pack it and serve it!\n\n\nCreate a file named \nwebpack.server.config.js\n at the ROOT of your application.\n\n\n\n\nThis file basically takes that server.ts file, and takes it and compiles it and every dependency it has into \ndist/server.js\n.\n\n\n\n\n./webpack.server.config.js (root project level)\n\n\nconst\n \npath\n \n=\n \nrequire\n(\npath\n);\n\n\nconst\n \nwebpack\n \n=\n \nrequire\n(\nwebpack\n);\n\n\n\nmodule\n.exports\n \n=\n \n{\n\n  \nentry\n:\n \n{\n  \nserver\n:\n \n./server.ts\n \n},\n\n  \nresolve\n:\n \n{\n \nextensions\n:\n \n[\n.js\n,\n \n.ts\n]\n \n},\n\n  \ntarget\n:\n \nnode\n,\n\n  \n// this makes sure we include node_modules and other 3rd party libraries\n\n  \nexternals\n:\n \n[\n/(node_modules|main\\..*\\.js)/\n],\n\n  \noutput\n:\n \n{\n\n    \npath\n: \npath.join\n(\n__dirname\n,\n \ndist\n),\n\n    \nfilename\n:\n \n[name].js\n\n  \n},\n\n  \nmodule\n:\n \n{\n\n    \nrules\n:\n \n[\n\n      \n{\n \ntest\n:\n \n/\\.ts$/\n,\n \nloader\n:\n \nts-loader\n \n}\n\n    \n]\n\n  \n},\n\n  \nplugins\n:\n \n[\n\n    \n// Temporary Fix for issue: https://github.com/angular/angular/issues/11580\n\n    \n// for \nWARNING Critical dependency: the request of a dependency is an expression\n\n    \nnew\n \nwebpack\n.\nContextReplacementPlugin\n(\n\n      \n/(.+)?angular(\\\\|\\/)core(.+)?/\n,\n\n      \npath\n.\njoin\n(\n__dirname\n,\n \nsrc\n),\n \n// location of your src\n\n      \n{}\n \n// a map of your routes\n\n    \n),\n\n    \nnew\n \nwebpack\n.\nContextReplacementPlugin\n(\n\n      \n/(.+)?express(\\\\|\\/)(.+)?/\n,\n\n      \npath\n.\njoin\n(\n__dirname\n,\n \nsrc\n),\n\n      \n{}\n\n    \n)\n\n  \n]\n\n\n}\n\n\n\n\n\nAlmost there!\n\n\nNow let's see what our resulting structure should look like, if we open up our \n/dist/\n folder we should see:\n\n\n/dist/\n   /browser/\n   /server/\n\n\n\n\nTo fire up the application, in your terminal enter\n\n\nnode dist/server.js\n\n\n\n\n:sparkles:\n\n\nNow lets create a few handy scripts to help us do all of this in the future.\n\n\nscripts\n:\n \n{\n\n\n  \n//\n \nThese\n \nwill\n \nbe\n \nyour\n \ncommon\n \nscripts\n\n  \nbuild:ssr\n:\n \nnpm run build:client-and-server-bundles \n npm run webpack:server\n,\n\n  \nserve:ssr\n:\n \nnode dist/server.js\n,\n\n\n  \n//\n \nHelpers\n \nfor\n \nthe\n \nabove\n \nscripts\n\n  \nbuild:client-and-server-bundles\n:\n \nng build --prod \n ng build --prod --app 1 --output-hashing=false\n,\n\n  \nwebpack:server\n:\n \nwebpack --config webpack.server.config.js --progress --colors\n\n\n}\n\n\n\n\n\nIn the future when you want to see a Production build of your app with Universal (locally), you can simply run:\n\n\nnpm run build:ssr \n npm run serve:ssr\n\n\n\n\nEnjoy!\n\n\nOnce again to see a working version of everything, check out the \nuniversal-starter\n.", 
            "title": "\u901a\u7528\u6e32\u67d3"
        }, 
        {
            "location": "/stories/universal-rendering/#angular-universal-integration", 
            "text": "The Angular CLI supports generation of a Universal build for your application. This is a CommonJS-formatted bundle which can be  require() 'd into a Node application (for example, an Express server) and used with  @angular/platform-server 's APIs to prerender your application.", 
            "title": "Angular Universal Integration"
        }, 
        {
            "location": "/stories/universal-rendering/#example-cli-integration", 
            "text": "Angular Universal-Starter  - Clone the universal-starter for a working example.", 
            "title": "Example CLI Integration:"
        }, 
        {
            "location": "/stories/universal-rendering/#integrating-angular-universal-into-existing-cli-applications", 
            "text": "This story will show you how to set up Universal bundling for an existing  @angular/cli  project in 5 steps.", 
            "title": "Integrating Angular Universal into existing CLI Applications"
        }, 
        {
            "location": "/stories/universal-rendering/#install-dependencies", 
            "text": "Install  @angular/platform-server  into your project. Make sure you use the same version as the other  @angular  packages in your project.   You'll also need ts-loader (for your webpack build we'll show later) and @nguniversal/module-map-ngfactory-loader, as it's used to handle lazy-loading in the context of a server-render. (by loading the chunks right away)   $ npm install --save @angular/platform-server @nguniversal/module-map-ngfactory-loader ts-loader", 
            "title": "Install Dependencies"
        }, 
        {
            "location": "/stories/universal-rendering/#step-1-prepare-your-app-for-universal-rendering", 
            "text": "The first thing you need to do is make your  AppModule  compatible with Universal by adding  .withServerTransition()  and an application ID to your  BrowserModule  import:", 
            "title": "Step 1: Prepare your App for Universal rendering"
        }, 
        {
            "location": "/stories/universal-rendering/#srcappappmodulets", 
            "text": "@ NgModule ({ \n   bootstrap :   [ AppComponent ], \n   imports :   [ \n     // Add .withServerTransition() to support Universal rendering. \n     // The application ID can be any identifier which is unique on \n     // the page. \n     BrowserModule . withServerTransition ({ appId :   my-app }), \n     ... \n   ],  })  export   class   AppModule   {}   Next, create a module specifically for your application when running on the server. It's recommended to call this module  AppServerModule .  This example places it alongside  app.module.ts  in a file named  app.server.module.ts :", 
            "title": "src/app/app.module.ts:"
        }, 
        {
            "location": "/stories/universal-rendering/#srcappappservermodulets", 
            "text": "You can see here we're simply Importing everything from AppModule, followed by ServerModule.   One important thing to Note: We need  ModuleMapLoaderModule  to help make Lazy-loaded routes possible during Server-side renders with the Angular-CLI.   import   { NgModule }   from   @angular/core ;  import   { ServerModule }   from   @angular/platform-server ;  import   { ModuleMapLoaderModule }   from   @nguniversal/module-map-ngfactory-loader ;  import   { AppModule }   from   ./app.module ;  import   { AppComponent }   from   ./app.component ;  @NgModule ({ \n   imports :   [ \n     // The AppServerModule should import your AppModule followed \n     // by the ServerModule from @angular/platform-server. \n     AppModule , \n     ServerModule , \n     ModuleMapLoaderModule   //  -- *Important* to have lazy-loaded routes work \n   ], \n   // Since the bootstrapped component is not inherited from your \n   // imported AppModule, it needs to be repeated here. \n   bootstrap :   [ AppComponent ],  })  export   class   AppServerModule   {}", 
            "title": "src/app/app.server.module.ts:"
        }, 
        {
            "location": "/stories/universal-rendering/#step-2-create-a-server-main-file-and-tsconfig-to-build-it", 
            "text": "Create a main file for your Universal bundle. This file only needs to export your  AppServerModule . It can go in  src . This example calls this file  main.server.ts :", 
            "title": "Step 2: Create a server \"main\" file and tsconfig to build it"
        }, 
        {
            "location": "/stories/universal-rendering/#srcmainserverts", 
            "text": "export   {   AppServerModule   }   from   ./app/app.server.module ;   Copy  tsconfig.app.json  to  tsconfig.server.json  and change it to build with a  \"module\"  target of  \"commonjs\" .  Add a section for  \"angularCompilerOptions\"  and set  \"entryModule\"  to your  AppServerModule , specified as a path to the import with a hash ( # ) containing the symbol name. In this example, this would be  app/app.server.module#AppServerModule .", 
            "title": "src/main.server.ts:"
        }, 
        {
            "location": "/stories/universal-rendering/#srctsconfigserverjson", 
            "text": "{ \n   extends :   ../tsconfig.json , \n   compilerOptions :   { \n     outDir :   ../out-tsc/app , \n     baseUrl :   ./ , \n     // Set the module format to  commonjs : \n     module :   commonjs , \n     types :   [] \n   }, \n   exclude :   [ \n     test.ts , \n     **/*.spec.ts \n   ], \n   // Add  angularCompilerOptions  with the AppServerModule you wrote \n   // set as the  entryModule . \n   angularCompilerOptions :   { \n     entryModule :   app/app.server.module#AppServerModule \n   }  }", 
            "title": "src/tsconfig.server.json:"
        }, 
        {
            "location": "/stories/universal-rendering/#step-3-create-a-new-project-in-angular-clijson", 
            "text": "In  .angular-cli.json  there is an array under the key  \"apps\" . Copy the configuration for your client application there, and paste it as a new entry in the array, with an additional key  \"platform\"  set to  \"server\" .  Then, remove the  \"polyfills\"  key - those aren't needed on the server, and adjust  \"main\" , and  \"tsconfig\"  to point to the files you wrote in step 2. Finally, adjust  \"outDir\"  to a new location (this example uses  dist-server ).", 
            "title": "Step 3: Create a new project in .angular-cli.json"
        }, 
        {
            "location": "/stories/universal-rendering/#angular-clijson", 
            "text": "{ \n   ... \n   apps :   [ \n     { \n       // Keep your original application config intact here, this is app 0 \n       // -EXCEPT- for outDir, update it to dist/browser \n       outDir :   dist/browser   //  -- update this \n     }, \n     { \n       // This is your server app. It is app 1. \n       platform :   server , \n       root :   src , \n       // Build to dist/server instead of dist. This prevents \n       // client and server builds from overwriting each other. \n       outDir :   dist/server , \n       assets :   [ \n         assets , \n         favicon.ico \n       ], \n       index :   index.html , \n       // Change the main file to point to your server main. \n       main :   main.server.ts , \n       // Remove polyfills. \n       //  polyfills :  polyfills.ts , \n       test :   test.ts , \n       // Change the tsconfig to point to your server config. \n       tsconfig :   tsconfig.server.json , \n       testTsconfig :   tsconfig.spec.json , \n       prefix :   app , \n       styles :   [ \n         styles.css \n       ], \n       scripts :   [], \n       environmentSource :   environments/environment.ts , \n       environments :   { \n         dev :   environments/environment.ts , \n         prod :   environments/environment.prod.ts \n       } \n     } \n   ], \n   ...  }", 
            "title": ".angular-cli.json:"
        }, 
        {
            "location": "/stories/universal-rendering/#building-the-bundle", 
            "text": "With these steps complete, you should be able to build a server bundle for your application, using the  --app  flag to tell the CLI to build the server bundle, referencing its index of  1  in the  \"apps\"  array in  .angular-cli.json :  # This builds the client application in dist/browser/ \n$ ng build --prod\n... # This builds the server bundle in dist/server/ \n$ ng build --prod --app  1  --output-hashing = false  # outputs: \nDate:  2017 -07-24T22:42:09.739Z\nHash: 9cac7d8e9434007fd8da\nTime: 4933ms\nchunk  { 0 }  main.js  ( main )   9 .49 kB  [ entry ]   [ rendered ] \nchunk  { 1 }  styles.css  ( styles )   0  bytes  [ entry ]   [ rendered ]", 
            "title": "Building the bundle"
        }, 
        {
            "location": "/stories/universal-rendering/#step-4-setting-up-an-express-server-to-run-our-universal-bundles", 
            "text": "Now that we have everything set up to -make- the bundles, how we get everything running?  PlatformServer offers a method called  renderModuleFactory()  that we can use to pass in our AoT'd AppServerModule, to serialize our application, and then we'll be returning that result to the Browser.  app . engine ( html ,   ( _ ,   options ,   callback )   =   { \n   renderModuleFactory ( AppServerModuleNgFactory ,   { \n     // Our index.html \n     document :   template , \n     url :  options.req.url , \n     // DI so that we can get lazy-loading to work differently (since we need it to just instantly render it) \n     extraProviders :   [ \n       provideModuleMap ( LAZY_MODULE_MAP ) \n     ] \n   }). then ( html   =   { \n     callback ( null ,   html ); \n   });  });   You could do this, if you want complete flexibility, or use an express-engine with a few other built in features from  @nguniversal/express-engine  found here.  // It s used as easily as  import   {   ngExpressEngine   }   from   @nguniversal/express-engine ;  app . engine ( html ,   ngExpressEngine ({ \n   bootstrap :  AppServerModuleNgFactory , \n   providers :   [ \n     provideModuleMap ( LAZY_MODULE_MAP ) \n   ]  }));   Below we can see a TypeScript implementation of a -very- simple Express server to fire everything up.   Note: This is a very bare bones Express application, and is just for demonstrations sake. In a real production environment, you'd want to make sure you have other authentication and security things setup here as well. This is just meant just to show the specific things needed that are relevant to Universal itself. The rest is up to you!   At the ROOT level of your project (where package.json / etc are), created a file named:  server.ts", 
            "title": "Step 4: Setting up an Express Server to run our Universal bundles"
        }, 
        {
            "location": "/stories/universal-rendering/#serverts-root-project-level", 
            "text": "// These are important and needed before anything else  import   zone.js/dist/zone-node ;  import   reflect-metadata ;  import   {   renderModuleFactory   }   from   @angular/platform-server ;  import   {   enableProdMode   }   from   @angular/core ;  import   *   as   express   from   express ;  import   {   join   }   from   path ;  import   {   readFileSync   }   from   fs ;  // Faster server renders w/ Prod mode (dev mode never needed)  enableProdMode ();  // Express server  const   app   =   express ();  const   PORT   =   process . env . PORT   ||   4000 ;  const   DIST_FOLDER   =   join ( process . cwd (),   dist );  // Our index.html we ll use as our template  const   template   =   readFileSync ( join ( DIST_FOLDER ,   browser ,   index.html )). toString ();  // * NOTE :: leave this as require() since this file is built Dynamically from webpack  const   {   AppServerModuleNgFactory ,   LAZY_MODULE_MAP   }   =   require ( ./dist/server/main.bundle );  const   {   provideModuleMap   }   =   require ( @nguniversal/module-map-ngfactory-loader );  app . engine ( html ,   ( _ ,   options ,   callback )   =   { \n   renderModuleFactory ( AppServerModuleNgFactory ,   { \n     // Our index.html \n     document :   template , \n     url :  options.req.url , \n     // DI so that we can get lazy-loading to work differently (since we need it to just instantly render it) \n     extraProviders :   [ \n       provideModuleMap ( LAZY_MODULE_MAP ) \n     ] \n   }). then ( html   =   { \n     callback ( null ,   html ); \n   });  });  app . set ( view engine ,   html );  app . set ( views ,   join ( DIST_FOLDER ,   browser ));  // Server static files from /browser  app . get ( *.* ,   express . static ( join ( DIST_FOLDER ,   browser )));  // All regular routes use the Universal engine  app . get ( * ,   ( req ,   res )   =   { \n   res . render ( join ( DIST_FOLDER ,   browser ,   index.html ),   {   req   });  });  // Start up the Node server  app . listen ( PORT ,   ()   =   { \n   console . log ( `Node server listening on http://localhost: ${ PORT } ` );  });", 
            "title": "./server.ts (root project level)"
        }, 
        {
            "location": "/stories/universal-rendering/#step-5-setup-a-webpack-config-to-handle-this-node-serverts-file-and-serve-your-application", 
            "text": "Now that we have our Node Express server setup, we need to pack it and serve it!  Create a file named  webpack.server.config.js  at the ROOT of your application.   This file basically takes that server.ts file, and takes it and compiles it and every dependency it has into  dist/server.js .", 
            "title": "Step 5: Setup a webpack config to handle this Node server.ts file and serve your application!"
        }, 
        {
            "location": "/stories/universal-rendering/#webpackserverconfigjs-root-project-level", 
            "text": "const   path   =   require ( path );  const   webpack   =   require ( webpack );  module .exports   =   { \n   entry :   {    server :   ./server.ts   }, \n   resolve :   {   extensions :   [ .js ,   .ts ]   }, \n   target :   node , \n   // this makes sure we include node_modules and other 3rd party libraries \n   externals :   [ /(node_modules|main\\..*\\.js)/ ], \n   output :   { \n     path :  path.join ( __dirname ,   dist ), \n     filename :   [name].js \n   }, \n   module :   { \n     rules :   [ \n       {   test :   /\\.ts$/ ,   loader :   ts-loader   } \n     ] \n   }, \n   plugins :   [ \n     // Temporary Fix for issue: https://github.com/angular/angular/issues/11580 \n     // for  WARNING Critical dependency: the request of a dependency is an expression \n     new   webpack . ContextReplacementPlugin ( \n       /(.+)?angular(\\\\|\\/)core(.+)?/ , \n       path . join ( __dirname ,   src ),   // location of your src \n       {}   // a map of your routes \n     ), \n     new   webpack . ContextReplacementPlugin ( \n       /(.+)?express(\\\\|\\/)(.+)?/ , \n       path . join ( __dirname ,   src ), \n       {} \n     ) \n   ]  }   Almost there!  Now let's see what our resulting structure should look like, if we open up our  /dist/  folder we should see:  /dist/\n   /browser/\n   /server/  To fire up the application, in your terminal enter  node dist/server.js  :sparkles:  Now lets create a few handy scripts to help us do all of this in the future.  scripts :   { \n\n   //   These   will   be   your   common   scripts \n   build:ssr :   npm run build:client-and-server-bundles   npm run webpack:server , \n   serve:ssr :   node dist/server.js , \n\n   //   Helpers   for   the   above   scripts \n   build:client-and-server-bundles :   ng build --prod   ng build --prod --app 1 --output-hashing=false , \n   webpack:server :   webpack --config webpack.server.config.js --progress --colors  }   In the future when you want to see a Production build of your app with Universal (locally), you can simply run:  npm run build:ssr   npm run serve:ssr  Enjoy!  Once again to see a working version of everything, check out the  universal-starter .", 
            "title": "./webpack.server.config.js (root project level)"
        }, 
        {
            "location": "/stories/multiple-apps/", 
            "text": "Multiple Apps integration\n\n\nAngular CLI supports multiple applications within one project.\nYou use the \napps\n array in \n.angular-cli.json\n to list files and folders you want to use for different apps.\n\n\nBy default one app is created when then new project is created and \napps\n array looks like:\n\napps\n: [\n  {\n    \nroot\n: \nsrc\n,\n    ...\n    \nmain\n: \nmain.ts\n,\n    \npolyfills\n: \npolyfills.ts\n,\n    \ntest\n: \ntest.ts\n,\n    \ntsconfig\n: \ntsconfig.app.json\n,\n    \ntestTsconfig\n: \ntsconfig.spec.json\n,\n    \nprefix\n: \napp\n,\n    ...\n  }\n],\n\n\n\nTo create another app you can copy the app object and then change the values for the options you want to change. eg. If I want to create another app with different \nmain\n, \npolyfills\n, \ntest\n and \nprefix\n and keep other configurations such as \nassets\n, \nstyles\n, \nenvironment\n etc. same. I can add it to apps array as below.\n\napps\n: [\n  {\n    \nroot\n: \nsrc\n,\n    ...\n    \nmain\n: \nmain.ts\n,\n    \npolyfills\n: \npolyfills.ts\n,\n    \ntest\n: \ntest.ts\n,\n    \ntsconfig\n: \ntsconfig.app.json\n,\n    \ntestTsconfig\n: \ntsconfig.spec.json\n,\n    \nprefix\n: \napp\n,\n    ...\n  },\n  {\n    \nroot\n: \nsrc\n,\n    ...\n    \nmain\n: \nmain2.ts\n,\n    \npolyfills\n: \npolyfills2.ts\n,\n    \ntest\n: \ntest2.ts\n,\n    \ntsconfig\n: \ntsconfig.app.json\n,\n    \ntestTsconfig\n: \ntsconfig.spec.json\n,\n    \nprefix\n: \napp2\n,\n    ...\n  }  \n],\n\n\nNow we can \nserve\n, \nbuild\n etc. both the apps by passing the app index with the commands. By default, it will pick the first app only.\n\n\nTo serve the first app: \nng serve --app=0\n or \nng serve --app 0\n\n\nTo serve the second app: \nng serve --app=1\n or \nng serve --app 1\n\n\nYou can also add the \nname\n property to the app object in \napps\n array and then pass it to commands to distinguish between different applications.\n\napps\n: [\n  {\n    \nname\n: \napp1\n,\n    \nroot\n: \nsrc\n,\n    \noutDir\n: \ndist\n,\n....\n\n\nTo serve application by name \nng serve --app=app1\n or \nng serve --app app1\n.", 
            "title": "\u591a\u5e94\u7528"
        }, 
        {
            "location": "/stories/multiple-apps/#multiple-apps-integration", 
            "text": "Angular CLI supports multiple applications within one project.\nYou use the  apps  array in  .angular-cli.json  to list files and folders you want to use for different apps.  By default one app is created when then new project is created and  apps  array looks like: apps : [\n  {\n     root :  src ,\n    ...\n     main :  main.ts ,\n     polyfills :  polyfills.ts ,\n     test :  test.ts ,\n     tsconfig :  tsconfig.app.json ,\n     testTsconfig :  tsconfig.spec.json ,\n     prefix :  app ,\n    ...\n  }\n],  To create another app you can copy the app object and then change the values for the options you want to change. eg. If I want to create another app with different  main ,  polyfills ,  test  and  prefix  and keep other configurations such as  assets ,  styles ,  environment  etc. same. I can add it to apps array as below. apps : [\n  {\n     root :  src ,\n    ...\n     main :  main.ts ,\n     polyfills :  polyfills.ts ,\n     test :  test.ts ,\n     tsconfig :  tsconfig.app.json ,\n     testTsconfig :  tsconfig.spec.json ,\n     prefix :  app ,\n    ...\n  },\n  {\n     root :  src ,\n    ...\n     main :  main2.ts ,\n     polyfills :  polyfills2.ts ,\n     test :  test2.ts ,\n     tsconfig :  tsconfig.app.json ,\n     testTsconfig :  tsconfig.spec.json ,\n     prefix :  app2 ,\n    ...\n  }  \n], \nNow we can  serve ,  build  etc. both the apps by passing the app index with the commands. By default, it will pick the first app only.  To serve the first app:  ng serve --app=0  or  ng serve --app 0  To serve the second app:  ng serve --app=1  or  ng serve --app 1  You can also add the  name  property to the app object in  apps  array and then pass it to commands to distinguish between different applications. apps : [\n  {\n     name :  app1 ,\n     root :  src ,\n     outDir :  dist ,\n.... \nTo serve application by name  ng serve --app=app1  or  ng serve --app app1 .", 
            "title": "Multiple Apps integration"
        }, 
        {
            "location": "/stories/proxy/", 
            "text": "Proxy To Backend\n\n\nUsing the \nproxying support\n in webpack's dev server we can highjack certain URLs and send them to a backend server.\nWe do this by passing a file to \n--proxy-config\n\n\nSay we have a server running on \nhttp://localhost:3000/api\n and we want all calls to \nhttp://localhost:4200/api\n to go to that server.\n\n\nWe create a file next to our project's \npackage.json\n called \nproxy.conf.json\n with the content\n\n\n{\n\n  \n/api\n:\n \n{\n\n    \ntarget\n:\n \nhttp://localhost:3000\n,\n\n    \nsecure\n:\n \nfalse\n\n  \n}\n\n\n}\n\n\n\n\n\nYou can read more about what options are available \nhere\n.\n\n\nWe can then edit the \npackage.json\n file's start script to be\n\n\nstart\n:\n \nng serve --proxy-config proxy.conf.json\n,\n\n\n\n\n\nNow in order to run our dev server with our proxy config, we can simply call \nnpm start\n.\n\n\nAfter each edit to the proxy.conf.json file remember to relaunch the \nnpm start\n process to make your changes effective.\n\n\nRewriting the URL path\n\n\nOne option that comes up a lot is rewriting the URL path for the proxy. This is supported by the \npathRewrite\n option.\n\n\nSay we have a server running on \nhttp://localhost:3000\n and we want all calls to \nhttp://localhost:4200/api\n to go to that server.\n\n\nIn our \nproxy.conf.json\n file, we add the following content\n\n\n{\n\n  \n/api\n:\n \n{\n\n    \ntarget\n:\n \nhttp://localhost:3000\n,\n\n    \nsecure\n:\n \nfalse\n,\n\n    \npathRewrite\n:\n \n{\n\n      \n^/api\n:\n \n\n    \n}\n\n  \n}\n\n\n}\n\n\n\n\n\nIf you need to access a backend that is not on localhost, you will need to add the \nchangeOrigin\n option as follows:\n\n\n{\n\n  \n/api\n:\n \n{\n\n    \ntarget\n:\n \nhttp://npmjs.org\n,\n\n    \nsecure\n:\n \nfalse\n,\n\n    \npathRewrite\n:\n \n{\n\n      \n^/api\n:\n \n\n    \n},\n\n    \nchangeOrigin\n:\n \ntrue\n\n  \n}\n\n\n}\n\n\n\n\n\nTo help debug whether or not your proxy is working properly, you can also add the \nlogLevel\n option as follows:\n\n\n{\n\n  \n/api\n:\n \n{\n\n    \ntarget\n:\n \nhttp://localhost:3000\n,\n\n    \nsecure\n:\n \nfalse\n,\n\n    \npathRewrite\n:\n \n{\n\n      \n^/api\n:\n \n\n    \n},\n\n    \nlogLevel\n:\n \ndebug\n\n  \n}\n\n\n}\n\n\n\n\n\nPossible options for \nlogLevel\n include \ndebug\n, \ninfo\n, \nwarn\n, \nerror\n, and \nsilent\n (default is \ninfo\n)\n\n\nMultiple entries\n\n\nIf you need to proxy multiple entries to the same target define the configuration in \nproxy.conf.js\n instead of \nproxy.conf.json\n e.g.\n\n\nconst\n \nPROXY_CONFIG\n \n=\n \n[\n\n    \n{\n\n        \ncontext\n:\n \n[\n\n            \n/my\n,\n\n            \n/many\n,\n\n            \n/endpoints\n,\n\n            \n/i\n,\n\n            \n/need\n,\n\n            \n/to\n,\n\n            \n/proxy\n\n        \n],\n\n        \ntarget\n:\n \nhttp://localhost:3000\n,\n\n        \nsecure\n:\n \nfalse\n\n    \n}\n\n\n]\n\n\n\nmodule\n.\nexports\n \n=\n \nPROXY_CONFIG\n;\n\n\n\n\n\nand make sure to point to the right file\n\n\nstart\n:\n \nng serve --proxy-config proxy.conf.js\n,\n\n\n\n\n\nBypass the Proxy\n\n\nIf you need to optionally bypass the proxy, or dynamically change the request before it's sent,  define the configuration in proxy.conf.js e.g.\n\n\nconst\n \nPROXY_CONFIG\n \n=\n \n{\n\n    \n/api/proxy\n:\n \n{\n\n        \ntarget\n:\n \nhttp://localhost:3000\n,\n\n        \nsecure\n:\n \nfalse\n,\n\n        \nbypass\n:\n \nfunction\n \n(\nreq\n,\n \nres\n,\n \nproxyOptions\n)\n \n{\n\n            \nif\n \n(\nreq\n.\nheaders\n.\naccept\n.\nindexOf\n(\nhtml\n)\n \n!==\n \n-\n1\n)\n \n{\n\n                \nconsole\n.\nlog\n(\nSkipping proxy for browser request.\n);\n\n                \nreturn\n \n/index.html\n;\n\n            \n}\n\n            \nreq\n.\nheaders\n[\nX-Custom-Header\n]\n \n=\n \nyes\n;\n\n        \n}\n\n    \n}\n\n\n}\n\n\n\nmodule\n.\nexports\n \n=\n \nPROXY_CONFIG\n;\n\n\n\n\n\nagain, make sure to point to the right file\n\n\nstart\n:\n \nng serve --proxy-config proxy.conf.js\n,", 
            "title": "\u4ee3\u7406"
        }, 
        {
            "location": "/stories/proxy/#proxy-to-backend", 
            "text": "Using the  proxying support  in webpack's dev server we can highjack certain URLs and send them to a backend server.\nWe do this by passing a file to  --proxy-config  Say we have a server running on  http://localhost:3000/api  and we want all calls to  http://localhost:4200/api  to go to that server.  We create a file next to our project's  package.json  called  proxy.conf.json  with the content  { \n   /api :   { \n     target :   http://localhost:3000 , \n     secure :   false \n   }  }   You can read more about what options are available  here .  We can then edit the  package.json  file's start script to be  start :   ng serve --proxy-config proxy.conf.json ,   Now in order to run our dev server with our proxy config, we can simply call  npm start .  After each edit to the proxy.conf.json file remember to relaunch the  npm start  process to make your changes effective.", 
            "title": "Proxy To Backend"
        }, 
        {
            "location": "/stories/proxy/#rewriting-the-url-path", 
            "text": "One option that comes up a lot is rewriting the URL path for the proxy. This is supported by the  pathRewrite  option.  Say we have a server running on  http://localhost:3000  and we want all calls to  http://localhost:4200/api  to go to that server.  In our  proxy.conf.json  file, we add the following content  { \n   /api :   { \n     target :   http://localhost:3000 , \n     secure :   false , \n     pathRewrite :   { \n       ^/api :   \n     } \n   }  }   If you need to access a backend that is not on localhost, you will need to add the  changeOrigin  option as follows:  { \n   /api :   { \n     target :   http://npmjs.org , \n     secure :   false , \n     pathRewrite :   { \n       ^/api :   \n     }, \n     changeOrigin :   true \n   }  }   To help debug whether or not your proxy is working properly, you can also add the  logLevel  option as follows:  { \n   /api :   { \n     target :   http://localhost:3000 , \n     secure :   false , \n     pathRewrite :   { \n       ^/api :   \n     }, \n     logLevel :   debug \n   }  }   Possible options for  logLevel  include  debug ,  info ,  warn ,  error , and  silent  (default is  info )", 
            "title": "Rewriting the URL path"
        }, 
        {
            "location": "/stories/proxy/#multiple-entries", 
            "text": "If you need to proxy multiple entries to the same target define the configuration in  proxy.conf.js  instead of  proxy.conf.json  e.g.  const   PROXY_CONFIG   =   [ \n     { \n         context :   [ \n             /my , \n             /many , \n             /endpoints , \n             /i , \n             /need , \n             /to , \n             /proxy \n         ], \n         target :   http://localhost:3000 , \n         secure :   false \n     }  ]  module . exports   =   PROXY_CONFIG ;   and make sure to point to the right file  start :   ng serve --proxy-config proxy.conf.js ,", 
            "title": "Multiple entries"
        }, 
        {
            "location": "/stories/proxy/#bypass-the-proxy", 
            "text": "If you need to optionally bypass the proxy, or dynamically change the request before it's sent,  define the configuration in proxy.conf.js e.g.  const   PROXY_CONFIG   =   { \n     /api/proxy :   { \n         target :   http://localhost:3000 , \n         secure :   false , \n         bypass :   function   ( req ,   res ,   proxyOptions )   { \n             if   ( req . headers . accept . indexOf ( html )   !==   - 1 )   { \n                 console . log ( Skipping proxy for browser request. ); \n                 return   /index.html ; \n             } \n             req . headers [ X-Custom-Header ]   =   yes ; \n         } \n     }  }  module . exports   =   PROXY_CONFIG ;   again, make sure to point to the right file  start :   ng serve --proxy-config proxy.conf.js ,", 
            "title": "Bypass the Proxy"
        }, 
        {
            "location": "/stories/routing/", 
            "text": "Generating a route\n\n\nThe CLI supports routing in several ways:\n\n\n\n\n\n\nWe include the \n@angular/router\n NPM package when creating or initializing a project.\n\n\n\n\n\n\nWhen you generate a module, you can use the \n--routing\n option like \nng g module my-module --routing\n  to create a separate file \nmy-module-routing.module.ts\n to store the module routes.\n\n\n\n\n\n\nThe file includes an empty \nRoutes\n object that you can fill with routes to different components and/or modules.\n\n\n\n\nYou can use the \n--routing\n option with \nng new\n to create a \napp-routing.module.ts\n file when you create or initialize a project.", 
            "title": "\u8def\u7531"
        }, 
        {
            "location": "/stories/routing/#generating-a-route", 
            "text": "The CLI supports routing in several ways:    We include the  @angular/router  NPM package when creating or initializing a project.    When you generate a module, you can use the  --routing  option like  ng g module my-module --routing   to create a separate file  my-module-routing.module.ts  to store the module routes.    The file includes an empty  Routes  object that you can fill with routes to different components and/or modules.   You can use the  --routing  option with  ng new  to create a  app-routing.module.ts  file when you create or initialize a project.", 
            "title": "Generating a route"
        }, 
        {
            "location": "/stories/using-corporate-proxy/", 
            "text": "Using corporate proxy\n\n\nIf you work behind a corporate proxy, the regular \nbackend proxy\n configuration will not work if you try to proxy calls to any URL outside your local network.\n\n\nIn this case, you can configure the backend proxy to redirect calls through your corporate proxy using an agent:\n\n\nnpm install --save-dev https-proxy-agent\n\n\n\n\nThen instead of using a \nproxy.conf.json\n file, we create a file called \nproxy.conf.js\n with the content\n\n\nvar\n \nHttpsProxyAgent\n \n=\n \nrequire\n(\nhttps-proxy-agent\n);\n\n\nvar\n \nproxyConfig\n \n=\n \n[{\n\n  \ncontext\n:\n \n/api\n,\n\n  \ntarget\n:\n \nhttp://your-remote-server.com:3000\n,\n\n  \nsecure\n:\n \nfalse\n\n\n}];\n\n\n\nfunction\n \nsetupForCorporateProxy\n(\nproxyConfig\n)\n \n{\n\n  \nvar\n \nproxyServer\n \n=\n \nprocess\n.\nenv\n.\nhttp_proxy\n \n||\n \nprocess\n.\nenv\n.\nHTTP_PROXY\n;\n\n  \nif\n \n(\nproxyServer\n)\n \n{\n\n    \nvar\n \nagent\n \n=\n \nnew\n \nHttpsProxyAgent\n(\nproxyServer\n);\n\n    \nconsole\n.\nlog\n(\nUsing corporate proxy server: \n \n+\n \nproxyServer\n);\n\n    \nproxyConfig\n.\nforEach\n(\nfunction\n(\nentry\n)\n \n{\n\n      \nentry\n.\nagent\n \n=\n \nagent\n;\n\n    \n});\n\n  \n}\n\n  \nreturn\n \nproxyConfig\n;\n\n\n}\n\n\n\nmodule\n.\nexports\n \n=\n \nsetupForCorporateProxy\n(\nproxyConfig\n);\n\n\n\n\n\nand edit the \npackage.json\n file's start script accordingly\n\n\nstart\n:\n \nng serve --proxy-config proxy.conf.js\n,\n\n\n\n\n\nThis way if you have a \nhttp_proxy\n or \nHTTP_PROXY\n environment variable defined, an agent will automatically be added to pass calls through your corporate proxy when running \nnpm start\n.", 
            "title": "\u4f7f\u7528\u516c\u53f8\u4ee3\u7406"
        }, 
        {
            "location": "/stories/using-corporate-proxy/#using-corporate-proxy", 
            "text": "If you work behind a corporate proxy, the regular  backend proxy  configuration will not work if you try to proxy calls to any URL outside your local network.  In this case, you can configure the backend proxy to redirect calls through your corporate proxy using an agent:  npm install --save-dev https-proxy-agent  Then instead of using a  proxy.conf.json  file, we create a file called  proxy.conf.js  with the content  var   HttpsProxyAgent   =   require ( https-proxy-agent );  var   proxyConfig   =   [{ \n   context :   /api , \n   target :   http://your-remote-server.com:3000 , \n   secure :   false  }];  function   setupForCorporateProxy ( proxyConfig )   { \n   var   proxyServer   =   process . env . http_proxy   ||   process . env . HTTP_PROXY ; \n   if   ( proxyServer )   { \n     var   agent   =   new   HttpsProxyAgent ( proxyServer ); \n     console . log ( Using corporate proxy server:    +   proxyServer ); \n     proxyConfig . forEach ( function ( entry )   { \n       entry . agent   =   agent ; \n     }); \n   } \n   return   proxyConfig ;  }  module . exports   =   setupForCorporateProxy ( proxyConfig );   and edit the  package.json  file's start script accordingly  start :   ng serve --proxy-config proxy.conf.js ,   This way if you have a  http_proxy  or  HTTP_PROXY  environment variable defined, an agent will automatically be added to pass calls through your corporate proxy when running  npm start .", 
            "title": "Using corporate proxy"
        }, 
        {
            "location": "/stories/internationalization/", 
            "text": "Internationalization (i18n)\n\n\nIf you are working on internationalization, the CLI can help you with the following steps:\n- extraction\n- serve\n- build\n\n\nThe first thing that you have to do is to setup your application to use i18n.\nTo do that you can follow \nthe cookbook on angular.io\n.\n\n\nExtraction\n\n\nWhen your app is ready, you can extract the strings to translate from your templates with the\n\nng xi18n\n command.\n\n\nBy default it will create a file named \nmessages.xlf\n in your \nsrc\n folder.\nYou can use \nparameters from the xi18n command\n to change the format,\nthe name, the location and the source locale of the extracted file.\n\n\nFor example to create a file in the \nsrc/locale\n folder you would use:\n\nng xi18n --output-path src/locale\n\n\n\nServe\n\n\nNow that you have generated a messages bundle source file, you can translate it.\nLet's say that your file containing the french translations is named \nmessages.fr.xlf\n\nand is located in the \nsrc/locale\n folder.\nIf you want to use it when you serve your application you can use the 4 following commands:\n- \n--i18n-file\n Localization file to use for i18n.\n- \n--i18n-format\n Format of the localization file specified with --i18n-file.\n- \n--locale\n Locale to use for i18n.\n- \n--missing-translation\n Defines the strategy to use for missing i18n translations.\n\n\nIn our case we can load the french translations with the following command:\n\nng serve --aot --locale fr --i18n-format xlf --i18n-file src/locale/messages.fr.xlf --missing-translation error\n\n\n\nOur application is exactly the same but the \nLOCALE_ID\n has been provided with \"fr\",\n\nTRANSLATIONS_FORMAT\n with \"xlf\" and \nTRANSLATIONS\n with the content of \nmessages.fr.xlf\n.\nAll the strings flagged for i18n have been replaced with their french translations.\n\n\nNote: this only works for AOT, if you want to use i18n in JIT you will have to update\nyour bootstrap file yourself.\n\n\nBuild\n\n\nTo build your application with a specific locale you can use the exact same commands\nthat you used for \nserve\n:\n\nng build --aot --locale fr --i18n-format xlf --i18n-file src/locale/messages.fr.xlf --missing-translation error\n\n\n\nWhen you build your application for a specific locale, it is probably a good idea to change\nthe output path with the command \n--output-path\n in order to save the files to a different location.\n\n\nng build --aot --output-path dist/fr --locale fr --i18n-format xlf --i18n-file src/locale/messages.fr.xlf --missing-translation error\n\n\n\n\nIf you end up serving this specific version from a subdirectory, you can also change\nthe base url used by your application with the command \n--base-href\n.\n\n\nFor example if the french version of your application is served from https://myapp.com/fr/\nthen you would build the french version like this:\n\n\nng build --aot --output-path dist/fr --base-href /fr/ --locale fr --i18n-format xlf --i18n-file src/locale/messages.fr.xlf --missing-translation error\n\n\n\n\nIf you need more details about how to create scripts to generate the app in multiple\nlanguages and how to setup Apache 2 to serve them from different subdirectories,\nyou can read \nthis great tutorial\n\nby Philippe Martin.", 
            "title": "\u56fd\u9645\u5316"
        }, 
        {
            "location": "/stories/internationalization/#internationalization-i18n", 
            "text": "If you are working on internationalization, the CLI can help you with the following steps:\n- extraction\n- serve\n- build  The first thing that you have to do is to setup your application to use i18n.\nTo do that you can follow  the cookbook on angular.io .", 
            "title": "Internationalization (i18n)"
        }, 
        {
            "location": "/stories/internationalization/#extraction", 
            "text": "When your app is ready, you can extract the strings to translate from your templates with the ng xi18n  command.  By default it will create a file named  messages.xlf  in your  src  folder.\nYou can use  parameters from the xi18n command  to change the format,\nthe name, the location and the source locale of the extracted file.  For example to create a file in the  src/locale  folder you would use: ng xi18n --output-path src/locale", 
            "title": "Extraction"
        }, 
        {
            "location": "/stories/internationalization/#serve", 
            "text": "Now that you have generated a messages bundle source file, you can translate it.\nLet's say that your file containing the french translations is named  messages.fr.xlf \nand is located in the  src/locale  folder.\nIf you want to use it when you serve your application you can use the 4 following commands:\n-  --i18n-file  Localization file to use for i18n.\n-  --i18n-format  Format of the localization file specified with --i18n-file.\n-  --locale  Locale to use for i18n.\n-  --missing-translation  Defines the strategy to use for missing i18n translations.  In our case we can load the french translations with the following command: ng serve --aot --locale fr --i18n-format xlf --i18n-file src/locale/messages.fr.xlf --missing-translation error  Our application is exactly the same but the  LOCALE_ID  has been provided with \"fr\", TRANSLATIONS_FORMAT  with \"xlf\" and  TRANSLATIONS  with the content of  messages.fr.xlf .\nAll the strings flagged for i18n have been replaced with their french translations.  Note: this only works for AOT, if you want to use i18n in JIT you will have to update\nyour bootstrap file yourself.", 
            "title": "Serve"
        }, 
        {
            "location": "/stories/internationalization/#build", 
            "text": "To build your application with a specific locale you can use the exact same commands\nthat you used for  serve : ng build --aot --locale fr --i18n-format xlf --i18n-file src/locale/messages.fr.xlf --missing-translation error  When you build your application for a specific locale, it is probably a good idea to change\nthe output path with the command  --output-path  in order to save the files to a different location.  ng build --aot --output-path dist/fr --locale fr --i18n-format xlf --i18n-file src/locale/messages.fr.xlf --missing-translation error  If you end up serving this specific version from a subdirectory, you can also change\nthe base url used by your application with the command  --base-href .  For example if the french version of your application is served from https://myapp.com/fr/\nthen you would build the french version like this:  ng build --aot --output-path dist/fr --base-href /fr/ --locale fr --i18n-format xlf --i18n-file src/locale/messages.fr.xlf --missing-translation error  If you need more details about how to create scripts to generate the app in multiple\nlanguages and how to setup Apache 2 to serve them from different subdirectories,\nyou can read  this great tutorial \nby Philippe Martin.", 
            "title": "Build"
        }, 
        {
            "location": "/stories/", 
            "text": "\u63cf\u8ff0\u5982\u4f55\u4f7f\u7528CLI\u505a\u66f4\u591a\u7684\u6545\u4e8b\n\n\n\n\n1.0\u66f4\u65b0\n\n\nAsset Configuration\n\n\nAutocompletion\n\n\nConfigure Hot Module Replacement\n\n\nCSS Preprocessors\n\n\nGlobal Lib\n\n\nGlobal Scripts\n\n\nGlobal Styles\n\n\nAngular Flex Layout\n\n\nAngular Material\n\n\nAngularFire\n\n\nBootstrap\n\n\nBudgets\n\n\nFont Awesome\n\n\nMoving Into the CLI\n\n\nMoving Out of the CLI\n\n\nProxy\n\n\nRouting\n\n\n3rd Party Lib\n\n\nCorporate Proxy\n\n\nInternationalization (i18n)\n\n\nServe from Disk\n\n\nCode Coverage\n\n\nApplication Environments\n\n\nAutoprefixer Configuration\n\n\nDeploy to GitHub Pages\n\n\nLinked Library\n\n\nMultiple apps\n\n\nContinuous Integration\n\n\nUniversal Rendering", 
            "title": "\u6545\u4e8b"
        }, 
        {
            "location": "/stories/#cli", 
            "text": "1.0\u66f4\u65b0  Asset Configuration  Autocompletion  Configure Hot Module Replacement  CSS Preprocessors  Global Lib  Global Scripts  Global Styles  Angular Flex Layout  Angular Material  AngularFire  Bootstrap  Budgets  Font Awesome  Moving Into the CLI  Moving Out of the CLI  Proxy  Routing  3rd Party Lib  Corporate Proxy  Internationalization (i18n)  Serve from Disk  Code Coverage  Application Environments  Autoprefixer Configuration  Deploy to GitHub Pages  Linked Library  Multiple apps  Continuous Integration  Universal Rendering", 
            "title": "\u63cf\u8ff0\u5982\u4f55\u4f7f\u7528CLI\u505a\u66f4\u591a\u7684\u6545\u4e8b"
        }, 
        {
            "location": "/stories/1.0-update/", 
            "text": "Angular CLI\u8fc1\u79fb\u6307\u5357\n\n\nIn this migration guide we'll be looking at some of the major changes to CLI projects in the last two months.\n\n\nMost of these changes were not breaking changes and your project should work fine without them.\n\n\nBut if you've been waiting for the perfect time to update, this is it!\nAlong with major rebuild speed increases, we've been busy adding a lot of features.\n\n\nDocumentation has also completely moved to \nthe wiki\n.\nThe new \nStories\n section covers common usage scenarios, so be sure to have a look!\n\n\nBelow are the changes between a project generated two months ago, with \n1.0.0-beta.24\n and a \n1.0.0\n project.\nIf you kept your project up to date you might have a lot of these already.\n\n\nYou can find more details about changes between versions in \nthe releases tab on GitHub\n.\n\n\nIf you prefer, you can also generate a new project in a separate folder using \nng new upgrade-project --skip-install\n and compare the differences.\n\n\n@angular/cli\n\n\nAngular CLI can now be found on NPM under \n@angular/cli\n instead of \nangular-cli\n, and upgrading is a simple 3 step process:\n\n\n\n\nUninstall old version\n\n\nUpdate node/npm if necessary\n\n\nInstall new version\n\n\n\n\n1. \u5378\u8f7d\u65e7\u7248\u672c\n\n\nIf you're using Angular CLI \nbeta.28\n or less, you need to uninstall the \nangular-cli\n packages:\n\n\nnpm uninstall -g angular-cli          \n# Remove global package\n\nnpm uninstall --save-dev angular-cli  \n# Remove from package.json\n\n\n\n\n\nOtherwise, uninstall the  \n@angular/cli\n packages:\n\n\nnpm uninstall -g @angular/cli         \n# Remove global package\n\nnpm uninstall --save-dev @angular/cli \n# Remove from package.json\n\n\n\n\n\nAlso purge the cache and local packages:\n\n\nrm\n \n-\nrf\n \nnode_modules\n \ndist\n \n#\n \nUse\n \nrmdir\n \non\n \nWindows\n\n\nnpm\n \ncache\n \nclean\n\n\n\n\n\nAt this point, you should not have Angular CLI on your system anymore. If invoking Angular CLI at the commandline reveals that it still exists on your system, you will have to manually remove it. See \nManually removing residual Angular CLI\n.\n\n\n2. \u5982\u6709\u5fc5\u8981\uff0c\u66f4\u65b0node / npm\n\n\nAngular CLI now has a minimum requirement of Node 6.9.0 or higher, together with NPM 3 or higher.\n\n\nIf your Node or NPM versions do not meet these requirements, please refer to \nthe documentation\n on how to upgrade.\n\n\n3. \u5b89\u88c5\u65b0\u7248\u672c\n\n\nTo update Angular CLI to a new version, you must update both the global package and your project's local package:\n\n\nnpm install -g @angular/cli@latest          \n# Global package\n\nnpm install --save-dev @angular/cli@latest  \n# Local package\n\nnpm install                                 \n# Restore removed dependencies\n\n\n\n\n\n\u624b\u52a8\u5220\u9664\u5269\u4f59\u7684\u89d2CLI\n\n\nIf you accidentally updated NPM before removing the old Angular CLI, you may find that uninstalling the package using \nnpm uninstall\n is proving fruitless. This \ncould\n be because the global install (and uninstall) path changed between versions of npm from \n/usr/local/lib\n to \n/usr/lib\n, and hence, no longer searches through the old directory. In this case you'll have to remove it manually:\n\n\nrm -rf /usr/local/lib/node_modules/@angular/cli\n\n\nIf the old Angular CLI package \nstill\n persists, you'll need to research how to remove it before proceeding with the upgrade.\n\n\n.angular-cli.json\n\n\nangular-cli.json\n is now \n.angular-cli.json\n, but we still accept the old config file name.\n\n\nA few new properties have changed in it:\n\n\n\u67b6\u6784\n\n\nAdd the \n$schema\n property above project for handy IDE support on your config file:\n\n\n$schema\n:\n \n./node_modules/@angular/cli/lib/config/schema.json\n,\n\n\n\n\n\nPolyfills\n\n\nThere is now a dedicated entry for polyfills (\n#3812\n)\ninside \napps[0].polyfills\n, between \nmain\n and \ntest\n:\n\n\nmain\n:\n \nmain.ts\n,\n\n\npolyfills\n:\n \npolyfills.ts\n,\n\n\ntest\n:\n \ntest.ts\n,\n\n\n\n\n\nAdd it and remove \nimport './polyfills.ts';\n from \nsrc/main.ts\n and \nsrc/test.ts\n.\n\n\nWe also added a lot of descriptive comments to the existing \nsrc/polyfills.ts\n file, explaining\nwhich polyfills are needed for what browsers.\nBe sure to check it out in a new project!\n\n\n\u73af\u5883\n\n\nA new \nenvironmentSource\n entry (\n#4705\n)\nreplaces the previous source entry inside environments.\n\n\nTo migrate angular-cli.json follow the example below:\n\n\nBefore:\n\n\nenvironments\n:\n \n{\n\n  \nsource\n:\n \nenvironments/environment.ts\n,\n\n  \ndev\n:\n \nenvironments/environment.ts\n,\n\n  \nprod\n:\n \nenvironments/environment.prod.ts\n\n\n}\n\n\n\n\n\nAfter:\n\n\nenvironmentSource\n:\n \nenvironments/environment.ts\n,\n\n\nenvironments\n:\n \n{\n\n  \ndev\n:\n \nenvironments/environment.ts\n,\n\n  \nprod\n:\n \nenvironments/environment.prod.ts\n\n\n}\n\n\n\n\n\n\u6389\u6bdb\n\n\nThe CLI now uses the TSLint API (\n#4248\n)\nto lint several TS projects at once.\n\n\nThere is a new \nlint\n entry in \n.angular-cli.json\n between \ne2e\n and \ntest\n where all linting\ntargets are listed:\n\n\ne2e\n:\n \n{\n\n  \nprotractor\n:\n \n{\n\n    \nconfig\n:\n \n./protractor.conf.js\n\n  \n}\n\n\n},\n\n\nlint\n:\n \n[\n\n  \n{\n\n    \nproject\n:\n \nsrc/tsconfig.app.json\n\n  \n},\n\n  \n{\n\n    \nproject\n:\n \nsrc/tsconfig.spec.json\n\n  \n},\n\n  \n{\n\n    \nproject\n:\n \ne2e/tsconfig.e2e.json\n\n  \n}\n\n\n],\n\n\ntest\n:\n \n{\n\n  \nkarma\n:\n \n{\n\n    \nconfig\n:\n \n./karma.conf.js\n\n  \n}\n\n\n},\n\n\n\n\n\nGenerator defaults\n\n\n\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5728\ndefaults\n\u4e2d\u5217\u51fa\u6bcf\u4e2a\u751f\u6210\u5668(\n#4389\n)\u7684\u751f\u6210\u5668\u9ed8\u8ba4\u503c\u3002\n\n\n\u4ee3\u66ff:\n\n\ndefaults\n:\n \n{\n\n  \nstyleExt\n:\n \ncss\n,\n\n  \nprefixInterfaces\n:\n \nfalse\n,\n\n  \ninline\n:\n \n{\n\n    \nstyle\n:\n \nfalse\n,\n\n    \ntemplate\n:\n \nfalse\n\n  \n},\n\n  \nspec\n:\n \n{\n\n    \nclass\n:\n \nfalse\n,\n\n    \ncomponent\n:\n \ntrue\n,\n\n    \ndirective\n:\n \ntrue\n,\n\n    \nmodule\n:\n \nfalse\n,\n\n    \npipe\n:\n \ntrue\n,\n\n    \nservice\n:\n \ntrue\n\n  \n}\n\n\n}\n\n\n\n\n\n\u60a8\u53ef\u4ee5\u5217\u51fa\u6807\u5fd7\uff0c\u56e0\u4e3a\u5b83\u4eec\u51fa\u73b0\u5728\n\u751f\u6210\u5668\u547d\u4ee4\n\u4e2d:\n\n\ndefaults\n:\n \n{\n\n  \nstyleExt\n:\n \ncss\n,\n\n  \ncomponent\n:\n \n{\n\n    \ninlineTemplate\n:\n \nfalse\n,\n\n    \nspec\n:\n \ntrue\n\n  \n}\n\n\n}\n\n\n\n\n\n\u6bcf\u4e2a\u5e94\u7528\u4e00\u4e2atsconfig\n\n\nCLI projects now use one tsconfig per app (\n#4924\n).\n\n\n\n\nsrc/tsconfig.app.json\n: configuration for the Angular app.\n\n\n\n\n{\n\n  \ncompilerOptions\n:\n \n{\n\n    \nsourceMap\n:\n \ntrue\n,\n\n    \ndeclaration\n:\n \nfalse\n,\n\n    \nmoduleResolution\n:\n \nnode\n,\n\n    \nemitDecoratorMetadata\n:\n \ntrue\n,\n\n    \nexperimentalDecorators\n:\n \ntrue\n,\n\n    \ntarget\n:\n \nes5\n,\n\n    \nlib\n:\n \n[\n\n      \nes2017\n,\n\n      \ndom\n\n    \n],\n\n    \noutDir\n:\n \n../out-tsc/app\n,\n\n    \nmodule\n:\n \nes2015\n,\n\n    \nbaseUrl\n:\n \n,\n\n    \ntypes\n:\n \n[]\n\n  \n},\n\n  \nexclude\n:\n \n[\n\n    \ntest.ts\n,\n\n    \n**/*.spec.ts\n\n  \n]\n\n\n}\n\n\n\n\n\n\n\nsrc/tsconfig.spec.json\n: configuration for the unit tests.\n\n\n\n\n{\n\n  \ncompilerOptions\n:\n \n{\n\n    \nsourceMap\n:\n \ntrue\n,\n\n    \ndeclaration\n:\n \nfalse\n,\n\n    \nmoduleResolution\n:\n \nnode\n,\n\n    \nemitDecoratorMetadata\n:\n \ntrue\n,\n\n    \nexperimentalDecorators\n:\n \ntrue\n,\n\n    \nlib\n:\n \n[\n\n      \nes2017\n,\n\n      \ndom\n\n    \n],\n\n    \noutDir\n:\n \n../out-tsc/spec\n,\n\n    \nmodule\n:\n \ncommonjs\n,\n\n    \ntarget\n:\n \nes5\n,\n\n    \nbaseUrl\n:\n \n,\n\n    \ntypes\n:\n \n[\n\n      \njasmine\n,\n\n      \nnode\n\n    \n]\n\n  \n},\n\n  \nfiles\n:\n \n[\n\n    \ntest.ts\n\n  \n],\n\n  \ninclude\n:\n \n[\n\n    \n**/*.spec.ts\n,\n\n    \n**/*.d.ts\n\n  \n]\n\n\n}\n\n\n\n\n\n\n\ne2e/tsconfig.e2e.json\n: configuration for the e2e tests.\n\n\n\n\n{\n\n  \ncompilerOptions\n:\n \n{\n\n    \nsourceMap\n:\n \ntrue\n,\n\n    \ndeclaration\n:\n \nfalse\n,\n\n    \nmoduleResolution\n:\n \nnode\n,\n\n    \nemitDecoratorMetadata\n:\n \ntrue\n,\n\n    \nexperimentalDecorators\n:\n \ntrue\n,\n\n    \nlib\n:\n \n[\n\n      \nes2017\n\n    \n],\n\n    \noutDir\n:\n \n../out-tsc/e2e\n,\n\n    \nmodule\n:\n \ncommonjs\n,\n\n    \ntarget\n:\n \nes5\n,\n\n    \ntypes\n:[\n\n      \njasmine\n,\n\n      \nnode\n\n    \n]\n\n  \n}\n\n\n}\n\n\n\n\n\nThere is an additional root-level \ntsconfig.json\n that is used for IDE integration.\n\n\n{\n\n  \ncompileOnSave\n:\n \nfalse\n,\n\n  \ncompilerOptions\n:\n \n{\n\n    \noutDir\n:\n \n./dist/out-tsc\n,\n\n    \nbaseUrl\n:\n \nsrc\n,\n\n    \nsourceMap\n:\n \ntrue\n,\n\n    \ndeclaration\n:\n \nfalse\n,\n\n    \nmoduleResolution\n:\n \nnode\n,\n\n    \nemitDecoratorMetadata\n:\n \ntrue\n,\n\n    \nexperimentalDecorators\n:\n \ntrue\n,\n\n    \ntarget\n:\n \nes5\n,\n\n    \ntypeRoots\n:\n \n[\n\n      \nnode_modules/@types\n\n    \n],\n\n    \nlib\n:\n \n[\n\n      \nes2017\n,\n\n      \ndom\n\n    \n]\n\n  \n}\n\n\n}\n\n\n\n\n\nYou can delete \ne2e/tsconfig.json\n and \nsrc/tsconfig.json\n after adding these.\n\n\nAlso update \n.angular-cli.json\n to use them inside \napps[0]\n:\n\n\ntsconfig\n:\n \ntsconfig.app.json\n,\n\n\ntestTsconfig\n:\n \ntsconfig.spec.json\n,\n\n\n\n\n\nThen update \nprotractor.conf.js\n to use the e2e config as well:\n\n\nbeforeLaunch\n: \nfunction\n()\n \n{\n\n  \nrequire\n(\nts-node\n).\nregister\n({\n\n    \nproject\n:\n \ne2e/tsconfig.e2e.json\n\n  \n});\n\n\n},\n\n\n\n\n\nThese configs have an \ntypes\n array where you should add any package you install via \n@types/*\n.\nThis array helps keep typings isolated to the apps that really need them and avoid problems with\nduplicate typings.\n\n\nFor instance, the unit test \ntsconfig\n has \njasmine\n and \nnode\n, which correspond to\n\n@types/jasmine\n and \n@types/node\n.\nAdd any typings you've installed to the appropriate \ntsconfig\n as well.\n\n\ntypings.d.ts\n\n\nThere's a new \nsrc/typings.d.ts\n file that serves two purposes:\n\n\n\n\nprovides a centralized place for users to add their own custom typings\n\n\nmakes it easy to use components that use \nmodule.id\n, present in the documentation and in snippets\n\n\n\n\n/* SystemJS module definition */\n\n\ndeclare\n \nvar\n \nmodule\n: \nNodeModule\n;\n\n\ninterface\n \nNodeModule\n \n{\n\n  \nid\n: \nstring\n;\n\n\n}\n\n\n\n\n\npackage.json\n\n\nWe've updated a lot of packages over the last months in order to keep projects up to date.\n\n\nAdditions or removals are found in bold below.\n\n\nPackages in \ndependencies\n:\n\n\n\n\n@angular/*\n packages now have a \n^4.0.0\n minimum\n\n\ncore-js\n remains unchanged at \n^2.4.1\n\n\nrxjs\n was updated to \n^5.1.0\n\n\nts-helpers\n was \nremoved\n\n\nzone.js\n was updated to \n^0.8.4\n\n\n\n\nPackages in \ndevDependencies\n:\n\n\n\n\n@angular/cli\n at \n1.0.0\n replaces \nangular-cli\n\n\n@angular/compiler-cli\n is also at \n^4.0.0\n\n\n@types/jasmine\n remains unchanged and pinned at \n2.5.38\n\n\n@types/node\n was updated to \n~6.0.60\n\n\ncodelyzer\n was updated to \n~2.0.0\n\n\njasmine-core\n was updated to \n~2.5.2\n\n\njasmine-spec-reporter\n was updated to \n~3.2.0\n\n\nkarma\n was updated to \n~1.4.1\n\n\nkarma-chrome-launcher\n was updated to \n~2.0.0\n\n\nkarma-cli\n was updated to \n~1.0.1\n\n\nkarma-jasmine\n was updated to \n~1.1.0\n\n\nkarma-jasmine-html-reporter\n was \nadded\n at \n^0.2.2\n\n\nkarma-coverage-istanbul-reporter\n was \nadded\n at \n^0.2.0\n, replacing \nkarma-remap-istanbul\n\n\nkarma-remap-istanbul\n was \nremoved\n\n\nprotractor\n was updated to \n~5.1.0\n\n\nts-node\n was updated to \n~2.0.0\n\n\ntslint\n was updated to \n~4.5.0\n\n\ntypescript\n was updated to \n~2.1.0\n\n\n\n\nSee the \nkarma\n and \nprotractor\n sections below for more\ninformation on changed packages.\n\n\nThe \nLinting rules\n section contains a list of rules that changed due to updates.\n\n\nWe also updated the scripts section to make it more simple:\n\n\nscripts\n:\n \n{\n\n  \nng\n:\n \nng\n,\n\n  \nstart\n:\n \nng serve\n,\n\n  \nbuild\n:\n \nng build\n,\n\n  \ntest\n:\n \nng test\n,\n\n  \nlint\n:\n \nng lint\n,\n\n  \ne2e\n:\n \nng e2e\n\n\n},\n\n\n\n\n\nkarma.conf.js\n\n\nKarma configuration suffered some changes to improve the code-coverage functionality,\nuse the new \n@angular/cli\n package, and the new HTML reporter.\n\n\nIn the \nframeworks\n array update the CLI package to \n@angular/cli\n.\n\n\nIn the \nplugins\n array:\n\n\n\n\nadd \nrequire('karma-jasmine-html-reporter')\n and \nrequire('karma-coverage-istanbul-reporter')\n\n\nremove \nrequire('karma-remap-istanbul')\n\n\nupdate the CLI plugin to \nrequire('@angular/cli/plugins/karma')\n\n\n\n\nAdd a new \nclient\n option just above \npatterns\n:\n\n\nclient\n:\n{\n\n  \nclearContext\n: \nfalse\n \n// leave Jasmine Spec Runner output visible in browser\n\n\n},\n\n\nfiles\n:\n \n[\n\n\n\n\n\nChange the preprocessor to use the new CLI package:\n\n\npreprocessors\n:\n \n{\n\n  \n./src/test.ts\n:\n \n[\n@angular/cli\n]\n\n\n},\n\n\n\n\n\nReplace \nremapIstanbulReporter\n with \ncoverageIstanbulReporter\n:\n\n\ncoverageIstanbulReporter\n:\n \n{\n\n  \nreports\n:\n \n[\n \nhtml\n,\n \nlcovonly\n \n],\n\n  \nfixWebpackSourcePaths\n: \ntrue\n\n\n},\n\n\n\n\n\nRemove the config entry from \nangularCli\n:\n\n\nangularCli\n:\n \n{\n\n  \nenvironment\n:\n \ndev\n\n\n},\n\n\n\n\n\nUpdate the reporters to use \ncoverage-istanbul\n instead of \nkarma-remap-istanbul\n, and\nadd \nkjhtml\n (short for karma-jasmine-html-reporter):\n\n\nreporters\n: \nconfig.angularCli\n \n \nconfig\n.\nangularCli\n.\ncodeCoverage\n\n          \n?\n \n[\nprogress\n,\n \ncoverage-istanbul\n]\n\n          \n:\n \n[\nprogress\n,\n \nkjhtml\n],\n\n\n\n\n\nprotractor.conf.js\n\n\nProtractor was updated to the new 5.x major version, but you shouldn't need to change much\nto take advantage of all its new features.\n\n\nReplace the spec reporter import from:\n\n\nvar\n \nSpecReporter\n \n=\n \nrequire\n(\njasmine-spec-reporter\n);\n\n\n\n\n\nto\n\n\nconst\n \n{\n \nSpecReporter\n \n}\n \n=\n \nrequire\n(\njasmine-spec-reporter\n);\n\n\n\n\n\nRemove \nuseAllAngular2AppRoots: true\n.\n\n\nUpdate \nbeforeLaunch\n as described in \nOne tsconfig per app\n:\n\n\nbeforeLaunch\n: \nfunction\n()\n \n{\n\n  \nrequire\n(\nts-node\n).\nregister\n({\n\n    \nproject\n:\n \ne2e/tsconfig.e2e.json\n\n  \n});\n\n\n},\n\n\n\n\n\nUpdate \nonPrepare\n:\n\n\nonPrepare\n: \nfunction\n()\n \n{\n\n  \njasmine\n.\ngetEnv\n().\naddReporter\n(\nnew\n \nSpecReporter\n({\n \nspec\n:\n \n{\n \ndisplayStacktrace\n: \ntrue\n \n}\n \n}));\n\n\n}\n\n\n\n\n\nLinting rules\n\n\nThe updated versions of \ntslint\n and \ncodelyzer\n contain a few rule changes that you should\napply to your \ntslint.json\n:\n\n\nAdd these new rules:\n\n\ncallable-types\n:\n \ntrue\n,\n\n\nimport-blacklist\n:\n \n[\ntrue\n,\n \nrxjs\n],\n\n\nimport-spacing\n:\n \ntrue\n,\n\n\ninterface-over-type-literal\n:\n \ntrue\n,\n\n\nno-empty-interface\n:\n \ntrue\n,\n\n\nno-string-throw\n:\n \ntrue\n,\n\n\nprefer-const\n:\n \ntrue\n,\n\n\ntypeof-compare\n:\n \ntrue\n,\n\n\nunified-signatures\n:\n \ntrue\n,\n\n\n\n\n\nUpdate \nno-inferrable-types\n to \n\"no-inferrable-types\": [true, \"ignore-params\"]\n.", 
            "title": "1.0\u66f4\u65b0"
        }, 
        {
            "location": "/stories/1.0-update/#angular-cli", 
            "text": "In this migration guide we'll be looking at some of the major changes to CLI projects in the last two months.  Most of these changes were not breaking changes and your project should work fine without them.  But if you've been waiting for the perfect time to update, this is it!\nAlong with major rebuild speed increases, we've been busy adding a lot of features.  Documentation has also completely moved to  the wiki .\nThe new  Stories  section covers common usage scenarios, so be sure to have a look!  Below are the changes between a project generated two months ago, with  1.0.0-beta.24  and a  1.0.0  project.\nIf you kept your project up to date you might have a lot of these already.  You can find more details about changes between versions in  the releases tab on GitHub .  If you prefer, you can also generate a new project in a separate folder using  ng new upgrade-project --skip-install  and compare the differences.", 
            "title": "Angular CLI\u8fc1\u79fb\u6307\u5357"
        }, 
        {
            "location": "/stories/1.0-update/#angularcli", 
            "text": "Angular CLI can now be found on NPM under  @angular/cli  instead of  angular-cli , and upgrading is a simple 3 step process:   Uninstall old version  Update node/npm if necessary  Install new version", 
            "title": "@angular/cli"
        }, 
        {
            "location": "/stories/1.0-update/#1", 
            "text": "If you're using Angular CLI  beta.28  or less, you need to uninstall the  angular-cli  packages:  npm uninstall -g angular-cli           # Remove global package \nnpm uninstall --save-dev angular-cli   # Remove from package.json   Otherwise, uninstall the   @angular/cli  packages:  npm uninstall -g @angular/cli          # Remove global package \nnpm uninstall --save-dev @angular/cli  # Remove from package.json   Also purge the cache and local packages:  rm   - rf   node_modules   dist   #   Use   rmdir   on   Windows  npm   cache   clean   At this point, you should not have Angular CLI on your system anymore. If invoking Angular CLI at the commandline reveals that it still exists on your system, you will have to manually remove it. See  Manually removing residual Angular CLI .", 
            "title": "1. \u5378\u8f7d\u65e7\u7248\u672c"
        }, 
        {
            "location": "/stories/1.0-update/#2-node-npm", 
            "text": "Angular CLI now has a minimum requirement of Node 6.9.0 or higher, together with NPM 3 or higher.  If your Node or NPM versions do not meet these requirements, please refer to  the documentation  on how to upgrade.", 
            "title": "2. \u5982\u6709\u5fc5\u8981\uff0c\u66f4\u65b0node / npm"
        }, 
        {
            "location": "/stories/1.0-update/#3", 
            "text": "To update Angular CLI to a new version, you must update both the global package and your project's local package:  npm install -g @angular/cli@latest           # Global package \nnpm install --save-dev @angular/cli@latest   # Local package \nnpm install                                  # Restore removed dependencies", 
            "title": "3. \u5b89\u88c5\u65b0\u7248\u672c"
        }, 
        {
            "location": "/stories/1.0-update/#cli", 
            "text": "If you accidentally updated NPM before removing the old Angular CLI, you may find that uninstalling the package using  npm uninstall  is proving fruitless. This  could  be because the global install (and uninstall) path changed between versions of npm from  /usr/local/lib  to  /usr/lib , and hence, no longer searches through the old directory. In this case you'll have to remove it manually:  rm -rf /usr/local/lib/node_modules/@angular/cli  If the old Angular CLI package  still  persists, you'll need to research how to remove it before proceeding with the upgrade.", 
            "title": "\u624b\u52a8\u5220\u9664\u5269\u4f59\u7684\u89d2CLI"
        }, 
        {
            "location": "/stories/1.0-update/#angular-clijson", 
            "text": "angular-cli.json  is now  .angular-cli.json , but we still accept the old config file name.  A few new properties have changed in it:", 
            "title": ".angular-cli.json"
        }, 
        {
            "location": "/stories/1.0-update/#_1", 
            "text": "Add the  $schema  property above project for handy IDE support on your config file:  $schema :   ./node_modules/@angular/cli/lib/config/schema.json ,", 
            "title": "\u67b6\u6784"
        }, 
        {
            "location": "/stories/1.0-update/#polyfills", 
            "text": "There is now a dedicated entry for polyfills ( #3812 )\ninside  apps[0].polyfills , between  main  and  test :  main :   main.ts ,  polyfills :   polyfills.ts ,  test :   test.ts ,   Add it and remove  import './polyfills.ts';  from  src/main.ts  and  src/test.ts .  We also added a lot of descriptive comments to the existing  src/polyfills.ts  file, explaining\nwhich polyfills are needed for what browsers.\nBe sure to check it out in a new project!", 
            "title": "Polyfills"
        }, 
        {
            "location": "/stories/1.0-update/#_2", 
            "text": "A new  environmentSource  entry ( #4705 )\nreplaces the previous source entry inside environments.  To migrate angular-cli.json follow the example below:  Before:  environments :   { \n   source :   environments/environment.ts , \n   dev :   environments/environment.ts , \n   prod :   environments/environment.prod.ts  }   After:  environmentSource :   environments/environment.ts ,  environments :   { \n   dev :   environments/environment.ts , \n   prod :   environments/environment.prod.ts  }", 
            "title": "\u73af\u5883"
        }, 
        {
            "location": "/stories/1.0-update/#_3", 
            "text": "The CLI now uses the TSLint API ( #4248 )\nto lint several TS projects at once.  There is a new  lint  entry in  .angular-cli.json  between  e2e  and  test  where all linting\ntargets are listed:  e2e :   { \n   protractor :   { \n     config :   ./protractor.conf.js \n   }  },  lint :   [ \n   { \n     project :   src/tsconfig.app.json \n   }, \n   { \n     project :   src/tsconfig.spec.json \n   }, \n   { \n     project :   e2e/tsconfig.e2e.json \n   }  ],  test :   { \n   karma :   { \n     config :   ./karma.conf.js \n   }  },", 
            "title": "\u6389\u6bdb"
        }, 
        {
            "location": "/stories/1.0-update/#generator-defaults", 
            "text": "\u73b0\u5728\uff0c\u60a8\u53ef\u4ee5\u5728 defaults \u4e2d\u5217\u51fa\u6bcf\u4e2a\u751f\u6210\u5668( #4389 )\u7684\u751f\u6210\u5668\u9ed8\u8ba4\u503c\u3002  \u4ee3\u66ff:  defaults :   { \n   styleExt :   css , \n   prefixInterfaces :   false , \n   inline :   { \n     style :   false , \n     template :   false \n   }, \n   spec :   { \n     class :   false , \n     component :   true , \n     directive :   true , \n     module :   false , \n     pipe :   true , \n     service :   true \n   }  }   \u60a8\u53ef\u4ee5\u5217\u51fa\u6807\u5fd7\uff0c\u56e0\u4e3a\u5b83\u4eec\u51fa\u73b0\u5728 \u751f\u6210\u5668\u547d\u4ee4 \u4e2d:  defaults :   { \n   styleExt :   css , \n   component :   { \n     inlineTemplate :   false , \n     spec :   true \n   }  }", 
            "title": "Generator defaults"
        }, 
        {
            "location": "/stories/1.0-update/#tsconfig", 
            "text": "CLI projects now use one tsconfig per app ( #4924 ).   src/tsconfig.app.json : configuration for the Angular app.   { \n   compilerOptions :   { \n     sourceMap :   true , \n     declaration :   false , \n     moduleResolution :   node , \n     emitDecoratorMetadata :   true , \n     experimentalDecorators :   true , \n     target :   es5 , \n     lib :   [ \n       es2017 , \n       dom \n     ], \n     outDir :   ../out-tsc/app , \n     module :   es2015 , \n     baseUrl :   , \n     types :   [] \n   }, \n   exclude :   [ \n     test.ts , \n     **/*.spec.ts \n   ]  }    src/tsconfig.spec.json : configuration for the unit tests.   { \n   compilerOptions :   { \n     sourceMap :   true , \n     declaration :   false , \n     moduleResolution :   node , \n     emitDecoratorMetadata :   true , \n     experimentalDecorators :   true , \n     lib :   [ \n       es2017 , \n       dom \n     ], \n     outDir :   ../out-tsc/spec , \n     module :   commonjs , \n     target :   es5 , \n     baseUrl :   , \n     types :   [ \n       jasmine , \n       node \n     ] \n   }, \n   files :   [ \n     test.ts \n   ], \n   include :   [ \n     **/*.spec.ts , \n     **/*.d.ts \n   ]  }    e2e/tsconfig.e2e.json : configuration for the e2e tests.   { \n   compilerOptions :   { \n     sourceMap :   true , \n     declaration :   false , \n     moduleResolution :   node , \n     emitDecoratorMetadata :   true , \n     experimentalDecorators :   true , \n     lib :   [ \n       es2017 \n     ], \n     outDir :   ../out-tsc/e2e , \n     module :   commonjs , \n     target :   es5 , \n     types :[ \n       jasmine , \n       node \n     ] \n   }  }   There is an additional root-level  tsconfig.json  that is used for IDE integration.  { \n   compileOnSave :   false , \n   compilerOptions :   { \n     outDir :   ./dist/out-tsc , \n     baseUrl :   src , \n     sourceMap :   true , \n     declaration :   false , \n     moduleResolution :   node , \n     emitDecoratorMetadata :   true , \n     experimentalDecorators :   true , \n     target :   es5 , \n     typeRoots :   [ \n       node_modules/@types \n     ], \n     lib :   [ \n       es2017 , \n       dom \n     ] \n   }  }   You can delete  e2e/tsconfig.json  and  src/tsconfig.json  after adding these.  Also update  .angular-cli.json  to use them inside  apps[0] :  tsconfig :   tsconfig.app.json ,  testTsconfig :   tsconfig.spec.json ,   Then update  protractor.conf.js  to use the e2e config as well:  beforeLaunch :  function ()   { \n   require ( ts-node ). register ({ \n     project :   e2e/tsconfig.e2e.json \n   });  },   These configs have an  types  array where you should add any package you install via  @types/* .\nThis array helps keep typings isolated to the apps that really need them and avoid problems with\nduplicate typings.  For instance, the unit test  tsconfig  has  jasmine  and  node , which correspond to @types/jasmine  and  @types/node .\nAdd any typings you've installed to the appropriate  tsconfig  as well.", 
            "title": "\u6bcf\u4e2a\u5e94\u7528\u4e00\u4e2atsconfig"
        }, 
        {
            "location": "/stories/1.0-update/#typingsdts", 
            "text": "There's a new  src/typings.d.ts  file that serves two purposes:   provides a centralized place for users to add their own custom typings  makes it easy to use components that use  module.id , present in the documentation and in snippets   /* SystemJS module definition */  declare   var   module :  NodeModule ;  interface   NodeModule   { \n   id :  string ;  }", 
            "title": "typings.d.ts"
        }, 
        {
            "location": "/stories/1.0-update/#packagejson", 
            "text": "We've updated a lot of packages over the last months in order to keep projects up to date.  Additions or removals are found in bold below.  Packages in  dependencies :   @angular/*  packages now have a  ^4.0.0  minimum  core-js  remains unchanged at  ^2.4.1  rxjs  was updated to  ^5.1.0  ts-helpers  was  removed  zone.js  was updated to  ^0.8.4   Packages in  devDependencies :   @angular/cli  at  1.0.0  replaces  angular-cli  @angular/compiler-cli  is also at  ^4.0.0  @types/jasmine  remains unchanged and pinned at  2.5.38  @types/node  was updated to  ~6.0.60  codelyzer  was updated to  ~2.0.0  jasmine-core  was updated to  ~2.5.2  jasmine-spec-reporter  was updated to  ~3.2.0  karma  was updated to  ~1.4.1  karma-chrome-launcher  was updated to  ~2.0.0  karma-cli  was updated to  ~1.0.1  karma-jasmine  was updated to  ~1.1.0  karma-jasmine-html-reporter  was  added  at  ^0.2.2  karma-coverage-istanbul-reporter  was  added  at  ^0.2.0 , replacing  karma-remap-istanbul  karma-remap-istanbul  was  removed  protractor  was updated to  ~5.1.0  ts-node  was updated to  ~2.0.0  tslint  was updated to  ~4.5.0  typescript  was updated to  ~2.1.0   See the  karma  and  protractor  sections below for more\ninformation on changed packages.  The  Linting rules  section contains a list of rules that changed due to updates.  We also updated the scripts section to make it more simple:  scripts :   { \n   ng :   ng , \n   start :   ng serve , \n   build :   ng build , \n   test :   ng test , \n   lint :   ng lint , \n   e2e :   ng e2e  },", 
            "title": "package.json"
        }, 
        {
            "location": "/stories/1.0-update/#karmaconfjs", 
            "text": "Karma configuration suffered some changes to improve the code-coverage functionality,\nuse the new  @angular/cli  package, and the new HTML reporter.  In the  frameworks  array update the CLI package to  @angular/cli .  In the  plugins  array:   add  require('karma-jasmine-html-reporter')  and  require('karma-coverage-istanbul-reporter')  remove  require('karma-remap-istanbul')  update the CLI plugin to  require('@angular/cli/plugins/karma')   Add a new  client  option just above  patterns :  client : { \n   clearContext :  false   // leave Jasmine Spec Runner output visible in browser  },  files :   [   Change the preprocessor to use the new CLI package:  preprocessors :   { \n   ./src/test.ts :   [ @angular/cli ]  },   Replace  remapIstanbulReporter  with  coverageIstanbulReporter :  coverageIstanbulReporter :   { \n   reports :   [   html ,   lcovonly   ], \n   fixWebpackSourcePaths :  true  },   Remove the config entry from  angularCli :  angularCli :   { \n   environment :   dev  },   Update the reporters to use  coverage-istanbul  instead of  karma-remap-istanbul , and\nadd  kjhtml  (short for karma-jasmine-html-reporter):  reporters :  config.angularCli     config . angularCli . codeCoverage \n           ?   [ progress ,   coverage-istanbul ] \n           :   [ progress ,   kjhtml ],", 
            "title": "karma.conf.js"
        }, 
        {
            "location": "/stories/1.0-update/#protractorconfjs", 
            "text": "Protractor was updated to the new 5.x major version, but you shouldn't need to change much\nto take advantage of all its new features.  Replace the spec reporter import from:  var   SpecReporter   =   require ( jasmine-spec-reporter );   to  const   {   SpecReporter   }   =   require ( jasmine-spec-reporter );   Remove  useAllAngular2AppRoots: true .  Update  beforeLaunch  as described in  One tsconfig per app :  beforeLaunch :  function ()   { \n   require ( ts-node ). register ({ \n     project :   e2e/tsconfig.e2e.json \n   });  },   Update  onPrepare :  onPrepare :  function ()   { \n   jasmine . getEnv (). addReporter ( new   SpecReporter ({   spec :   {   displayStacktrace :  true   }   }));  }", 
            "title": "protractor.conf.js"
        }, 
        {
            "location": "/stories/1.0-update/#linting-rules", 
            "text": "The updated versions of  tslint  and  codelyzer  contain a few rule changes that you should\napply to your  tslint.json :  Add these new rules:  callable-types :   true ,  import-blacklist :   [ true ,   rxjs ],  import-spacing :   true ,  interface-over-type-literal :   true ,  no-empty-interface :   true ,  no-string-throw :   true ,  prefer-const :   true ,  typeof-compare :   true ,  unified-signatures :   true ,   Update  no-inferrable-types  to  \"no-inferrable-types\": [true, \"ignore-params\"] .", 
            "title": "Linting rules"
        }, 
        {
            "location": "/stories/rc-update/", 
            "text": "Angular CLI RC migration guide\n\n\nIn this migration guide we'll be looking at some of the major changes to CLI projects in the\nlast two months.\n\n\nMost of these changes were not breaking changes and your project should work fine without them.\n\n\nBut if you've been waiting for the perfect time to update, this is it!\nAlong with major rebuild speed increases, we've been busy adding a lot of features.\n\n\nRC means release candidate and we intend to stick to it.\nUnless there is a major breaking bug, we will not change the public surface of the API and\nits generated projects.\n\n\nThis means that a project upgraded now should need no more code changes all the way to 1.0.\n\n\nDocumentation has also completely moved to \nthe wiki\n.\nThe new \nStories\n section covers common usage\nscenarios, so be sure to have a look!\n\n\nBelow are the changes between a project generated two months ago, with \n1.0.0-beta.24\n and\na \n1.0.0-rc.1\n project.\nIf you kept your project up to date you might have a lot of these already.\n\n\nYou can find more details about changes between versions in \nCHANGELOG.md\n.\n\n\nIf you prefer, you can also generate a new project in a separate folder using\n \nng new upgrade-project --skip-install\n and compare the differences.\n\n\n@angular/cli\n\n\nAngular CLI can now be found on NPM under \n@angular/cli\n instead of \nangular-cli\n, and has a\nminimum requirement of Node 6.9.0 or higher, together with NPM 3 or higher.\n\n\nIf you're using Angular CLI \nbeta.28\n or less, you need to uninstall the \nangular-cli\n package.\n\nnpm uninstall -g angular-cli\nnpm uninstall --save-dev angular-cli\n\n\n\nTo update Angular CLI to a new version, you must update both the global package and your project's\nlocal package.\n\n\nGlobal package:\n\nnpm uninstall -g @angular/cli\nnpm cache clean\nnpm install -g @angular/cli@latest\n\n\n\nLocal project package:\n\nrm -rf node_modules dist \n# use rmdir on Windows\n\nnpm install --save-dev @angular/cli@latest\nnpm install\n\n\n\n.angular-cli.json\n\n\nangular-cli.json\n is now \n.angular-cli.json\n, but we still accept the old config file name.\n\n\nA few new properties have changed in it:\n\n\nSchema\n\n\nAdd the \n$schema\n property above project for handy IDE support on your config file:\n\n\n$schema\n: \n./node_modules/@angular/cli/lib/config/schema.json\n,\n\n\n\n\nPolyfills\n\n\nThere is now a dedicated entry for polyfills (\n#3812\n)\ninside \napps[0].polyfills\n, between \nmain\n and \ntest\n:\n\n\nmain\n: \nmain.ts\n,\n\npolyfills\n: \npolyfills.ts\n,\n\ntest\n: \ntest.ts\n,\n\n\n\n\nAdd it and remove \nimport './polyfills.ts';\n from \nsrc/main.ts\n and \nsrc/test.ts\n.\n\n\nWe also added a lot of descriptive comments to the existing \nsrc/polyfills.ts\n file, explaining\nwhich polyfills are needed for what browsers.\nBe sure to check it out in a new project!\n\n\nEnvironments\n\n\nA new \nenvironmentSource\n entry (\n#4705\n)\nreplaces the previous source entry inside environments.\n\n\nTo migrate angular-cli.json follow the example below:\n\n\nBefore:\n\nenvironments\n: {\n  \nsource\n: \nenvironments/environment.ts\n,\n  \ndev\n: \nenvironments/environment.ts\n,\n  \nprod\n: \nenvironments/environment.prod.ts\n\n}\n\n\n\nAfter:\n\n\nenvironmentSource\n: \nenvironments/environment.ts\n,\n\nenvironments\n: {\n  \ndev\n: \nenvironments/environment.ts\n,\n  \nprod\n: \nenvironments/environment.prod.ts\n\n}\n\n\n\n\nLinting\n\n\nThe CLI now uses the TSLint API (\n#4248\n)\nto lint several TS projects at once.\n\n\nThere is a new \nlint\n entry in \n.angular-cli.json\n between \ne2e\n and \ntest\n where all linting\ntargets are listed:\n\n\ne2e\n: {\n  \nprotractor\n: {\n    \nconfig\n: \n./protractor.conf.js\n\n  }\n},\n\nlint\n: [\n  {\n    \nproject\n: \nsrc/tsconfig.app.json\n\n  },\n  {\n    \nproject\n: \nsrc/tsconfig.spec.json\n\n  },\n  {\n    \nproject\n: \ne2e/tsconfig.e2e.json\n\n  }\n],\n\ntest\n: {\n  \nkarma\n: {\n    \nconfig\n: \n./karma.conf.js\n\n  }\n},\n\n\n\n\nGenerator defaults\n\n\nNow you can list generator defaults per generator (\n#4389\n)\nin \ndefaults\n.\n\n\nInstead of:\n\ndefaults\n: {\n  \nstyleExt\n: \ncss\n,\n  \nprefixInterfaces\n: false,\n  \ninline\n: {\n    \nstyle\n: false,\n    \ntemplate\n: false\n  },\n  \nspec\n: {\n    \nclass\n: false,\n    \ncomponent\n: true,\n    \ndirective\n: true,\n    \nmodule\n: false,\n    \npipe\n: true,\n    \nservice\n: true\n  }\n}\n\n\n\nYou can instead list the flags as they appear on \nthe generator command\n:\n\ndefaults\n: {\n  \nstyleExt\n: \ncss\n,\n  \ncomponent\n: {\n    \ninlineTemplate\n: false,\n    \nspec\n: true\n  }\n}\n\n\n\nOne tsconfig per app\n\n\nCLI projects now use one tsconfig per app (\n#4924\n).\n\n\n\n\nsrc/tsconfig.app.json\n: configuration for the Angular app.\n\n{\n  \ncompilerOptions\n: {\n    \nsourceMap\n: true,\n    \ndeclaration\n: false,\n    \nmoduleResolution\n: \nnode\n,\n    \nemitDecoratorMetadata\n: true,\n    \nexperimentalDecorators\n: true,\n    \nlib\n: [\n      \nes2016\n,\n      \ndom\n\n    ],\n    \noutDir\n: \n../out-tsc/app\n,\n    \ntarget\n: \nes5\n,\n    \nmodule\n: \nes2015\n,\n    \nbaseUrl\n: \n,\n    \ntypes\n: []\n  },\n  \nexclude\n: [\n    \ntest.ts\n,\n    \n**/*.spec.ts\n\n  ]\n}\n\n\n\nsrc/tsconfig.spec.json\n: configuration for the unit tests.\n\n{\n  \ncompilerOptions\n: {\n    \nsourceMap\n: true,\n    \ndeclaration\n: false,\n    \nmoduleResolution\n: \nnode\n,\n    \nemitDecoratorMetadata\n: true,\n    \nexperimentalDecorators\n: true,\n    \nlib\n: [\n      \nes2016\n\n    ],\n    \noutDir\n: \n../out-tsc/spec\n,\n    \nmodule\n: \ncommonjs\n,\n    \ntarget\n: \nes6\n,\n    \nbaseUrl\n: \n,\n    \ntypes\n: [\n      \njasmine\n,\n      \nnode\n\n    ]\n  },\n  \nfiles\n: [\n    \ntest.ts\n\n  ],\n  \ninclude\n: [\n    \n**/*.spec.ts\n\n  ]\n}\n\n\n\ne2e/tsconfig.e2e.json\n: configuration for the e2e tests.\n\n{\n  \ncompilerOptions\n: {\n    \nsourceMap\n: true,\n    \ndeclaration\n: false,\n    \nmoduleResolution\n: \nnode\n,\n    \nemitDecoratorMetadata\n: true,\n    \nexperimentalDecorators\n: true,\n    \nlib\n: [\n      \nes2016\n\n    ],\n    \noutDir\n: \n../dist/out-tsc-e2e\n,\n    \nmodule\n: \ncommonjs\n,\n    \ntarget\n: \nes6\n,\n    \ntypes\n:[\n      \njasmine\n,\n      \nnode\n\n    ]\n  }\n}\n\n\n\n\n\nThere is an additional root-level \ntsconfig.json\n that is used for IDE integration.\n\n{\n  \ncompileOnSave\n: false,\n  \ncompilerOptions\n: {\n    \noutDir\n: \n./dist/out-tsc\n,\n    \nsourceMap\n: true,\n    \ndeclaration\n: false,\n    \nmoduleResolution\n: \nnode\n,\n    \nemitDecoratorMetadata\n: true,\n    \nexperimentalDecorators\n: true,\n    \ntarget\n: \nes5\n,\n    \ntypeRoots\n: [\n      \nnode_modules/@types\n\n    ],\n    \nlib\n: [\n      \nes2016\n,\n      \ndom\n\n    ]\n  }\n}\n\n\n\nYou can delete \ne2e/tsconfig.json\n and \nsrc/tsconfig.json\n after adding these.\n\n\nAlso update \n.angular-cli.json\n to use them inside \napps[0]\n:\n\n\ntsconfig\n: \ntsconfig.app.json\n,\n\ntestTsconfig\n: \ntsconfig.spec.json\n,\n\n\n\n\nThen update \nprotractor.conf.js\n to use the e2e config as well:\n\nbeforeLaunch\n:\n \nfunction\n()\n \n{\n\n  \nrequire\n(\nts-node\n).\nregister\n({\n\n    \nproject\n:\n \ne2e\n\n  \n});\n\n\n},\n\n\n\n\nThese configs have an \ntypes\n array where you should add any package you install via \n@types/*\n.\nThis array helps keep typings isolated to the apps that really need them and avoid problems with\nduplicate typings.\n\n\nFor instance, the unit test \ntsconfig\n has \njasmine\n and \nnode\n, which correspond to\n\n@types/jasmine\n and \n@types/node\n.\nAdd any typings you've installed to the appropriate \ntsconfig\n as well.\n\n\npackage.json\n\n\nWe've updated a lot of packages over the last months in order to keep projects up to date.\n\n\nAdditions or removals are found in bold below.\n\n\nPackages in \ndependencies\n:\n- \n@angular/*\n packages now have a \n^2.4.0\n minimum (\n^3.4.0\n for router)\n- \ncore-js\n remains unchanged at \n^2.4.1\n\n- \nrxjs\n to \n^5.1.0\n\n- \nts-helpers\n was \nremoved\n\n- \nzone.js\n to \n^0.7.6\n\n\nPackages in \ndevDependencies\n:\n- \n@angular/cli\n at \n1.0.0-rc.0\n replaces \nangular-cli\n\n- \n@angular/compiler-cli\n is also at \n^2.4.0\n\n- \n@types/jasmine\n remains unchanged and pinned at \n2.5.38\n\n- \n@types/node\n was updated to \n~6.0.60\n\n- \ncodelyzer\n was updated to \n~2.0.0\n\n- \njasmine-core\n was updated to \n~2.5.2\n\n- \njasmine-spec-reporter\n was updated to \n~3.2.0\n\n- \nkarma\n was updated to \n~1.4.1\n\n- \nkarma-chrome-launcher\n was updated to \n~2.0.0\n\n- \nkarma-cli\n was updated to \n~1.0.1\n\n- \nkarma-jasmine\n was updated to \n~1.1.0\n\n- \nkarma-jasmine-html-reporter\n was \nadded\n at \n^0.2.2\n\n- \nkarma-coverage-istanbul-reporter\n was \nadded\n at \n^0.2.0\n, replacing \nkarma-remap-istanbul\n\n- \nkarma-remap-istanbul\n was \nremoved\n\n- \nprotractor\n was updated to \n~5.1.0\n\n- \nts-node\n was updated to \n~2.0.0\n\n- \ntslint\n was updated to \n~4.4.2\n\n- \ntypescript\n was updated to \n~2.0.0\n\n\nSee the \nkarma\n and \nprotractor\n sections below for more\ninformation on changed packages.\n\n\nThe \nLinting rules\n section contains a list of rules that changed due to updates.\n\n\nWe also updated the scripts section to make it more simple:\n\n\nscripts\n: {\n  \nng\n: \nng\n,\n  \nstart\n: \nng serve\n,\n  \nbuild\n: \nng build\n,\n  \ntest\n: \nng test\n,\n  \nlint\n: \nng lint\n,\n  \ne2e\n: \nng e2e\n\n},\n\n\n\n\nkarma.conf.js\n\n\nKarma configuration suffered some changes to improve the code-coverage functionality,\nuse the new \n@angular/cli\n package, and the new HTML reporter.\n\n\nIn the \nframeworks\n array update the CLI package to \n@angular/cli\n.\n\n\nIn the \nplugins\n array:\n- add \nrequire('karma-jasmine-html-reporter')\n and \nrequire('karma-coverage-istanbul-reporter')\n\n- remove \nrequire('karma-remap-istanbul')\n\n- update the CLI plugin to \nrequire('@angular/cli/plugins/karma')\n\n\nAdd a new \nclient\n option just above \npatterns\n:\n\nclient:{\n  clearContext: false // leave Jasmine Spec Runner output visible in browser\n},\nfiles: [\n\n\n\nChange the preprocessor to use the new CLI package:\n\npreprocessors: {\n  \n./src/test.ts\n: [\n@angular/cli\n]\n},\n\n\n\nReplace \nremapIstanbulReporter\n with \ncoverageIstanbulReporter\n:\n\ncoverageIstanbulReporter: {\n  reports: [ \nhtml\n, \nlcovonly\n ],\n  fixWebpackSourcePaths: true\n},\n\n\n\nRemove the config entry from \nangularCli\n:\n\nangularCli: {\n  environment: \ndev\n\n},\n\n\n\nUpdate the reporters to use \ncoverage-istanbul\n instead of \nkarma-remap-istanbul\n, and\nadd \nkjhtml\n (short for karma-jasmine-html-reporter):\n\nreporters\n:\n \nconfig\n.\nangularCli\n \n \nconfig\n.\nangularCli\n.\ncodeCoverage\n\n          \n?\n \n[\nprogress\n,\n \ncoverage-istanbul\n]\n\n          \n:\n \n[\nprogress\n,\n \nkjhtml\n],\n\n\n\n\nprotractor.conf.js\n\n\nProtractor was updated to the new 5.x major version, but you shouldn't need to change much\nto take advantage of all its new features.\n\n\nReplace the spec reporter import from:\n\nvar SpecReporter = require(\njasmine-spec-reporter\n);\n\n\nto\n\nconst { SpecReporter } = require(\njasmine-spec-reporter\n);\n\n\n\nRemove \nuseAllAngular2AppRoots: true\n.\n\n\nUpdate \nbeforeLaunch\n as described in \nOne tsconfig per app\n:\n\nbeforeLaunch\n:\n \nfunction\n()\n \n{\n\n  \nrequire\n(\nts-node\n).\nregister\n({\n\n    \nproject\n:\n \ne2e\n\n  \n});\n\n\n},\n\n\n\n\nUpdate \nonPrepare\n:\n\nonPrepare\n()\n \n{\n\n  \njasmine.getEnv().addReporter(new\n \nSpecReporter({\n \nspec\n:\n \n{\n \ndisplayStacktrace\n:\n \ntrue\n \n}\n \n}\n));\n\n\n}\n\n\n\n\nLinting rules\n\n\nThe updated versions of \ntslint\n and \ncodelyzer\n contain a few rule changes that you should\napply to your \ntslint.json\n:\n\n\nAdd these new rules:\n\ncallable-types\n: true,\n\nimport-blacklist\n: [true, \nrxjs\n],\n\nimport-spacing\n: true,\n\ninterface-over-type-literal\n: true,\n\nno-empty-interface\n: true,\n\nno-string-throw\n: true,\n\nprefer-const\n: true,\n\ntypeof-compare\n: true,\n\nunified-signatures\n: true,\n\n\n\nUpdate \nno-inferrable-types\n to \n\"no-inferrable-types\": [true, \"ignore-params\"]\n.", 
            "title": "rc\u66f4\u65b0"
        }, 
        {
            "location": "/stories/rc-update/#angular-cli-rc-migration-guide", 
            "text": "In this migration guide we'll be looking at some of the major changes to CLI projects in the\nlast two months.  Most of these changes were not breaking changes and your project should work fine without them.  But if you've been waiting for the perfect time to update, this is it!\nAlong with major rebuild speed increases, we've been busy adding a lot of features.  RC means release candidate and we intend to stick to it.\nUnless there is a major breaking bug, we will not change the public surface of the API and\nits generated projects.  This means that a project upgraded now should need no more code changes all the way to 1.0.  Documentation has also completely moved to  the wiki .\nThe new  Stories  section covers common usage\nscenarios, so be sure to have a look!  Below are the changes between a project generated two months ago, with  1.0.0-beta.24  and\na  1.0.0-rc.1  project.\nIf you kept your project up to date you might have a lot of these already.  You can find more details about changes between versions in  CHANGELOG.md .  If you prefer, you can also generate a new project in a separate folder using\n  ng new upgrade-project --skip-install  and compare the differences.", 
            "title": "Angular CLI RC migration guide"
        }, 
        {
            "location": "/stories/rc-update/#angularcli", 
            "text": "Angular CLI can now be found on NPM under  @angular/cli  instead of  angular-cli , and has a\nminimum requirement of Node 6.9.0 or higher, together with NPM 3 or higher.  If you're using Angular CLI  beta.28  or less, you need to uninstall the  angular-cli  package. npm uninstall -g angular-cli\nnpm uninstall --save-dev angular-cli  To update Angular CLI to a new version, you must update both the global package and your project's\nlocal package.  Global package: npm uninstall -g @angular/cli\nnpm cache clean\nnpm install -g @angular/cli@latest  Local project package: rm -rf node_modules dist  # use rmdir on Windows \nnpm install --save-dev @angular/cli@latest\nnpm install", 
            "title": "@angular/cli"
        }, 
        {
            "location": "/stories/rc-update/#angular-clijson", 
            "text": "angular-cli.json  is now  .angular-cli.json , but we still accept the old config file name.  A few new properties have changed in it:", 
            "title": ".angular-cli.json"
        }, 
        {
            "location": "/stories/rc-update/#schema", 
            "text": "Add the  $schema  property above project for handy IDE support on your config file:  $schema :  ./node_modules/@angular/cli/lib/config/schema.json ,", 
            "title": "Schema"
        }, 
        {
            "location": "/stories/rc-update/#polyfills", 
            "text": "There is now a dedicated entry for polyfills ( #3812 )\ninside  apps[0].polyfills , between  main  and  test :  main :  main.ts , polyfills :  polyfills.ts , test :  test.ts ,  Add it and remove  import './polyfills.ts';  from  src/main.ts  and  src/test.ts .  We also added a lot of descriptive comments to the existing  src/polyfills.ts  file, explaining\nwhich polyfills are needed for what browsers.\nBe sure to check it out in a new project!", 
            "title": "Polyfills"
        }, 
        {
            "location": "/stories/rc-update/#environments", 
            "text": "A new  environmentSource  entry ( #4705 )\nreplaces the previous source entry inside environments.  To migrate angular-cli.json follow the example below:  Before: environments : {\n   source :  environments/environment.ts ,\n   dev :  environments/environment.ts ,\n   prod :  environments/environment.prod.ts \n}  After:  environmentSource :  environments/environment.ts , environments : {\n   dev :  environments/environment.ts ,\n   prod :  environments/environment.prod.ts \n}", 
            "title": "Environments"
        }, 
        {
            "location": "/stories/rc-update/#linting", 
            "text": "The CLI now uses the TSLint API ( #4248 )\nto lint several TS projects at once.  There is a new  lint  entry in  .angular-cli.json  between  e2e  and  test  where all linting\ntargets are listed:  e2e : {\n   protractor : {\n     config :  ./protractor.conf.js \n  }\n}, lint : [\n  {\n     project :  src/tsconfig.app.json \n  },\n  {\n     project :  src/tsconfig.spec.json \n  },\n  {\n     project :  e2e/tsconfig.e2e.json \n  }\n], test : {\n   karma : {\n     config :  ./karma.conf.js \n  }\n},", 
            "title": "Linting"
        }, 
        {
            "location": "/stories/rc-update/#generator-defaults", 
            "text": "Now you can list generator defaults per generator ( #4389 )\nin  defaults .  Instead of: defaults : {\n   styleExt :  css ,\n   prefixInterfaces : false,\n   inline : {\n     style : false,\n     template : false\n  },\n   spec : {\n     class : false,\n     component : true,\n     directive : true,\n     module : false,\n     pipe : true,\n     service : true\n  }\n}  You can instead list the flags as they appear on  the generator command : defaults : {\n   styleExt :  css ,\n   component : {\n     inlineTemplate : false,\n     spec : true\n  }\n}", 
            "title": "Generator defaults"
        }, 
        {
            "location": "/stories/rc-update/#one-tsconfig-per-app", 
            "text": "CLI projects now use one tsconfig per app ( #4924 ).   src/tsconfig.app.json : configuration for the Angular app. {\n   compilerOptions : {\n     sourceMap : true,\n     declaration : false,\n     moduleResolution :  node ,\n     emitDecoratorMetadata : true,\n     experimentalDecorators : true,\n     lib : [\n       es2016 ,\n       dom \n    ],\n     outDir :  ../out-tsc/app ,\n     target :  es5 ,\n     module :  es2015 ,\n     baseUrl :  ,\n     types : []\n  },\n   exclude : [\n     test.ts ,\n     **/*.spec.ts \n  ]\n}  src/tsconfig.spec.json : configuration for the unit tests. {\n   compilerOptions : {\n     sourceMap : true,\n     declaration : false,\n     moduleResolution :  node ,\n     emitDecoratorMetadata : true,\n     experimentalDecorators : true,\n     lib : [\n       es2016 \n    ],\n     outDir :  ../out-tsc/spec ,\n     module :  commonjs ,\n     target :  es6 ,\n     baseUrl :  ,\n     types : [\n       jasmine ,\n       node \n    ]\n  },\n   files : [\n     test.ts \n  ],\n   include : [\n     **/*.spec.ts \n  ]\n}  e2e/tsconfig.e2e.json : configuration for the e2e tests. {\n   compilerOptions : {\n     sourceMap : true,\n     declaration : false,\n     moduleResolution :  node ,\n     emitDecoratorMetadata : true,\n     experimentalDecorators : true,\n     lib : [\n       es2016 \n    ],\n     outDir :  ../dist/out-tsc-e2e ,\n     module :  commonjs ,\n     target :  es6 ,\n     types :[\n       jasmine ,\n       node \n    ]\n  }\n}   There is an additional root-level  tsconfig.json  that is used for IDE integration. {\n   compileOnSave : false,\n   compilerOptions : {\n     outDir :  ./dist/out-tsc ,\n     sourceMap : true,\n     declaration : false,\n     moduleResolution :  node ,\n     emitDecoratorMetadata : true,\n     experimentalDecorators : true,\n     target :  es5 ,\n     typeRoots : [\n       node_modules/@types \n    ],\n     lib : [\n       es2016 ,\n       dom \n    ]\n  }\n}  You can delete  e2e/tsconfig.json  and  src/tsconfig.json  after adding these.  Also update  .angular-cli.json  to use them inside  apps[0] :  tsconfig :  tsconfig.app.json , testTsconfig :  tsconfig.spec.json ,  Then update  protractor.conf.js  to use the e2e config as well: beforeLaunch :   function ()   { \n   require ( ts-node ). register ({ \n     project :   e2e \n   });  },   These configs have an  types  array where you should add any package you install via  @types/* .\nThis array helps keep typings isolated to the apps that really need them and avoid problems with\nduplicate typings.  For instance, the unit test  tsconfig  has  jasmine  and  node , which correspond to @types/jasmine  and  @types/node .\nAdd any typings you've installed to the appropriate  tsconfig  as well.", 
            "title": "One tsconfig per app"
        }, 
        {
            "location": "/stories/rc-update/#packagejson", 
            "text": "We've updated a lot of packages over the last months in order to keep projects up to date.  Additions or removals are found in bold below.  Packages in  dependencies :\n-  @angular/*  packages now have a  ^2.4.0  minimum ( ^3.4.0  for router)\n-  core-js  remains unchanged at  ^2.4.1 \n-  rxjs  to  ^5.1.0 \n-  ts-helpers  was  removed \n-  zone.js  to  ^0.7.6  Packages in  devDependencies :\n-  @angular/cli  at  1.0.0-rc.0  replaces  angular-cli \n-  @angular/compiler-cli  is also at  ^2.4.0 \n-  @types/jasmine  remains unchanged and pinned at  2.5.38 \n-  @types/node  was updated to  ~6.0.60 \n-  codelyzer  was updated to  ~2.0.0 \n-  jasmine-core  was updated to  ~2.5.2 \n-  jasmine-spec-reporter  was updated to  ~3.2.0 \n-  karma  was updated to  ~1.4.1 \n-  karma-chrome-launcher  was updated to  ~2.0.0 \n-  karma-cli  was updated to  ~1.0.1 \n-  karma-jasmine  was updated to  ~1.1.0 \n-  karma-jasmine-html-reporter  was  added  at  ^0.2.2 \n-  karma-coverage-istanbul-reporter  was  added  at  ^0.2.0 , replacing  karma-remap-istanbul \n-  karma-remap-istanbul  was  removed \n-  protractor  was updated to  ~5.1.0 \n-  ts-node  was updated to  ~2.0.0 \n-  tslint  was updated to  ~4.4.2 \n-  typescript  was updated to  ~2.0.0  See the  karma  and  protractor  sections below for more\ninformation on changed packages.  The  Linting rules  section contains a list of rules that changed due to updates.  We also updated the scripts section to make it more simple:  scripts : {\n   ng :  ng ,\n   start :  ng serve ,\n   build :  ng build ,\n   test :  ng test ,\n   lint :  ng lint ,\n   e2e :  ng e2e \n},", 
            "title": "package.json"
        }, 
        {
            "location": "/stories/rc-update/#karmaconfjs", 
            "text": "Karma configuration suffered some changes to improve the code-coverage functionality,\nuse the new  @angular/cli  package, and the new HTML reporter.  In the  frameworks  array update the CLI package to  @angular/cli .  In the  plugins  array:\n- add  require('karma-jasmine-html-reporter')  and  require('karma-coverage-istanbul-reporter') \n- remove  require('karma-remap-istanbul') \n- update the CLI plugin to  require('@angular/cli/plugins/karma')  Add a new  client  option just above  patterns : client:{\n  clearContext: false // leave Jasmine Spec Runner output visible in browser\n},\nfiles: [  Change the preprocessor to use the new CLI package: preprocessors: {\n   ./src/test.ts : [ @angular/cli ]\n},  Replace  remapIstanbulReporter  with  coverageIstanbulReporter : coverageIstanbulReporter: {\n  reports: [  html ,  lcovonly  ],\n  fixWebpackSourcePaths: true\n},  Remove the config entry from  angularCli : angularCli: {\n  environment:  dev \n},  Update the reporters to use  coverage-istanbul  instead of  karma-remap-istanbul , and\nadd  kjhtml  (short for karma-jasmine-html-reporter): reporters :   config . angularCli     config . angularCli . codeCoverage \n           ?   [ progress ,   coverage-istanbul ] \n           :   [ progress ,   kjhtml ],", 
            "title": "karma.conf.js"
        }, 
        {
            "location": "/stories/rc-update/#protractorconfjs", 
            "text": "Protractor was updated to the new 5.x major version, but you shouldn't need to change much\nto take advantage of all its new features.  Replace the spec reporter import from: var SpecReporter = require( jasmine-spec-reporter ); \nto const { SpecReporter } = require( jasmine-spec-reporter );  Remove  useAllAngular2AppRoots: true .  Update  beforeLaunch  as described in  One tsconfig per app : beforeLaunch :   function ()   { \n   require ( ts-node ). register ({ \n     project :   e2e \n   });  },   Update  onPrepare : onPrepare ()   { \n   jasmine.getEnv().addReporter(new   SpecReporter({   spec :   {   displayStacktrace :   true   }   } ));  }", 
            "title": "protractor.conf.js"
        }, 
        {
            "location": "/stories/rc-update/#linting-rules", 
            "text": "The updated versions of  tslint  and  codelyzer  contain a few rule changes that you should\napply to your  tslint.json :  Add these new rules: callable-types : true, import-blacklist : [true,  rxjs ], import-spacing : true, interface-over-type-literal : true, no-empty-interface : true, no-string-throw : true, prefer-const : true, typeof-compare : true, unified-signatures : true,  Update  no-inferrable-types  to  \"no-inferrable-types\": [true, \"ignore-params\"] .", 
            "title": "Linting rules"
        }, 
        {
            "location": "/stories/rc.0-update/", 
            "text": "Angular CLI RC.0 migration guide\n\n\nIn this migration guide we'll be looking at some of the major changes to CLI projects in the\nlast two months.\n\n\nMost of these changes were not breaking changes and your project should work fine without them.\n\n\nBut if you've been waiting for the perfect time to update, this is it!\nAlong with major rebuild speed increases, we've been busy adding a lot of features.\n\n\nRC means release candidate and we intend to stick to it.\nUnless there is a major breaking bug, we will not change the public surface of the API and\nits generated projects.\n\n\nThis means that a project upgraded now should need no more code changes all the way to 1.0.\n\n\nDocumentation has also completely moved to \nthe wiki\n.\nThe new \nStories\n section covers common usage\nscenarios, so be sure to have a look!\n\n\nBelow are the changes between a project generated two months ago, with \n1.0.0-beta.24\n and\na \n1.0.0-rc.0\n project.\nIf you kept your project up to date you might have a lot of these already.\n\n\nYou can find more details about changes between versions in \nCHANGELOG.md\n.\n\n\nIf you prefer, you can also generate a new project in a separate folder using\n \nng new upgrade-project --skip-install\n and compare the differences.\n\n\n@angular/cli\n\n\nAngular CLI can now be found on NPM under \n@angular/cli\n instead of \nangular-cli\n, and has a\nminimum requirement of Node 6.9.0 or higher, together with NPM 3 or higher.\n\n\nIf you're using Angular CLI \nbeta.28\n or less, you need to uninstall the \nangular-cli\n package.\n\nnpm uninstall -g angular-cli\nnpm uninstall --save-dev angular-cli\n\n\n\nTo update Angular CLI to a new version, you must update both the global package and your project's\nlocal package.\n\n\nGlobal package:\n\nnpm uninstall -g @angular/cli\nnpm cache clean\nnpm install -g @angular/cli@latest\n\n\n\nLocal project package:\n\nrm -rf node_modules dist \n# use rmdir on Windows\n\nnpm install --save-dev @angular/cli@latest\nnpm install\n\n\n\n.angular-cli.json\n\n\nangular-cli.json\n is now \n.angular-cli.json\n, but we still accept the old config file name.\n\n\nA few new properties have changed in it:\n\n\nSchema\n\n\nAdd the \n$schema\n property above project for handy IDE support on your config file:\n\n\n$schema\n: \n./node_modules/@angular/cli/lib/config/schema.json\n,\n\n\n\n\nPolyfills\n\n\nThere is now a dedicated entry for polyfills (\n#3812\n)\ninside \napps[0].polyfills\n, between \nmain\n and \ntest\n:\n\n\nmain\n: \nmain.ts\n,\n\npolyfills\n: \npolyfills.ts\n,\n\ntest\n: \ntest.ts\n,\n\n\n\n\nAdd it and remove \nimport './polyfills.ts';\n from \nsrc/main.ts\n and \nsrc/test.ts\n.\n\n\nWe also added a lot of descriptive comments to the existing \nsrc/polyfills.ts\n file, explaining\nwhich polyfills are needed for what browsers.\nBe sure to check it out in a new project!\n\n\nEnvironments\n\n\nA new \nenvironmentSource\n entry (\n#4705\n)\nreplaces the previous source entry inside environments.\n\n\nTo migrate angular-cli.json follow the example below:\n\n\nBefore:\n\nenvironments\n: {\n  \nsource\n: \nenvironments/environment.ts\n,\n  \ndev\n: \nenvironments/environment.ts\n,\n  \nprod\n: \nenvironments/environment.prod.ts\n\n}\n\n\n\nAfter:\n\n\nenvironmentSource\n: \nenvironments/environment.ts\n,\n\nenvironments\n: {\n  \ndev\n: \nenvironments/environment.ts\n,\n  \nprod\n: \nenvironments/environment.prod.ts\n\n}\n\n\n\n\nLinting\n\n\nThe CLI now uses the TSLint API (\n#4248\n)\nto lint several TS projects at once.\n\n\nThere is a new \nlint\n entry in \n.angular-cli.json\n between \ne2e\n and \ntest\n where all linting\ntargets are listed:\n\n\ne2e\n: {\n  \nprotractor\n: {\n    \nconfig\n: \n./protractor.conf.js\n\n  }\n},\n\nlint\n: [\n  {\n    \nproject\n: \nsrc/tsconfig.app.json\n\n  },\n  {\n    \nproject\n: \nsrc/tsconfig.spec.json\n\n  },\n  {\n    \nproject\n: \ne2e/tsconfig.e2e.json\n\n  }\n],\n\ntest\n: {\n  \nkarma\n: {\n    \nconfig\n: \n./karma.conf.js\n\n  }\n},\n\n\n\n\nGenerator defaults\n\n\nNow you can list generator defaults per generator (\n#4389\n)\nin \ndefaults\n.\n\n\nInstead of:\n\ndefaults\n: {\n  \nstyleExt\n: \ncss\n,\n  \nprefixInterfaces\n: false,\n  \ninline\n: {\n    \nstyle\n: false,\n    \ntemplate\n: false\n  },\n  \nspec\n: {\n    \nclass\n: false,\n    \ncomponent\n: true,\n    \ndirective\n: true,\n    \nmodule\n: false,\n    \npipe\n: true,\n    \nservice\n: true\n  }\n}\n\n\n\nYou can instead list the flags as they appear on \nthe generator command\n:\n\ndefaults\n: {\n  \nstyleExt\n: \ncss\n,\n  \ncomponent\n: {\n    \ninlineTemplate\n: false,\n    \nspec\n: true\n  }\n}\n\n\n\nOne tsconfig per app\n\n\nCLI projects now use one tsconfig per app (\n#4924\n).\n\n\n\n\nsrc/tsconfig.app.json\n: configuration for the Angular app.\n\n{\n  \ncompilerOptions\n: {\n    \nsourceMap\n: true,\n    \ndeclaration\n: false,\n    \nmoduleResolution\n: \nnode\n,\n    \nemitDecoratorMetadata\n: true,\n    \nexperimentalDecorators\n: true,\n    \nlib\n: [\n      \nes2016\n,\n      \ndom\n\n    ],\n    \noutDir\n: \n../out-tsc/app\n,\n    \ntarget\n: \nes5\n,\n    \nmodule\n: \nes2015\n,\n    \nbaseUrl\n: \n,\n    \ntypes\n: []\n  },\n  \nexclude\n: [\n    \ntest.ts\n,\n    \n**/*.spec.ts\n\n  ]\n}\n\n\n\nsrc/tsconfig.spec.json\n: configuration for the unit tests.\n\n{\n  \ncompilerOptions\n: {\n    \nsourceMap\n: true,\n    \ndeclaration\n: false,\n    \nmoduleResolution\n: \nnode\n,\n    \nemitDecoratorMetadata\n: true,\n    \nexperimentalDecorators\n: true,\n    \nlib\n: [\n      \nes2016\n\n    ],\n    \noutDir\n: \n../out-tsc/spec\n,\n    \nmodule\n: \ncommonjs\n,\n    \ntarget\n: \nes6\n,\n    \nbaseUrl\n: \n,\n    \ntypes\n: [\n      \njasmine\n,\n      \nnode\n\n    ]\n  },\n  \nfiles\n: [\n    \ntest.ts\n\n  ],\n  \ninclude\n: [\n    \n**/*.spec.ts\n\n  ]\n}\n\n\n\ne2e/tsconfig.e2e.json\n: configuration for the e2e tests.\n\n{\n  \ncompilerOptions\n: {\n    \nsourceMap\n: true,\n    \ndeclaration\n: false,\n    \nmoduleResolution\n: \nnode\n,\n    \nemitDecoratorMetadata\n: true,\n    \nexperimentalDecorators\n: true,\n    \nlib\n: [\n      \nes2016\n\n    ],\n    \noutDir\n: \n../dist/out-tsc-e2e\n,\n    \nmodule\n: \ncommonjs\n,\n    \ntarget\n: \nes6\n,\n    \ntypes\n:[\n      \njasmine\n,\n      \nnode\n\n    ]\n  }\n}\n\n\n\n\n\nThere is an additional root-level \ntsconfig.json\n that is used for IDE integration.\n\n{\n  \ncompileOnSave\n: false,\n  \ncompilerOptions\n: {\n    \noutDir\n: \n./dist/out-tsc\n,\n    \nsourceMap\n: true,\n    \ndeclaration\n: false,\n    \nmoduleResolution\n: \nnode\n,\n    \nemitDecoratorMetadata\n: true,\n    \nexperimentalDecorators\n: true,\n    \nlib\n: [\n      \nes2016\n\n    ]\n  }\n}\n\n\n\nYou can delete \ne2e/tsconfig.json\n and \nsrc/tsconfig.json\n after adding these.\n\n\nAlso update \n.angular-cli.json\n to use them inside \napps[0]\n:\n\n\ntsconfig\n: \ntsconfig.app.json\n,\n\ntestTsconfig\n: \ntsconfig.spec.json\n,\n\n\n\n\nThen update \nprotractor.conf.js\n to use the e2e config as well:\n\nbeforeLaunch\n:\n \nfunction\n()\n \n{\n\n  \nrequire\n(\nts-node\n).\nregister\n({\n\n    \nproject\n:\n \ne2e/tsconfig.e2e.json\n\n  \n});\n\n\n},\n\n\n\n\nThese configs have an \ntypes\n array where you should add any package you install via \n@types/*\n.\nThis array helps keep typings isolated to the apps that really need them and avoid problems with\nduplicate typings.\n\n\nFor instance, the unit test \ntsconfig\n has \njasmine\n and \nnode\n, which correspond to\n\n@types/jasmine\n and \n@types/node\n.\nAdd any typings you've installed to the appropriate \ntsconfig\n as well.\n\n\npackage.json\n\n\nWe've updated a lot of packages over the last months in order to keep projects up to date.\n\n\nAdditions or removals are found in bold below.\n\n\nPackages in \ndependencies\n:\n- \n@angular/*\n packages now have a \n^2.4.0\n minimum (\n^3.4.0\n for router)\n- \ncore-js\n remains unchanged at \n^2.4.1\n\n- \nrxjs\n to \n^5.1.0\n\n- \nzone.js\n to \n^0.7.6\n\n\nPackages in \ndependencies\n:\n- \n@angular/cli\n at \n1.0.0-rc.0\n replaces \nangular-cli\n\n- \n@angular/compiler-cli\n is also at \n^2.4.0\n\n- \n@types/jasmine\n remains unchanged and pinned at \n2.5.38\n\n- \n@types/node\n was updated to \n~6.0.60\n\n- \ncodelyzer\n was updated to \n~2.0.0\n\n- \njasmine-core\n was updated to \n~2.5.2\n\n- \njasmine-spec-reporter\n was \nremoved\n\n- \nkarma\n was updated to \n~1.4.1\n\n- \nkarma-chrome-launcher\n was updated to \n~2.0.0\n\n- \nkarma-cli\n was updated to \n~1.0.1\n\n- \nkarma-jasmine\n was updated to \n~1.1.0\n\n- \nkarma-jasmine-html-reporter\n was \nadded\n at \n^0.2.2\n\n- \nkarma-coverage-istanbul-reporter\n was \nadded\n at \n^0.2.0\n, replacing \nkarma-remap-istanbul\n\n- \nkarma-remap-istanbul\n was \nremoved\n\n- \nprotractor\n was updated to \n~5.1.0\n\n- \nts-node\n was updated to \n~2.0.0\n\n- \ntslint\n was updated to \n~4.4.2\n\n- \ntypescript\n was updated to \n~2.0.0\n\n\nSee the \nkarma\n and \nprotractor\n sections below for more\ninformation on changed packages.\n\n\nThe \nLinting rules\n section contains a list of rules that changed due to updates.\n\n\nWe also updated the scripts section to make it more simple:\n\n\nscripts\n: {\n  \nng\n: \nng\n,\n  \nstart\n: \nng serve\n,\n  \ntest\n: \nng test\n,\n  \nlint\n: \nng lint\n,\n  \ne2e\n: \nng e2e\n\n},\n\n\n\n\nkarma.conf.js\n\n\nKarma configuration suffered some changes to improve the code-coverage functionality,\nuse the new \n@angular/cli\n package, and the new HTML reporter.\n\n\nIn the \nframeworks\n array update the CLI package to \n@angular/cli\n.\n\n\nIn the \nplugins\n array:\n- add \nrequire('karma-jasmine-html-reporter')\n and \nrequire('karma-coverage-istanbul-reporter')\n\n- remove \nrequire('karma-remap-istanbul')\n\n- update the CLI plugin to \nrequire('@angular/cli/plugins/karma')\n\n\nAdd a new \nclient\n option just above \npatterns\n:\n\nclient:{\n  clearContext: false // leave Jasmine Spec Runner output visible in browser\n},\nfiles: [\n\n\n\nChange the preprocessor to use the new CLI package:\n\npreprocessors: {\n  \n./src/test.ts\n: [\n@angular/cli\n]\n},\n\n\n\nReplace \nremapIstanbulReporter\n with \ncoverageIstanbulReporter\n:\n\ncoverageIstanbulReporter: {\n  reports: [ \nhtml\n, \nlcovonly\n ],\n  fixWebpackSourcePaths: true\n},\n\n\n\nRemove the config entry from \nangularCli\n:\n\nangularCli: {\n  environment: \ndev\n\n},\n\n\n\nUpdate the reporters to use \ncoverage-istanbul\n instead of \nkarma-remap-istanbul\n, and\nadd \nkjhtml\n (short for karma-jasmine-html-reporter):\n\nreporters\n:\n \nconfig\n.\nangularCli\n \n \nconfig\n.\nangularCli\n.\ncodeCoverage\n\n          \n?\n \n[\nprogress\n,\n \ncoverage-istanbul\n]\n\n          \n:\n \n[\nprogress\n,\n \nkjhtml\n],\n\n\n\n\nprotractor.conf.js\n\n\nProtractor was updated to the new 5.x major version, but you shouldn't need to change much\nto take advantage of all its new features.\n\n\nReplace the spec reporter import from:\n\nvar SpecReporter = require(\njasmine-spec-reporter\n);\n\n\nto\n\nconst { SpecReporter } = require(\njasmine-spec-reporter\n);\n\n\n\nRemove \nuseAllAngular2AppRoots: true\n.\n\n\nUpdate \nbeforeLaunch\n as described in \nOne tsconfig per app\n:\n\nbeforeLaunch\n:\n \nfunction\n()\n \n{\n\n  \nrequire\n(\nts-node\n).\nregister\n({\n\n    \nproject\n:\n \ne2e/tsconfig.e2e.json\n\n  \n});\n\n\n},\n\n\n\n\nUpdate \nonPrepare\n:\n\nonPrepare\n()\n \n{\n\n  \njasmine.getEnv().addReporter(new\n \nSpecReporter({\n \nspec\n:\n \n{\n \ndisplayStacktrace\n:\n \ntrue\n \n}\n \n}\n));\n\n\n}\n\n\n\n\nLinting rules\n\n\nThe updated versions of \ntslint\n and \ncodelyzer\n contain a few rule changes that you should\napply to your \ntslint.json\n:\n\n\nAdd these new rules:\n\ncallable-types\n: true,\n\nimport-blacklist\n: [true, \nrxjs\n],\n\nimport-spacing\n: true,\n\ninterface-over-type-literal\n: true,\n\nno-empty-interface\n: true,\n\nno-string-throw\n: true,\n\nprefer-const\n: true,\n\ntypeof-compare\n: true,\n\nunified-signatures\n: true,\n\n\n\nUpdate \nno-inferrable-types\n to \n\"no-inferrable-types\": [true, \"ignore-params\"]\n.", 
            "title": "rc.0\u66f4\u65b0"
        }, 
        {
            "location": "/stories/rc.0-update/#angular-cli-rc0-migration-guide", 
            "text": "In this migration guide we'll be looking at some of the major changes to CLI projects in the\nlast two months.  Most of these changes were not breaking changes and your project should work fine without them.  But if you've been waiting for the perfect time to update, this is it!\nAlong with major rebuild speed increases, we've been busy adding a lot of features.  RC means release candidate and we intend to stick to it.\nUnless there is a major breaking bug, we will not change the public surface of the API and\nits generated projects.  This means that a project upgraded now should need no more code changes all the way to 1.0.  Documentation has also completely moved to  the wiki .\nThe new  Stories  section covers common usage\nscenarios, so be sure to have a look!  Below are the changes between a project generated two months ago, with  1.0.0-beta.24  and\na  1.0.0-rc.0  project.\nIf you kept your project up to date you might have a lot of these already.  You can find more details about changes between versions in  CHANGELOG.md .  If you prefer, you can also generate a new project in a separate folder using\n  ng new upgrade-project --skip-install  and compare the differences.", 
            "title": "Angular CLI RC.0 migration guide"
        }, 
        {
            "location": "/stories/rc.0-update/#angularcli", 
            "text": "Angular CLI can now be found on NPM under  @angular/cli  instead of  angular-cli , and has a\nminimum requirement of Node 6.9.0 or higher, together with NPM 3 or higher.  If you're using Angular CLI  beta.28  or less, you need to uninstall the  angular-cli  package. npm uninstall -g angular-cli\nnpm uninstall --save-dev angular-cli  To update Angular CLI to a new version, you must update both the global package and your project's\nlocal package.  Global package: npm uninstall -g @angular/cli\nnpm cache clean\nnpm install -g @angular/cli@latest  Local project package: rm -rf node_modules dist  # use rmdir on Windows \nnpm install --save-dev @angular/cli@latest\nnpm install", 
            "title": "@angular/cli"
        }, 
        {
            "location": "/stories/rc.0-update/#angular-clijson", 
            "text": "angular-cli.json  is now  .angular-cli.json , but we still accept the old config file name.  A few new properties have changed in it:", 
            "title": ".angular-cli.json"
        }, 
        {
            "location": "/stories/rc.0-update/#schema", 
            "text": "Add the  $schema  property above project for handy IDE support on your config file:  $schema :  ./node_modules/@angular/cli/lib/config/schema.json ,", 
            "title": "Schema"
        }, 
        {
            "location": "/stories/rc.0-update/#polyfills", 
            "text": "There is now a dedicated entry for polyfills ( #3812 )\ninside  apps[0].polyfills , between  main  and  test :  main :  main.ts , polyfills :  polyfills.ts , test :  test.ts ,  Add it and remove  import './polyfills.ts';  from  src/main.ts  and  src/test.ts .  We also added a lot of descriptive comments to the existing  src/polyfills.ts  file, explaining\nwhich polyfills are needed for what browsers.\nBe sure to check it out in a new project!", 
            "title": "Polyfills"
        }, 
        {
            "location": "/stories/rc.0-update/#environments", 
            "text": "A new  environmentSource  entry ( #4705 )\nreplaces the previous source entry inside environments.  To migrate angular-cli.json follow the example below:  Before: environments : {\n   source :  environments/environment.ts ,\n   dev :  environments/environment.ts ,\n   prod :  environments/environment.prod.ts \n}  After:  environmentSource :  environments/environment.ts , environments : {\n   dev :  environments/environment.ts ,\n   prod :  environments/environment.prod.ts \n}", 
            "title": "Environments"
        }, 
        {
            "location": "/stories/rc.0-update/#linting", 
            "text": "The CLI now uses the TSLint API ( #4248 )\nto lint several TS projects at once.  There is a new  lint  entry in  .angular-cli.json  between  e2e  and  test  where all linting\ntargets are listed:  e2e : {\n   protractor : {\n     config :  ./protractor.conf.js \n  }\n}, lint : [\n  {\n     project :  src/tsconfig.app.json \n  },\n  {\n     project :  src/tsconfig.spec.json \n  },\n  {\n     project :  e2e/tsconfig.e2e.json \n  }\n], test : {\n   karma : {\n     config :  ./karma.conf.js \n  }\n},", 
            "title": "Linting"
        }, 
        {
            "location": "/stories/rc.0-update/#generator-defaults", 
            "text": "Now you can list generator defaults per generator ( #4389 )\nin  defaults .  Instead of: defaults : {\n   styleExt :  css ,\n   prefixInterfaces : false,\n   inline : {\n     style : false,\n     template : false\n  },\n   spec : {\n     class : false,\n     component : true,\n     directive : true,\n     module : false,\n     pipe : true,\n     service : true\n  }\n}  You can instead list the flags as they appear on  the generator command : defaults : {\n   styleExt :  css ,\n   component : {\n     inlineTemplate : false,\n     spec : true\n  }\n}", 
            "title": "Generator defaults"
        }, 
        {
            "location": "/stories/rc.0-update/#one-tsconfig-per-app", 
            "text": "CLI projects now use one tsconfig per app ( #4924 ).   src/tsconfig.app.json : configuration for the Angular app. {\n   compilerOptions : {\n     sourceMap : true,\n     declaration : false,\n     moduleResolution :  node ,\n     emitDecoratorMetadata : true,\n     experimentalDecorators : true,\n     lib : [\n       es2016 ,\n       dom \n    ],\n     outDir :  ../out-tsc/app ,\n     target :  es5 ,\n     module :  es2015 ,\n     baseUrl :  ,\n     types : []\n  },\n   exclude : [\n     test.ts ,\n     **/*.spec.ts \n  ]\n}  src/tsconfig.spec.json : configuration for the unit tests. {\n   compilerOptions : {\n     sourceMap : true,\n     declaration : false,\n     moduleResolution :  node ,\n     emitDecoratorMetadata : true,\n     experimentalDecorators : true,\n     lib : [\n       es2016 \n    ],\n     outDir :  ../out-tsc/spec ,\n     module :  commonjs ,\n     target :  es6 ,\n     baseUrl :  ,\n     types : [\n       jasmine ,\n       node \n    ]\n  },\n   files : [\n     test.ts \n  ],\n   include : [\n     **/*.spec.ts \n  ]\n}  e2e/tsconfig.e2e.json : configuration for the e2e tests. {\n   compilerOptions : {\n     sourceMap : true,\n     declaration : false,\n     moduleResolution :  node ,\n     emitDecoratorMetadata : true,\n     experimentalDecorators : true,\n     lib : [\n       es2016 \n    ],\n     outDir :  ../dist/out-tsc-e2e ,\n     module :  commonjs ,\n     target :  es6 ,\n     types :[\n       jasmine ,\n       node \n    ]\n  }\n}   There is an additional root-level  tsconfig.json  that is used for IDE integration. {\n   compileOnSave : false,\n   compilerOptions : {\n     outDir :  ./dist/out-tsc ,\n     sourceMap : true,\n     declaration : false,\n     moduleResolution :  node ,\n     emitDecoratorMetadata : true,\n     experimentalDecorators : true,\n     lib : [\n       es2016 \n    ]\n  }\n}  You can delete  e2e/tsconfig.json  and  src/tsconfig.json  after adding these.  Also update  .angular-cli.json  to use them inside  apps[0] :  tsconfig :  tsconfig.app.json , testTsconfig :  tsconfig.spec.json ,  Then update  protractor.conf.js  to use the e2e config as well: beforeLaunch :   function ()   { \n   require ( ts-node ). register ({ \n     project :   e2e/tsconfig.e2e.json \n   });  },   These configs have an  types  array where you should add any package you install via  @types/* .\nThis array helps keep typings isolated to the apps that really need them and avoid problems with\nduplicate typings.  For instance, the unit test  tsconfig  has  jasmine  and  node , which correspond to @types/jasmine  and  @types/node .\nAdd any typings you've installed to the appropriate  tsconfig  as well.", 
            "title": "One tsconfig per app"
        }, 
        {
            "location": "/stories/rc.0-update/#packagejson", 
            "text": "We've updated a lot of packages over the last months in order to keep projects up to date.  Additions or removals are found in bold below.  Packages in  dependencies :\n-  @angular/*  packages now have a  ^2.4.0  minimum ( ^3.4.0  for router)\n-  core-js  remains unchanged at  ^2.4.1 \n-  rxjs  to  ^5.1.0 \n-  zone.js  to  ^0.7.6  Packages in  dependencies :\n-  @angular/cli  at  1.0.0-rc.0  replaces  angular-cli \n-  @angular/compiler-cli  is also at  ^2.4.0 \n-  @types/jasmine  remains unchanged and pinned at  2.5.38 \n-  @types/node  was updated to  ~6.0.60 \n-  codelyzer  was updated to  ~2.0.0 \n-  jasmine-core  was updated to  ~2.5.2 \n-  jasmine-spec-reporter  was  removed \n-  karma  was updated to  ~1.4.1 \n-  karma-chrome-launcher  was updated to  ~2.0.0 \n-  karma-cli  was updated to  ~1.0.1 \n-  karma-jasmine  was updated to  ~1.1.0 \n-  karma-jasmine-html-reporter  was  added  at  ^0.2.2 \n-  karma-coverage-istanbul-reporter  was  added  at  ^0.2.0 , replacing  karma-remap-istanbul \n-  karma-remap-istanbul  was  removed \n-  protractor  was updated to  ~5.1.0 \n-  ts-node  was updated to  ~2.0.0 \n-  tslint  was updated to  ~4.4.2 \n-  typescript  was updated to  ~2.0.0  See the  karma  and  protractor  sections below for more\ninformation on changed packages.  The  Linting rules  section contains a list of rules that changed due to updates.  We also updated the scripts section to make it more simple:  scripts : {\n   ng :  ng ,\n   start :  ng serve ,\n   test :  ng test ,\n   lint :  ng lint ,\n   e2e :  ng e2e \n},", 
            "title": "package.json"
        }, 
        {
            "location": "/stories/rc.0-update/#karmaconfjs", 
            "text": "Karma configuration suffered some changes to improve the code-coverage functionality,\nuse the new  @angular/cli  package, and the new HTML reporter.  In the  frameworks  array update the CLI package to  @angular/cli .  In the  plugins  array:\n- add  require('karma-jasmine-html-reporter')  and  require('karma-coverage-istanbul-reporter') \n- remove  require('karma-remap-istanbul') \n- update the CLI plugin to  require('@angular/cli/plugins/karma')  Add a new  client  option just above  patterns : client:{\n  clearContext: false // leave Jasmine Spec Runner output visible in browser\n},\nfiles: [  Change the preprocessor to use the new CLI package: preprocessors: {\n   ./src/test.ts : [ @angular/cli ]\n},  Replace  remapIstanbulReporter  with  coverageIstanbulReporter : coverageIstanbulReporter: {\n  reports: [  html ,  lcovonly  ],\n  fixWebpackSourcePaths: true\n},  Remove the config entry from  angularCli : angularCli: {\n  environment:  dev \n},  Update the reporters to use  coverage-istanbul  instead of  karma-remap-istanbul , and\nadd  kjhtml  (short for karma-jasmine-html-reporter): reporters :   config . angularCli     config . angularCli . codeCoverage \n           ?   [ progress ,   coverage-istanbul ] \n           :   [ progress ,   kjhtml ],", 
            "title": "karma.conf.js"
        }, 
        {
            "location": "/stories/rc.0-update/#protractorconfjs", 
            "text": "Protractor was updated to the new 5.x major version, but you shouldn't need to change much\nto take advantage of all its new features.  Replace the spec reporter import from: var SpecReporter = require( jasmine-spec-reporter ); \nto const { SpecReporter } = require( jasmine-spec-reporter );  Remove  useAllAngular2AppRoots: true .  Update  beforeLaunch  as described in  One tsconfig per app : beforeLaunch :   function ()   { \n   require ( ts-node ). register ({ \n     project :   e2e/tsconfig.e2e.json \n   });  },   Update  onPrepare : onPrepare ()   { \n   jasmine.getEnv().addReporter(new   SpecReporter({   spec :   {   displayStacktrace :   true   }   } ));  }", 
            "title": "protractor.conf.js"
        }, 
        {
            "location": "/stories/rc.0-update/#linting-rules", 
            "text": "The updated versions of  tslint  and  codelyzer  contain a few rule changes that you should\napply to your  tslint.json :  Add these new rules: callable-types : true, import-blacklist : [true,  rxjs ], import-spacing : true, interface-over-type-literal : true, no-empty-interface : true, no-string-throw : true, prefer-const : true, typeof-compare : true, unified-signatures : true,  Update  no-inferrable-types  to  \"no-inferrable-types\": [true, \"ignore-params\"] .", 
            "title": "Linting rules"
        }, 
        {
            "location": "/stories/code-coverage/", 
            "text": "\u4ee3\u7801\u8986\u76d6\u7387\n\n\n\u4f7f\u7528Angular CLI\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u4ee5\u53ca\u521b\u5efa\u4ee3\u7801\u8986\u76d6\u7387\u62a5\u544a\u3002\n\u4ee3\u7801\u8986\u76d6\u7387\u62a5\u544a\u5141\u8bb8\u6211\u4eec\u770b\u5230\u6211\u4eec\u7684\u4ee3\u7801\u5e93\u4e2d\u7684\u4efb\u4f55\u90e8\u5206\u53ef\u80fd\u6ca1\u6709\u901a\u8fc7\u6211\u4eec\u7684\u5355\u5143\u6d4b\u8bd5\u8fdb\u884c\u6b63\u786e\u6d4b\u8bd5\u3002\n\n\n\u8981\u751f\u6210\u8986\u76d6\u7387\u62a5\u544a\uff0c\u8bf7\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\n\n\nng \ntest\n --watch\n=\nfalse\n --code-coverage\n\n\n\n\n\u4e00\u65e6\u6d4b\u8bd5\u5b8c\u6210\uff0c\u4e00\u4e2a\u65b0\u7684\n/ coverage\n\u6587\u4ef6\u5939\u5c06\u51fa\u73b0\u5728\u9879\u76ee\u4e2d\u3002\n\u5728Finder\u6216Windows\u8d44\u6e90\u7ba1\u7406\u5668\u4e2d\u6253\u5f00\nindex.html\n\u6587\u4ef6\u3002\n\u60a8\u5e94\u8be5\u770b\u5230\u4e00\u4efd\u5305\u542b\u60a8\u7684\u6e90\u4ee3\u7801\u548c\u4ee3\u7801\u8986\u76d6\u7387\u503c\u7684\u62a5\u544a\u3002\n\n\n\u4f7f\u7528\u4ee3\u7801\u8986\u76d6\u767e\u5206\u6bd4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f30\u8ba1\u6211\u4eec\u7684\u4ee3\u7801\u6709\u591a\u5c11\u88ab\u6d4b\u8bd5\u3002\n\u7531\u60a8\u7684\u56e2\u961f\u51b3\u5b9a\u5e94\u8be5\u6d4b\u8bd5\u591a\u5c11\u4ee3\u7801\u3002\n\n\n\u4ee3\u7801\u8986\u76d6\u5b9e\u65bd\n\n\n\u5982\u679c\u60a8\u7684\u56e2\u961f\u51b3\u5b9a\u5c06\u8bbe\u5b9a\u7684\u6700\u5c0f\u6570\u91cf\u4f5c\u4e3a\u5355\u5143\u6d4b\u8bd5\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528Angular CLI\u5f3a\u5236\u6267\u884c\u6b64\u6700\u5c0f\u503c\u3002\n\u4f8b\u5982\uff0c\u6211\u4eec\u7684\u56e2\u961f\u5e0c\u671b\u4ee3\u7801\u5e93\u81f3\u5c11\u670980\uff05\u7684\u4ee3\u7801\u8986\u76d6\u7387\u3002\n\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u8bf7\u6253\u5f00\nkarma.conf.js\n\uff0c\u5e76\u5728\ncoverageIstanbulReporter\uff1a\n\u952e\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9\n\n\ncoverageIstanbulReporter\n:\n \n{\n\n  \nreports\n:\n \n[\n \nhtml\n,\n \nlcovonly\n \n],\n\n  \nfixWebpackSourcePaths\n:\n \ntrue\n,\n\n  \nthresholds\n:\n \n{\n\n    \nstatements\n:\n \n80\n,\n\n    \nlines\n:\n \n80\n,\n\n    \nbranches\n:\n \n80\n,\n\n    \nfunctions\n:\n \n80\n\n  \n}\n\n\n}\n\n\n\n\n\n\u5728\u9879\u76ee\u4e2d\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c\nthresholds\n\u5c5e\u6027\u5c06\u5f3a\u5236\u6267\u884c\u81f3\u5c1180\uff05\u7684\u4ee3\u7801\u8986\u76d6\u7387\u3002", 
            "title": "\u4ee3\u7801\u8986\u76d6\u7387"
        }, 
        {
            "location": "/stories/code-coverage/#_1", 
            "text": "\u4f7f\u7528Angular CLI\uff0c\u6211\u4eec\u53ef\u4ee5\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u4ee5\u53ca\u521b\u5efa\u4ee3\u7801\u8986\u76d6\u7387\u62a5\u544a\u3002\n\u4ee3\u7801\u8986\u76d6\u7387\u62a5\u544a\u5141\u8bb8\u6211\u4eec\u770b\u5230\u6211\u4eec\u7684\u4ee3\u7801\u5e93\u4e2d\u7684\u4efb\u4f55\u90e8\u5206\u53ef\u80fd\u6ca1\u6709\u901a\u8fc7\u6211\u4eec\u7684\u5355\u5143\u6d4b\u8bd5\u8fdb\u884c\u6b63\u786e\u6d4b\u8bd5\u3002  \u8981\u751f\u6210\u8986\u76d6\u7387\u62a5\u544a\uff0c\u8bf7\u5728\u9879\u76ee\u7684\u6839\u76ee\u5f55\u4e0b\u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4  ng  test  --watch = false  --code-coverage  \u4e00\u65e6\u6d4b\u8bd5\u5b8c\u6210\uff0c\u4e00\u4e2a\u65b0\u7684 / coverage \u6587\u4ef6\u5939\u5c06\u51fa\u73b0\u5728\u9879\u76ee\u4e2d\u3002\n\u5728Finder\u6216Windows\u8d44\u6e90\u7ba1\u7406\u5668\u4e2d\u6253\u5f00 index.html \u6587\u4ef6\u3002\n\u60a8\u5e94\u8be5\u770b\u5230\u4e00\u4efd\u5305\u542b\u60a8\u7684\u6e90\u4ee3\u7801\u548c\u4ee3\u7801\u8986\u76d6\u7387\u503c\u7684\u62a5\u544a\u3002  \u4f7f\u7528\u4ee3\u7801\u8986\u76d6\u767e\u5206\u6bd4\uff0c\u6211\u4eec\u53ef\u4ee5\u4f30\u8ba1\u6211\u4eec\u7684\u4ee3\u7801\u6709\u591a\u5c11\u88ab\u6d4b\u8bd5\u3002\n\u7531\u60a8\u7684\u56e2\u961f\u51b3\u5b9a\u5e94\u8be5\u6d4b\u8bd5\u591a\u5c11\u4ee3\u7801\u3002", 
            "title": "\u4ee3\u7801\u8986\u76d6\u7387"
        }, 
        {
            "location": "/stories/code-coverage/#_2", 
            "text": "\u5982\u679c\u60a8\u7684\u56e2\u961f\u51b3\u5b9a\u5c06\u8bbe\u5b9a\u7684\u6700\u5c0f\u6570\u91cf\u4f5c\u4e3a\u5355\u5143\u6d4b\u8bd5\uff0c\u60a8\u53ef\u4ee5\u4f7f\u7528Angular CLI\u5f3a\u5236\u6267\u884c\u6b64\u6700\u5c0f\u503c\u3002\n\u4f8b\u5982\uff0c\u6211\u4eec\u7684\u56e2\u961f\u5e0c\u671b\u4ee3\u7801\u5e93\u81f3\u5c11\u670980\uff05\u7684\u4ee3\u7801\u8986\u76d6\u7387\u3002\n\u8981\u542f\u7528\u6b64\u529f\u80fd\uff0c\u8bf7\u6253\u5f00 karma.conf.js \uff0c\u5e76\u5728 coverageIstanbulReporter\uff1a \u952e\u4e2d\u6dfb\u52a0\u4ee5\u4e0b\u5185\u5bb9  coverageIstanbulReporter :   { \n   reports :   [   html ,   lcovonly   ], \n   fixWebpackSourcePaths :   true , \n   thresholds :   { \n     statements :   80 , \n     lines :   80 , \n     branches :   80 , \n     functions :   80 \n   }  }   \u5728\u9879\u76ee\u4e2d\u8fd0\u884c\u5355\u5143\u6d4b\u8bd5\u65f6\uff0c thresholds \u5c5e\u6027\u5c06\u5f3a\u5236\u6267\u884c\u81f3\u5c1180\uff05\u7684\u4ee3\u7801\u8986\u76d6\u7387\u3002", 
            "title": "\u4ee3\u7801\u8986\u76d6\u5b9e\u65bd"
        }, 
        {
            "location": "/stories/disk-serve/", 
            "text": "Serve from Disk\n\n\nThe CLI supports running a live browser reload experience to users by running \nng serve\n. This will compile the application upon file saves and reload the browser with the newly compiled application. This is done by hosting the application in memory and serving it via \nwebpack-dev-server\n.\n\n\nIf you wish to get a similar experience with the application output to disk please use the steps below. This practice will allow you to ensure that serving the contents of your \ndist\n dir will be closer to how your application will behave when it is deployed.\n\n\nEnvironment Setup\n\n\nInstall a web server\n\n\nYou will not be using webpack-dev-server, so you will need to install a web server for the browser to request the application. There are many to choose from but a good one to try is \nlite-server\n as it will auto-reload your browser when new files are output.\n\n\nUsage\n\n\nYou will need two terminals to get the live-reload experience. The first will run the build in a watch mode to compile the application to the \ndist\n folder. The second will run the web server against the \ndist\n folder. The combination of these two processes will mimic the same behavior of ng serve.\n\n\n1st terminal - Start the build\n\n\nng build --watch\n\n\n\n\n2nd terminal - Start the web server\n\n\nlite-server --baseDir\n=\ndist\n\n\n\nWhen using \nlite-server\n the default browser will open to the appropriate URL.", 
            "title": "\u78c1\u76d8\u670d\u52a1"
        }, 
        {
            "location": "/stories/disk-serve/#serve-from-disk", 
            "text": "The CLI supports running a live browser reload experience to users by running  ng serve . This will compile the application upon file saves and reload the browser with the newly compiled application. This is done by hosting the application in memory and serving it via  webpack-dev-server .  If you wish to get a similar experience with the application output to disk please use the steps below. This practice will allow you to ensure that serving the contents of your  dist  dir will be closer to how your application will behave when it is deployed.", 
            "title": "Serve from Disk"
        }, 
        {
            "location": "/stories/disk-serve/#environment-setup", 
            "text": "", 
            "title": "Environment Setup"
        }, 
        {
            "location": "/stories/disk-serve/#install-a-web-server", 
            "text": "You will not be using webpack-dev-server, so you will need to install a web server for the browser to request the application. There are many to choose from but a good one to try is  lite-server  as it will auto-reload your browser when new files are output.", 
            "title": "Install a web server"
        }, 
        {
            "location": "/stories/disk-serve/#usage", 
            "text": "You will need two terminals to get the live-reload experience. The first will run the build in a watch mode to compile the application to the  dist  folder. The second will run the web server against the  dist  folder. The combination of these two processes will mimic the same behavior of ng serve.", 
            "title": "Usage"
        }, 
        {
            "location": "/stories/disk-serve/#1st-terminal-start-the-build", 
            "text": "ng build --watch", 
            "title": "1st terminal - Start the build"
        }, 
        {
            "location": "/stories/disk-serve/#2nd-terminal-start-the-web-server", 
            "text": "lite-server --baseDir = dist  \nWhen using  lite-server  the default browser will open to the appropriate URL.", 
            "title": "2nd terminal - Start the web server"
        }, 
        {
            "location": "/stories/linked-library/", 
            "text": "\u94fe\u63a5\u5e93\n\n\n\u5728\u5e93\u5de5\u4f5c\u65f6\uff0c \u901a\u5e38\u4f7f\u7528\nnpm link\n\u6765\u907f\u514d\u5728\u6bcf\u4e2a\u7248\u672c\u4e0a\u91cd\u65b0\u5b89\u88c5\u5e93\u3002\n\n\n\u867d\u7136\u8fd9\u975e\u5e38\u6709\u7528\uff0c\u4f46\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\u9700\u8981\u6ce8\u610f\u3002\n\n\n\u8be5\u5e93\u9700\u8981\u517c\u5bb9AOT\n\n\nAngular CLI\u5373\u4f7f\u6ca1\u6709\n--aot\n\u6807\u5fd7\u4e5f\u4f1a\u8fdb\u884c\u9759\u6001\u5206\u6790\uff0c\u4ee5\u4fbf\u68c0\u6d4b\u61d2\u60f0\u8def\u7531\u3002\n\u5982\u679c\u4f60\u7684\u5e93\u4e0d\u517c\u5bb9AOT\uff0c\u4f60\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u9759\u6001\u5206\u6790\u9519\u8bef\u3002\n\n\n\u5e93\u4ecd\u7136\u9700\u8981\u5728\u6bcf\u6b21\u66f4\u6539\u65f6\u91cd\u5efa\n\n\nAngular\u5e93\u901a\u5e38\u4f7f\u7528TypeScript\u6784\u5efa\uff0c\u56e0\u6b64\u9700\u8981\u5728\u53d1\u5e03\u524d\u8fdb\u884c\u6784\u5efa\u3002\n\u5bf9\u4e8e\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u5373\u4f7f\u6ca1\u6709\u6784\u5efa\u6b65\u9aa4\uff0c\u94fe\u63a5\u5e93\u4e5f\u53ef\u80fd\u5de5\u4f5c\uff0c\u4f46\u8fd9\u662f\u4f8b\u5916\u800c\u4e0d\u662f\u5e38\u89c4\u3002\n\n\n\u5982\u679c\u5e93\u4e0d\u662f\u4f7f\u7528\u81ea\u5df1\u7684\u6784\u5efa\u6b65\u9aa4\u6784\u5efa\u7684\uff0c \u90a3\u4e48\u5b83\u6b63\u5728\u7531Angular CLI\u6784\u5efa\u7cfb\u7edf\u8fdb\u884c\u7f16\u8bd1\uff0c\u5e76\u4e14\u4e0d\u80fd\u4fdd\u8bc1\u5b83\u5c06\u88ab\u6b63\u786e\u6784\u5efa\u3002\n\u5373\u4f7f\u5b83\u9002\u7528\u4e8e\u5f00\u53d1\uff0c\u5b83\u5728\u90e8\u7f72\u65f6\u4e5f\u53ef\u80fd\u65e0\u6cd5\u8fd0\u884c\u3002\n\n\nWhen linking a library remember to have your build step running in watch mode and the library's \npackage.json\n pointing at the correct entry points (e.g. 'main' should point at a \n.js\n file, not a \n.ts\n file).\n\n\n\u4f7f\u7528TypesScript\u8def\u5f84\u6620\u5c04\u8fdb\u884c\u5bf9\u7b49\u5173\u7cfb\n\n\nAngular\u5e93\u5e94\u8be5\u5217\u51fa\u6240\u6709\n@angular/*\n\u4f9d\u8d56\u5173\u7cfb\nPeer Dependencies\n.\n\u8fd9\u786e\u4fdd\u4e86\u5f53\u6a21\u5757\u8981\u6c42Angular\u65f6\uff0c\u5b83\u4eec\u90fd\u5f97\u5230\u5b8c\u5168\u76f8\u540c\u7684\u6a21\u5757\u3002\n\u5982\u679c\u4e00\u4e2a\u5e93\u5728\ndependencies\n\u4e2d\u5217\u51fa\n@angular/core\n\u800c\u4e0d\u662f\npeerDependencies\n\uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a\n\u4e0d\u540c\u7684\n Angular\u6a21\u5757\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65ad\u3002\n\n\n\u5728\u5f00\u53d1\u4e00\u4e2a\u5e93\u65f6\uff0c\u4f60\u9700\u8981\u901a\u8fc7\ndevDependencies\n\u6765\u5b89\u88c5\u6240\u6709\u7684\u540c\u7ea7\u4f9d\u8d56\uff0c\u5426\u5219\u4f60\u5c06\u65e0\u6cd5\u7f16\u8bd1\u3002\n\u7136\u540e\uff0c\u94fe\u63a5\u5e93\u5c06\u62e5\u6709\u5b83\u81ea\u5df1\u7684\u4e00\u7ec4Angular\u5e93\uff0c\u5b83\u7528\u4e8e\u6784\u5efa\uff0c\u4f4d\u4e8e\u5b83\u7684\nnode_modules\n\u6587\u4ef6\u5939\u4e2d\u3002\n\u8fd9\u53ef\u80fd\u4f1a\u5728\u6784\u5efa\u6216\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u65f6\u9020\u6210\u95ee\u9898\u3002\n\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528TypeScript\n\u8def\u5f84\u6620\u5c04\n.\n\u6709\u4e86\u5b83\uff0c\u4f60\u53ef\u4ee5\u544a\u8bc9TypeScript\u5b83\u5e94\u8be5\u4ece\u7279\u5b9a\u4f4d\u7f6e\u52a0\u8f7d\u4e00\u4e9b\u6a21\u5757\u3002\n\n\n\u60a8\u5e94\u8be5\u5728\n./tsconfig.json\n\u4e2d\u5217\u51fa\u60a8\u7684\u5e93\u4f7f\u7528\u7684\u6240\u6709\u5bf9\u7b49\u9879\u4f9d\u8d56\u9879\uff0c\u5e76\u5c06\u5b83\u4eec\u6307\u5411\u5e94\u7528\u7a0b\u5e8f\nnode_modules\n\u6587\u4ef6\u5939\u4e2d\u7684\u672c\u5730\u526f\u672c\u3002\n\u8fd9\u53ef\u4ee5\u786e\u4fdd\u60a8\u59cb\u7ec8\u4f1a\u52a0\u8f7d\u60a8\u7684\u5e93\u8981\u6c42\u7684\u6a21\u5757\u7684\u672c\u5730\u526f\u672c\u3002\n\n\n{\n\n  \ncompilerOptions\n:\n \n{\n\n    \n//\n \n...\n\n    \n//\n \nNote:\n \nthese\n \npaths\n \nare\n \nrelative\n \nto\n \n`baseUrl`\n \npath.\n\n    \npaths\n:\n \n{\n\n      \n@angular/*\n:\n \n[\n\n        \n../node_modules/@angular/*\n\n      \n]\n\n    \n}\n\n  \n}\n\n\n}", 
            "title": "\u94fe\u63a5\u5e93"
        }, 
        {
            "location": "/stories/linked-library/#_1", 
            "text": "\u5728\u5e93\u5de5\u4f5c\u65f6\uff0c \u901a\u5e38\u4f7f\u7528 npm link \u6765\u907f\u514d\u5728\u6bcf\u4e2a\u7248\u672c\u4e0a\u91cd\u65b0\u5b89\u88c5\u5e93\u3002  \u867d\u7136\u8fd9\u975e\u5e38\u6709\u7528\uff0c\u4f46\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\u9700\u8981\u6ce8\u610f\u3002", 
            "title": "\u94fe\u63a5\u5e93"
        }, 
        {
            "location": "/stories/linked-library/#aot", 
            "text": "Angular CLI\u5373\u4f7f\u6ca1\u6709 --aot \u6807\u5fd7\u4e5f\u4f1a\u8fdb\u884c\u9759\u6001\u5206\u6790\uff0c\u4ee5\u4fbf\u68c0\u6d4b\u61d2\u60f0\u8def\u7531\u3002\n\u5982\u679c\u4f60\u7684\u5e93\u4e0d\u517c\u5bb9AOT\uff0c\u4f60\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a\u9759\u6001\u5206\u6790\u9519\u8bef\u3002", 
            "title": "\u8be5\u5e93\u9700\u8981\u517c\u5bb9AOT"
        }, 
        {
            "location": "/stories/linked-library/#_2", 
            "text": "Angular\u5e93\u901a\u5e38\u4f7f\u7528TypeScript\u6784\u5efa\uff0c\u56e0\u6b64\u9700\u8981\u5728\u53d1\u5e03\u524d\u8fdb\u884c\u6784\u5efa\u3002\n\u5bf9\u4e8e\u7b80\u5355\u7684\u60c5\u51b5\uff0c\u5373\u4f7f\u6ca1\u6709\u6784\u5efa\u6b65\u9aa4\uff0c\u94fe\u63a5\u5e93\u4e5f\u53ef\u80fd\u5de5\u4f5c\uff0c\u4f46\u8fd9\u662f\u4f8b\u5916\u800c\u4e0d\u662f\u5e38\u89c4\u3002  \u5982\u679c\u5e93\u4e0d\u662f\u4f7f\u7528\u81ea\u5df1\u7684\u6784\u5efa\u6b65\u9aa4\u6784\u5efa\u7684\uff0c \u90a3\u4e48\u5b83\u6b63\u5728\u7531Angular CLI\u6784\u5efa\u7cfb\u7edf\u8fdb\u884c\u7f16\u8bd1\uff0c\u5e76\u4e14\u4e0d\u80fd\u4fdd\u8bc1\u5b83\u5c06\u88ab\u6b63\u786e\u6784\u5efa\u3002\n\u5373\u4f7f\u5b83\u9002\u7528\u4e8e\u5f00\u53d1\uff0c\u5b83\u5728\u90e8\u7f72\u65f6\u4e5f\u53ef\u80fd\u65e0\u6cd5\u8fd0\u884c\u3002  When linking a library remember to have your build step running in watch mode and the library's  package.json  pointing at the correct entry points (e.g. 'main' should point at a  .js  file, not a  .ts  file).", 
            "title": "\u5e93\u4ecd\u7136\u9700\u8981\u5728\u6bcf\u6b21\u66f4\u6539\u65f6\u91cd\u5efa"
        }, 
        {
            "location": "/stories/linked-library/#typesscript", 
            "text": "Angular\u5e93\u5e94\u8be5\u5217\u51fa\u6240\u6709 @angular/* \u4f9d\u8d56\u5173\u7cfb Peer Dependencies .\n\u8fd9\u786e\u4fdd\u4e86\u5f53\u6a21\u5757\u8981\u6c42Angular\u65f6\uff0c\u5b83\u4eec\u90fd\u5f97\u5230\u5b8c\u5168\u76f8\u540c\u7684\u6a21\u5757\u3002\n\u5982\u679c\u4e00\u4e2a\u5e93\u5728 dependencies \u4e2d\u5217\u51fa @angular/core \u800c\u4e0d\u662f peerDependencies \uff0c\u90a3\u4e48\u5b83\u53ef\u80fd\u4f1a\u5f97\u5230\u4e00\u4e2a \u4e0d\u540c\u7684  Angular\u6a21\u5757\uff0c\u8fd9\u4f1a\u5bfc\u81f4\u4f60\u7684\u5e94\u7528\u7a0b\u5e8f\u4e2d\u65ad\u3002  \u5728\u5f00\u53d1\u4e00\u4e2a\u5e93\u65f6\uff0c\u4f60\u9700\u8981\u901a\u8fc7 devDependencies \u6765\u5b89\u88c5\u6240\u6709\u7684\u540c\u7ea7\u4f9d\u8d56\uff0c\u5426\u5219\u4f60\u5c06\u65e0\u6cd5\u7f16\u8bd1\u3002\n\u7136\u540e\uff0c\u94fe\u63a5\u5e93\u5c06\u62e5\u6709\u5b83\u81ea\u5df1\u7684\u4e00\u7ec4Angular\u5e93\uff0c\u5b83\u7528\u4e8e\u6784\u5efa\uff0c\u4f4d\u4e8e\u5b83\u7684 node_modules \u6587\u4ef6\u5939\u4e2d\u3002\n\u8fd9\u53ef\u80fd\u4f1a\u5728\u6784\u5efa\u6216\u8fd0\u884c\u5e94\u7528\u7a0b\u5e8f\u65f6\u9020\u6210\u95ee\u9898\u3002  \u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528TypeScript \u8def\u5f84\u6620\u5c04 .\n\u6709\u4e86\u5b83\uff0c\u4f60\u53ef\u4ee5\u544a\u8bc9TypeScript\u5b83\u5e94\u8be5\u4ece\u7279\u5b9a\u4f4d\u7f6e\u52a0\u8f7d\u4e00\u4e9b\u6a21\u5757\u3002  \u60a8\u5e94\u8be5\u5728 ./tsconfig.json \u4e2d\u5217\u51fa\u60a8\u7684\u5e93\u4f7f\u7528\u7684\u6240\u6709\u5bf9\u7b49\u9879\u4f9d\u8d56\u9879\uff0c\u5e76\u5c06\u5b83\u4eec\u6307\u5411\u5e94\u7528\u7a0b\u5e8f node_modules \u6587\u4ef6\u5939\u4e2d\u7684\u672c\u5730\u526f\u672c\u3002\n\u8fd9\u53ef\u4ee5\u786e\u4fdd\u60a8\u59cb\u7ec8\u4f1a\u52a0\u8f7d\u60a8\u7684\u5e93\u8981\u6c42\u7684\u6a21\u5757\u7684\u672c\u5730\u526f\u672c\u3002  { \n   compilerOptions :   { \n     //   ... \n     //   Note:   these   paths   are   relative   to   `baseUrl`   path. \n     paths :   { \n       @angular/* :   [ \n         ../node_modules/@angular/* \n       ] \n     } \n   }  }", 
            "title": "\u4f7f\u7528TypesScript\u8def\u5f84\u6620\u5c04\u8fdb\u884c\u5bf9\u7b49\u5173\u7cfb"
        }, 
        {
            "location": "/stories/moving-into-the-cli/", 
            "text": "Moving your project to Angular CLI\n\n\nThe easiest way to move an existing project to Angular CLI is to copy your\napplication files into a new, empty CLI project.\n\n\nLet's see how to do it step by step.\nHere we use a project made with the \nofficial QuickStart\n\nas an example, but you should be able to adjust these instructions to other setups.\n\n\nNote for Windows users: we show unix commands here like \ncp -r\n to copy and \nrm -rf\n to delete files.\nWindows does not have these commands so use Explorer instead.\n\n\nStart with preparing your existing project folder. We'll refer to it as \nawesome-app\n.\n- commit and push your existing changes.\n- clean your folder from temporary files and ignored files using \ngit clean -fdx\n.\n- rename your project folder to \nold-awesome-app\n.\n\n\nNow make a new project on the same parent folder as \nold-awesome-app\n using Angular CLI.\n- Verify you have the \nAngular CLI prerequisites\n.\n- Install the CLI globally: \nnpm install -g @angular/cli\n.\n- Make a new app: \nng new awesome-app\n.\n- Move into the folder: \ncd awesome-app\n.\n- Test your app works: \nng serve --open\n.\n\n\nCopy over your app files.\n- Remove the existing app: \nrm -rf src/app src/styles.css src/index.html e2e\n.\n- Copy \nsrc/app/\n, \nsrc/index.html\n, \nsrc/styles.css\n and \ne2e/\n from your old app.\nIf you don't have a \nsrc/\n folder then these files and folders should be\nat the root of the old project instead.\n\ncp -r ../old-awesome-app/src/app ./src/app\ncp ../old-awesome-app/src/index.html ./src/index.html\ncp ../old-awesome-app/src/styles.css ./src/styles.css\ncp -r ../old-awesome-app/e2e ./e2e/\n\n\n- Don't copy \n../old-awesome-app/src/main.ts\n. Instead compare it to the new \n./src/main.ts\n\nand manually copy any extra code the old one has.\n- Compare \n../old-awesome-app/package.json\n to the new \n./package.json\n and add in your\nthird party libraries and \n@types/*\n packages, project descriptions and any other fields.\n- Run \nnpm install\n to install any packages you added.\n- Copy over any other files your app needs like images into \nsrc/assets\n.\nAdjust paths on your app to use this folder e.g. \nimg src='assets/my-image.jpg\n.\n\n\nThere are a few adjustments you need to do to use the CLI build system.\n- Change any absolute paths you have for \ntemplateUrl\n, \nstyleUrls\n or lazy loaded NgModules to\nrelative paths instead.\n- Remove any \nmodule.id\n that you have in \n@Component\n metadata. They aren't needed in the CLI.\n- Polyfills are listed in \n./src/polyfills.ts\n so remove \ncore-js\n and \nzone.js\n from \nindex.html\n.\n- SystemJS is not needed anymore, so remove it from \nindex.html\n as well.\n- Instead of using \nscript\n and \nlink\n tags directly in \nindex.html\n, use\n\n.angular-cli.json\n instead.\n  - Look for the \nstyles\n array in \n.angular-cli.json\n and add in any CSS files you have in\n\nsrc/index.html\n. Use a relative path from \n./src/\n.\n  - Do the same for any remaining script tags as well, using the \nscripts\n array instead.\n\n\nThe final step is to copy your git history so you can continue working without losing anything:\n- Copy over the git folder: \ncp -r ../old-awesome-app/.git .git\n\n- Commit and push your changes as normal.\n\n\nYou can now delete \n../old-awesome-app\n, and you're done!\n\n\nThe CLI runs static analysis on your code to ensure it's AOT ready, so you might run into a few\nnew compilation errors that weren't there before.\nCheck out this \nhandy list of AOT Do's and Dont's\n\nif you get any unfamiliar errors.", 
            "title": "\u79fb\u5165CLI"
        }, 
        {
            "location": "/stories/moving-into-the-cli/#moving-your-project-to-angular-cli", 
            "text": "The easiest way to move an existing project to Angular CLI is to copy your\napplication files into a new, empty CLI project.  Let's see how to do it step by step.\nHere we use a project made with the  official QuickStart \nas an example, but you should be able to adjust these instructions to other setups.  Note for Windows users: we show unix commands here like  cp -r  to copy and  rm -rf  to delete files.\nWindows does not have these commands so use Explorer instead.  Start with preparing your existing project folder. We'll refer to it as  awesome-app .\n- commit and push your existing changes.\n- clean your folder from temporary files and ignored files using  git clean -fdx .\n- rename your project folder to  old-awesome-app .  Now make a new project on the same parent folder as  old-awesome-app  using Angular CLI.\n- Verify you have the  Angular CLI prerequisites .\n- Install the CLI globally:  npm install -g @angular/cli .\n- Make a new app:  ng new awesome-app .\n- Move into the folder:  cd awesome-app .\n- Test your app works:  ng serve --open .  Copy over your app files.\n- Remove the existing app:  rm -rf src/app src/styles.css src/index.html e2e .\n- Copy  src/app/ ,  src/index.html ,  src/styles.css  and  e2e/  from your old app.\nIf you don't have a  src/  folder then these files and folders should be\nat the root of the old project instead. cp -r ../old-awesome-app/src/app ./src/app\ncp ../old-awesome-app/src/index.html ./src/index.html\ncp ../old-awesome-app/src/styles.css ./src/styles.css\ncp -r ../old-awesome-app/e2e ./e2e/ \n- Don't copy  ../old-awesome-app/src/main.ts . Instead compare it to the new  ./src/main.ts \nand manually copy any extra code the old one has.\n- Compare  ../old-awesome-app/package.json  to the new  ./package.json  and add in your\nthird party libraries and  @types/*  packages, project descriptions and any other fields.\n- Run  npm install  to install any packages you added.\n- Copy over any other files your app needs like images into  src/assets .\nAdjust paths on your app to use this folder e.g.  img src='assets/my-image.jpg .  There are a few adjustments you need to do to use the CLI build system.\n- Change any absolute paths you have for  templateUrl ,  styleUrls  or lazy loaded NgModules to\nrelative paths instead.\n- Remove any  module.id  that you have in  @Component  metadata. They aren't needed in the CLI.\n- Polyfills are listed in  ./src/polyfills.ts  so remove  core-js  and  zone.js  from  index.html .\n- SystemJS is not needed anymore, so remove it from  index.html  as well.\n- Instead of using  script  and  link  tags directly in  index.html , use .angular-cli.json  instead.\n  - Look for the  styles  array in  .angular-cli.json  and add in any CSS files you have in src/index.html . Use a relative path from  ./src/ .\n  - Do the same for any remaining script tags as well, using the  scripts  array instead.  The final step is to copy your git history so you can continue working without losing anything:\n- Copy over the git folder:  cp -r ../old-awesome-app/.git .git \n- Commit and push your changes as normal.  You can now delete  ../old-awesome-app , and you're done!  The CLI runs static analysis on your code to ensure it's AOT ready, so you might run into a few\nnew compilation errors that weren't there before.\nCheck out this  handy list of AOT Do's and Dont's \nif you get any unfamiliar errors.", 
            "title": "Moving your project to Angular CLI"
        }, 
        {
            "location": "/stories/moving-out-of-the-cli/", 
            "text": "Moving your project out of Angular CLI\n\n\nEach project is unique, and even though we try to cater to most setups in Angular CLI sometimes\nyou need a custom setup.\n\n\nEven if you need to use a different build system, you can still use other Angular CLI features\nlike \nng generate\n, \nng lint\n, \nng test\n and \nng e2e\n by leaving in \n.angular-cli.json\n and\nsupporting files like \nsrc/test.ts\n.\n\n\nMoving out of the CLI is very similar to \nMoving into the CLI\n.\nYou'll have to make a brand new project using your new project seed, move your app files and\ncater to any changes in the build process.\n\n\nStart with preparing your existing project folder. We'll refer to it as \nawesome-app\n.\n- commit and push your existing changes.\n- clean your folder from temporary files and ignored files using \ngit clean -fdx\n.\n- rename your project folder to \nold-awesome-app\n.\n\n\nNow make a new project on the same parent folder as \nold-awesome-app\n.\n- Make a new app using your new project seed in a new \nawesome-app\n folder.\n- Move into the folder: \ncd awesome-app\n.\n\n\nCopy over your app files.\n- Locate \napp/\n, \nstyles.css\n and the end-to-end test folder in your new project.\n- Replace them with the corresponding files from \n../old-awesome-app\n.\n- If your styles are not in CSS, you'll need to convert them to CSS since the quickstart doesn't\nuse style preprocessors. You can also add preprocessor support yourself.\n- Copy over the code your app needs from the \nenvironments/\n folder, if any.\nYou'll have to find another way to switch environments on the Quickstart.\n- Don't copy \n../old-awesome-app/src/main.ts\n. It contains custom logic for the CLI\n\nenvironments\n feature. Instead compare code and take only what you need.\n- Do the same for \nindex.html\n.\n- Compare \n../old-awesome-app/package.json\n to the new \n./package.json\n and add in your\nthird party libraries and \n@types/*\n packages, project descriptions and any other fields.\n- Run \nnpm install\n to install any packages you added.\n- Copy over any other files your app needs like images, icons, etc.\n\n\nYou might also need to make adjustments to conform to your new build system.\n- The CLI only allows relative paths in \ntemplateUrl\n, \nstyleUrls\n or lazy loaded NgModules.\nYou might need to change these.\n- Polyfills are listed in \n../old-awesome-app/src/polyfills.ts\n. Incorporate these into the new\nproject.\n- The CLI lists used \nscript\n and \nlink\n tags in the \n.angular-cli.json\n \nscripts\n\nand \nstyles\n array. Check import these in your new project and add them accordingly.\n\n\nThe final step is to copy your git history so you can continue working without losing anything:\n- Copy over the git folder: \ncp -r ../old-awesome-app/.git .git\n\n- Commit and push your changes as normal.\n\n\nYou can now delete \n../old-awesome-app\n, and you're done!\n\n\nEvery project seed does things slightly different so if you are running into problems be sure\nto ask in their issue tracker.", 
            "title": "\u79fb\u51faCLI"
        }, 
        {
            "location": "/stories/moving-out-of-the-cli/#moving-your-project-out-of-angular-cli", 
            "text": "Each project is unique, and even though we try to cater to most setups in Angular CLI sometimes\nyou need a custom setup.  Even if you need to use a different build system, you can still use other Angular CLI features\nlike  ng generate ,  ng lint ,  ng test  and  ng e2e  by leaving in  .angular-cli.json  and\nsupporting files like  src/test.ts .  Moving out of the CLI is very similar to  Moving into the CLI .\nYou'll have to make a brand new project using your new project seed, move your app files and\ncater to any changes in the build process.  Start with preparing your existing project folder. We'll refer to it as  awesome-app .\n- commit and push your existing changes.\n- clean your folder from temporary files and ignored files using  git clean -fdx .\n- rename your project folder to  old-awesome-app .  Now make a new project on the same parent folder as  old-awesome-app .\n- Make a new app using your new project seed in a new  awesome-app  folder.\n- Move into the folder:  cd awesome-app .  Copy over your app files.\n- Locate  app/ ,  styles.css  and the end-to-end test folder in your new project.\n- Replace them with the corresponding files from  ../old-awesome-app .\n- If your styles are not in CSS, you'll need to convert them to CSS since the quickstart doesn't\nuse style preprocessors. You can also add preprocessor support yourself.\n- Copy over the code your app needs from the  environments/  folder, if any.\nYou'll have to find another way to switch environments on the Quickstart.\n- Don't copy  ../old-awesome-app/src/main.ts . It contains custom logic for the CLI environments  feature. Instead compare code and take only what you need.\n- Do the same for  index.html .\n- Compare  ../old-awesome-app/package.json  to the new  ./package.json  and add in your\nthird party libraries and  @types/*  packages, project descriptions and any other fields.\n- Run  npm install  to install any packages you added.\n- Copy over any other files your app needs like images, icons, etc.  You might also need to make adjustments to conform to your new build system.\n- The CLI only allows relative paths in  templateUrl ,  styleUrls  or lazy loaded NgModules.\nYou might need to change these.\n- Polyfills are listed in  ../old-awesome-app/src/polyfills.ts . Incorporate these into the new\nproject.\n- The CLI lists used  script  and  link  tags in the  .angular-cli.json   scripts \nand  styles  array. Check import these in your new project and add them accordingly.  The final step is to copy your git history so you can continue working without losing anything:\n- Copy over the git folder:  cp -r ../old-awesome-app/.git .git \n- Commit and push your changes as normal.  You can now delete  ../old-awesome-app , and you're done!  Every project seed does things slightly different so if you are running into problems be sure\nto ask in their issue tracker.", 
            "title": "Moving your project out of Angular CLI"
        }, 
        {
            "location": "/DevHandbook/", 
            "text": "", 
            "title": "DevHandbook"
        }, 
        {
            "location": "/LifeOfAFeature/", 
            "text": "Life of a feature\n\n\nThis wiki page helps understand how we implement features in the angular-cli tool.\n\n\nYou have an (awesome, I'm sure) idea that you just came out and nobody has thought of it yet. Great! We want to listen to you. But first, we need to discuss it.\n\n\nAgree on the feature\n\n\nThe first thing that you need to do is to create an issue. That issue will be triaged into the proper labels. The \nphase: proposal\n label indicates that this is something new and will get the discussion started.\n\n\nMaybe we will agree that this would be better done in another project (like Angular Core). Or maybe we will postpone it to a future milestone. Or maybe we will all approve that this is something that needs to be designed and done. Thus we move to the next step.\n\n\nCreate a Design Document\n\n\nEvery feature will need to have a design phase. We want the idea to be well thought out and anticipate as many obstacles as possible. And we want to have multiple people know and think about the implications of such feature.\n\n\nSomeone (hopefully you) will be assigned to the issue created, and will create a document. There is a simple template for an \nAngular Design Document\n. Or you can create your own, as long as the content is clear and you cover the same general points.\n\n\nWe want you to take some time to think about every implication your feature will have. Will it be something easy to use? Will it require works from other projects?\n\n\nRequest For Comment\n\n\nOnce you've thought through your feature's design document, post an answer on your issue with a link to it. The label \n\n\nPeople will discuss the design, point flaws or ask questions about it. \n\n\nImplementation\n\n\nOnce everyone is okay with the design, it's time to work on the implementation. This", 
            "title": "LifeOfAFeature"
        }, 
        {
            "location": "/LifeOfAFeature/#life-of-a-feature", 
            "text": "This wiki page helps understand how we implement features in the angular-cli tool.  You have an (awesome, I'm sure) idea that you just came out and nobody has thought of it yet. Great! We want to listen to you. But first, we need to discuss it.", 
            "title": "Life of a feature"
        }, 
        {
            "location": "/LifeOfAFeature/#agree-on-the-feature", 
            "text": "The first thing that you need to do is to create an issue. That issue will be triaged into the proper labels. The  phase: proposal  label indicates that this is something new and will get the discussion started.  Maybe we will agree that this would be better done in another project (like Angular Core). Or maybe we will postpone it to a future milestone. Or maybe we will all approve that this is something that needs to be designed and done. Thus we move to the next step.", 
            "title": "Agree on the feature"
        }, 
        {
            "location": "/LifeOfAFeature/#create-a-design-document", 
            "text": "Every feature will need to have a design phase. We want the idea to be well thought out and anticipate as many obstacles as possible. And we want to have multiple people know and think about the implications of such feature.  Someone (hopefully you) will be assigned to the issue created, and will create a document. There is a simple template for an  Angular Design Document . Or you can create your own, as long as the content is clear and you cover the same general points.  We want you to take some time to think about every implication your feature will have. Will it be something easy to use? Will it require works from other projects?", 
            "title": "Create a Design Document"
        }, 
        {
            "location": "/LifeOfAFeature/#request-for-comment", 
            "text": "Once you've thought through your feature's design document, post an answer on your issue with a link to it. The label   People will discuss the design, point flaws or ask questions about it.", 
            "title": "Request For Comment"
        }, 
        {
            "location": "/LifeOfAFeature/#implementation", 
            "text": "Once everyone is okay with the design, it's time to work on the implementation. This", 
            "title": "Implementation"
        }, 
        {
            "location": "/Upgrading-from-Beta.10-to-Beta.12/", 
            "text": "We changed the build system between beta.10 and beta.14, from SystemJS to Webpack. And with it comes a lot of benefits. To take advantage of these, your app built with the old beta will need to migrate.\n\n\nThis page documents the steps to follow to migrate your old application to using the newest beta.\n\n\nSteps to Migrate\n\n\nThis guide assumes your application is using SystemJS created with the \nbeta.10\n and is up to date to \n= Angular \nRC6\n. Also, make sure you committed everything from your project to Git.\n\n\n\n\n\n\nUpgrade to the latest CLI globally:\n\n\nnpm uninstall -g angular-cli\nnpm cache clean\nnpm install -g angular-cli@latest\n\n\n\n\n\n\n\n\nCreate a new migration project:\n\n\nng new migration-project\n\n\n\n\n\n\n\n\nBackup the new \nsrc/\n to a different folder. We need those files later on.\n\n\nmv src/ src.webpacktemplate/\n\n\n\n\n\n\n\n\nReplace the \nsrc/\n folder with your application's \nsrc/\n folder.\n\n\nmv \n${\nOLD_PATH\n}\n/src src\n\n\n\n\n\n\n\n\nReplace the \ne2e/\n folder with your application's \ne2e/\n folder.\n\n\nmv \n${\nOLD_PATH\n}\n/e2e e2e\n\n\n\n\n\n\n\n\nDelete files that are not needed anymore.\n\n\nrm src/system-config.ts\nrm src/typings.d.ts\n\n\n\n\n\n\n\n\nCopy files that are needed from a new project.\n\n\ncp src.webpacktemplate/polyfills.ts src/\ncp src.webpacktemplate/styles.css src/\ncp src.webpacktemplate/test.ts src/\ncp src.webpacktemplate/tsconfig.json src/\ncp src.webpacktemplate/typings.d.ts src/\n\n\n\n\n\n\n\n\nIn most cases, you can override your \nsrc/main.ts\n with the one in \nsrc.webpacktemplate/main.ts\n, but you might want to be careful if you have custom modifications to it.\n\n\n\n\n\n\nIn most cases, you can override your \nsrc/index.html\n with the one in \nsrc.webpacktemplate/index.html\n, but you might want to be careful if you have custom modifications to it.\n\n\n\n\n\n\nCopy over your environment files. These are now part of the app and not in the root of your repo, and \nenvironment.dev.ts\n is now just \nenvironment.ts\n.\n\n\nmv \n${\nOLD_PATH\n}\n/config/environment.dev.ts src/environments/environment.ts\nmv \n${\nOLD_PATH\n}\n/config/environment.prod.ts src/environments/environment.prod.ts\n\n\n\n\nIf you have any custom environments don't forget to move them too.\n\n\nEnvironments are now listed in the angular-cli.json. Make sure those files matches the files on your disk. More importantly, because they're part of your application, their paths are relative to your \nmain.ts\n.\n\n\n\n\n\n\nInstall npm dependencies that you were using. These may include (but not limited to):\n\n\n\n\nAngular Material 2 (need HammerJS typings)\n\n\nAngularfire2\n\n\nBootstrap\n\n\nFirebase\n\n\njQuery\n\n\nMoment\n\n\n\n\n...\n\n\nnpm install --save \n${\nLIBRARY\n}\n\n\n\n\n\nThese libraries might have typings necessary, which you can install using:\n\n\nnpm install --save-dev @types/\n${\nLIBRARY\n}\n\n\n\n\n\nRemember to copy any configuration or documentation files you have. For example, you might have a \nfirebase.json\n file in the root of your repo. Don't forget your \nLICENSE\n and \nREADME.md\n file!\n\n\n\n\n\n\nRemove all mention of \nmoduleId: module.id\n. In webpack, \nmodule.id\n is a number but Angular expect a string.\n\n\n\n\n\n\nCopy over your assets directory. Assets are now part of the app and not in the root of your repo.\n\n\ncp -R \n${\nOLD_PATH\n}\n/public/ src/assets/\n\n\n\n\nMake sure to also remap your assets in your code. The new assets are served from \n/assets/\n.\n\n\n\n\n\n\nFinally, \nif you're using SASS or LESS\n, you need to rename your \nstyleUrls\n in all your files. Webpack understands LESS and SASS so you can use \nstyleUrls: ['my-component.scss']\n in your component and it will be transcompiled automatically.\n\n\n\n\n\n\nAfter all this, make sure you don't need anything else from the \nsrc.webpacktemplate/\n directory, try to \nng build\n. If everything works, chances are you're good to go. Delete the \nsrc.webpacktemplate/\n directory.\n\n\n\n\n\n\nTime to replace the git folder so you don't lose your history. Delete the \n.git/\n file in the new migration project. Then copy over your old \n.git/\n folder to replace it.\n\n\nrm -rf .git/\ncp -R \n${\nOLD_PATH\n}\n/.git .\n\n\n\n\n\n\n\n\nGo ahead and \nng serve\n your app, then look at the resulting website. Adjust and adapt your code according to errors.", 
            "title": "\u4eceBeta.10\u5347\u7ea7\u5230Beta.12"
        }, 
        {
            "location": "/Upgrading-from-Beta.10-to-Beta.12/#steps-to-migrate", 
            "text": "This guide assumes your application is using SystemJS created with the  beta.10  and is up to date to  = Angular  RC6 . Also, make sure you committed everything from your project to Git.    Upgrade to the latest CLI globally:  npm uninstall -g angular-cli\nnpm cache clean\nnpm install -g angular-cli@latest    Create a new migration project:  ng new migration-project    Backup the new  src/  to a different folder. We need those files later on.  mv src/ src.webpacktemplate/    Replace the  src/  folder with your application's  src/  folder.  mv  ${ OLD_PATH } /src src    Replace the  e2e/  folder with your application's  e2e/  folder.  mv  ${ OLD_PATH } /e2e e2e    Delete files that are not needed anymore.  rm src/system-config.ts\nrm src/typings.d.ts    Copy files that are needed from a new project.  cp src.webpacktemplate/polyfills.ts src/\ncp src.webpacktemplate/styles.css src/\ncp src.webpacktemplate/test.ts src/\ncp src.webpacktemplate/tsconfig.json src/\ncp src.webpacktemplate/typings.d.ts src/    In most cases, you can override your  src/main.ts  with the one in  src.webpacktemplate/main.ts , but you might want to be careful if you have custom modifications to it.    In most cases, you can override your  src/index.html  with the one in  src.webpacktemplate/index.html , but you might want to be careful if you have custom modifications to it.    Copy over your environment files. These are now part of the app and not in the root of your repo, and  environment.dev.ts  is now just  environment.ts .  mv  ${ OLD_PATH } /config/environment.dev.ts src/environments/environment.ts\nmv  ${ OLD_PATH } /config/environment.prod.ts src/environments/environment.prod.ts  If you have any custom environments don't forget to move them too.  Environments are now listed in the angular-cli.json. Make sure those files matches the files on your disk. More importantly, because they're part of your application, their paths are relative to your  main.ts .    Install npm dependencies that you were using. These may include (but not limited to):   Angular Material 2 (need HammerJS typings)  Angularfire2  Bootstrap  Firebase  jQuery  Moment   ...  npm install --save  ${ LIBRARY }   These libraries might have typings necessary, which you can install using:  npm install --save-dev @types/ ${ LIBRARY }   Remember to copy any configuration or documentation files you have. For example, you might have a  firebase.json  file in the root of your repo. Don't forget your  LICENSE  and  README.md  file!    Remove all mention of  moduleId: module.id . In webpack,  module.id  is a number but Angular expect a string.    Copy over your assets directory. Assets are now part of the app and not in the root of your repo.  cp -R  ${ OLD_PATH } /public/ src/assets/  Make sure to also remap your assets in your code. The new assets are served from  /assets/ .    Finally,  if you're using SASS or LESS , you need to rename your  styleUrls  in all your files. Webpack understands LESS and SASS so you can use  styleUrls: ['my-component.scss']  in your component and it will be transcompiled automatically.    After all this, make sure you don't need anything else from the  src.webpacktemplate/  directory, try to  ng build . If everything works, chances are you're good to go. Delete the  src.webpacktemplate/  directory.    Time to replace the git folder so you don't lose your history. Delete the  .git/  file in the new migration project. Then copy over your old  .git/  folder to replace it.  rm -rf .git/\ncp -R  ${ OLD_PATH } /.git .    Go ahead and  ng serve  your app, then look at the resulting website. Adjust and adapt your code according to errors.", 
            "title": "Steps to Migrate"
        }, 
        {
            "location": "/Upgrading-from-Beta.10-to-Beta.14/", 
            "text": "We changed the build system between beta.10 and beta.14, from SystemJS to Webpack. And with it comes a lot of benefits. To take advantage of these, your app built with the old beta will need to migrate.\n\n\nThis page documents the steps to follow to migrate your old application to using the newest beta.\n\n\nSteps to Migrate\n\n\nThis guide assumes your application is using SystemJS created with the \nbeta.10\n and is up to date to \n= Angular \nRC6\n. Also, make sure you committed everything from your project to Git.\n\n\n\n\n\n\nUpgrade to the latest CLI globally:\n\n\nnpm uninstall -g angular-cli\nnpm cache clean\nnpm install -g angular-cli@latest\n\n\n\n\n\n\n\n\nCreate a new migration project:\n\n\nng new migration-project\n\n\n\n\n\n\n\n\nBackup the new \nsrc/\n to a different folder. We need those files later on.\n\n\nmv src/ src.webpacktemplate/\n\n\n\n\n\n\n\n\nReplace the \nsrc/\n folder with your application's \nsrc/\n folder.\n\n\nmv \n${\nOLD_PATH\n}\n/src src\n\n\n\n\n\n\n\n\nReplace the \ne2e/\n folder with your application's \ne2e/\n folder.\n\n\nmv \n${\nOLD_PATH\n}\n/e2e e2e\n\n\n\n\n\n\n\n\nDelete files that are not needed anymore.\n\n\nrm src/system-config.ts\nrm src/typings.d.ts\n\n\n\n\n\n\n\n\nCopy files that are needed from a new project.\n\n\ncp src.webpacktemplate/polyfills.ts src/\ncp src.webpacktemplate/styles.css src/\ncp src.webpacktemplate/test.ts src/\ncp src.webpacktemplate/tsconfig.json src/\ncp src.webpacktemplate/typings.d.ts src/\n\n\n\n\n\n\n\n\nIn most cases, you can override your \nsrc/main.ts\n with the one in \nsrc.webpacktemplate/main.ts\n, but you might want to be careful if you have custom modifications to it.\n\n\n\n\n\n\nIn most cases, you can override your \nsrc/index.html\n with the one in \nsrc.webpacktemplate/index.html\n, but you might want to be careful if you have custom modifications to it.\n\n\n\n\n\n\nCopy over your environment files. These are now part of the app and not in the root of your repo, and \nenvironment.dev.ts\n is now just \nenvironment.ts\n.\n\n\nmv \n${\nOLD_PATH\n}\n/config/environment.dev.ts src/environments/environment.ts\nmv \n${\nOLD_PATH\n}\n/config/environment.prod.ts src/environments/environment.prod.ts\n\n\n\n\nIf you have any custom environments don't forget to move them too.\n\n\nEnvironments are now listed in the angular-cli.json. Make sure those files matches the files on your disk. More importantly, because they're part of your application, their paths are relative to your \nmain.ts\n.\n\n\n\n\n\n\nInstall npm dependencies that you were using. These may include (but not limited to):\n\n\n\n\nAngular Material 2 (need HammerJS typings)\n\n\nAngularfire2\n\n\nBootstrap\n\n\nFirebase\n\n\njQuery\n\n\nMoment\n\n\n\n\n...\n\n\nnpm install --save \n${\nLIBRARY\n}\n\n\n\n\n\nThese libraries might have typings necessary, which you can install using:\n\n\nnpm install --save-dev @types/\n${\nLIBRARY\n}\n\n\n\n\n\nRemember to copy any configuration or documentation files you have. For example, you might have a \nfirebase.json\n file in the root of your repo. Don't forget your \nLICENSE\n and \nREADME.md\n file!\n\n\n\n\n\n\nRemove all mention of \nmoduleId: module.id\n. In webpack, \nmodule.id\n is a number but Angular expect a string.\n\n\n\n\n\n\nCopy over your assets directory. Assets are now part of the app and not in the root of your repo.\n\n\ncp -R \n${\nOLD_PATH\n}\n/public/ src/assets/\n\n\n\n\nMake sure to also remap your assets in your code. The new assets are served from \n/assets/\n.\n\n\n\n\n\n\nFinally, \nif you're using SASS or LESS\n, you need to rename your \nstyleUrls\n in all your files. Webpack understands LESS and SASS so you can use \nstyleUrls: ['my-component.scss']\n in your component and it will be transcompiled automatically.\n\n\n\n\n\n\nAfter all this, make sure you don't need anything else from the \nsrc.webpacktemplate/\n directory, try to \nng build\n. If everything works, chances are you're good to go. Delete the \nsrc.webpacktemplate/\n directory.\n\n\n\n\n\n\nTime to replace the git folder so you don't lose your history. Delete the \n.git/\n file in the new migration project. Then copy over your old \n.git/\n folder to replace it.\n\n\nrm -rf .git/\ncp -R \n${\nOLD_PATH\n}\n/.git .\n\n\n\n\n\n\n\n\nGo ahead and \nng serve\n your app, then look at the resulting website. Adjust and adapt your code according to errors.", 
            "title": "\u4eceBeta.10\u5347\u7ea7\u5230Beta.14"
        }, 
        {
            "location": "/Upgrading-from-Beta.10-to-Beta.14/#steps-to-migrate", 
            "text": "This guide assumes your application is using SystemJS created with the  beta.10  and is up to date to  = Angular  RC6 . Also, make sure you committed everything from your project to Git.    Upgrade to the latest CLI globally:  npm uninstall -g angular-cli\nnpm cache clean\nnpm install -g angular-cli@latest    Create a new migration project:  ng new migration-project    Backup the new  src/  to a different folder. We need those files later on.  mv src/ src.webpacktemplate/    Replace the  src/  folder with your application's  src/  folder.  mv  ${ OLD_PATH } /src src    Replace the  e2e/  folder with your application's  e2e/  folder.  mv  ${ OLD_PATH } /e2e e2e    Delete files that are not needed anymore.  rm src/system-config.ts\nrm src/typings.d.ts    Copy files that are needed from a new project.  cp src.webpacktemplate/polyfills.ts src/\ncp src.webpacktemplate/styles.css src/\ncp src.webpacktemplate/test.ts src/\ncp src.webpacktemplate/tsconfig.json src/\ncp src.webpacktemplate/typings.d.ts src/    In most cases, you can override your  src/main.ts  with the one in  src.webpacktemplate/main.ts , but you might want to be careful if you have custom modifications to it.    In most cases, you can override your  src/index.html  with the one in  src.webpacktemplate/index.html , but you might want to be careful if you have custom modifications to it.    Copy over your environment files. These are now part of the app and not in the root of your repo, and  environment.dev.ts  is now just  environment.ts .  mv  ${ OLD_PATH } /config/environment.dev.ts src/environments/environment.ts\nmv  ${ OLD_PATH } /config/environment.prod.ts src/environments/environment.prod.ts  If you have any custom environments don't forget to move them too.  Environments are now listed in the angular-cli.json. Make sure those files matches the files on your disk. More importantly, because they're part of your application, their paths are relative to your  main.ts .    Install npm dependencies that you were using. These may include (but not limited to):   Angular Material 2 (need HammerJS typings)  Angularfire2  Bootstrap  Firebase  jQuery  Moment   ...  npm install --save  ${ LIBRARY }   These libraries might have typings necessary, which you can install using:  npm install --save-dev @types/ ${ LIBRARY }   Remember to copy any configuration or documentation files you have. For example, you might have a  firebase.json  file in the root of your repo. Don't forget your  LICENSE  and  README.md  file!    Remove all mention of  moduleId: module.id . In webpack,  module.id  is a number but Angular expect a string.    Copy over your assets directory. Assets are now part of the app and not in the root of your repo.  cp -R  ${ OLD_PATH } /public/ src/assets/  Make sure to also remap your assets in your code. The new assets are served from  /assets/ .    Finally,  if you're using SASS or LESS , you need to rename your  styleUrls  in all your files. Webpack understands LESS and SASS so you can use  styleUrls: ['my-component.scss']  in your component and it will be transcompiled automatically.    After all this, make sure you don't need anything else from the  src.webpacktemplate/  directory, try to  ng build . If everything works, chances are you're good to go. Delete the  src.webpacktemplate/  directory.    Time to replace the git folder so you don't lose your history. Delete the  .git/  file in the new migration project. Then copy over your old  .git/  folder to replace it.  rm -rf .git/\ncp -R  ${ OLD_PATH } /.git .    Go ahead and  ng serve  your app, then look at the resulting website. Adjust and adapt your code according to errors.", 
            "title": "Steps to Migrate"
        }, 
        {
            "location": "/xi18n/", 
            "text": "ng xi18n\n\n\nOverview\n\n\nng xi18n\n Extracts i18n messages from the templates.\n\n\nOptions\n\n\n\n  \napp\n\n  \n\n    \n--app\n (aliases: \n-a\n) \ndefault value: 1st app\n\n  \n\n  \n\n    Specifies app name to use.\n  \n\n\n\n\n\n  \ni18n-format\n\n  \n\n    \n--i18n-format\n (aliases: \n-f\n)\n  \n\n  \n\n    Output format for the generated file: either \nxmb\n or \nxlf\n.\n  \n\n\n\n\n\n  \nlocale\n\n  \n\n    \n--locale\n (aliases: \n-l\n)\n  \n\n  \n\n    Specifies the source language of the application.\n  \n\n\n\n\n\n  \nout-file\n\n  \n\n    \n--out-file\n (aliases: \n-of\n)\n  \n\n  \n\n    Name of the file to output.\n  \n\n\n\n\n\n  \noutput-path\n\n  \n\n    \n--output-path\n (aliases: \n-op\n)\n  \n\n  \n\n    Path where output will be placed.\n  \n\n\n\n\n\n  \nprogress\n\n  \n\n    \n--progress\n \ndefault value: true inside TTY, false otherwise\n\n  \n\n  \n\n    Log progress to the console while running.\n  \n\n\n\n\n\n  \nverbose\n\n  \n\n    \n--verbose\n\n  \n\n  \n\n    Adds more details to output logging.", 
            "title": "xi18n"
        }, 
        {
            "location": "/xi18n/#ng-xi18n", 
            "text": "", 
            "title": "ng xi18n"
        }, 
        {
            "location": "/xi18n/#overview", 
            "text": "ng xi18n  Extracts i18n messages from the templates.", 
            "title": "Overview"
        }, 
        {
            "location": "/xi18n/#options", 
            "text": "app \n   \n     --app  (aliases:  -a )  default value: 1st app \n   \n   \n    Specifies app name to use.\n     \n   i18n-format \n   \n     --i18n-format  (aliases:  -f )\n   \n   \n    Output format for the generated file: either  xmb  or  xlf .\n     \n   locale \n   \n     --locale  (aliases:  -l )\n   \n   \n    Specifies the source language of the application.\n     \n   out-file \n   \n     --out-file  (aliases:  -of )\n   \n   \n    Name of the file to output.\n     \n   output-path \n   \n     --output-path  (aliases:  -op )\n   \n   \n    Path where output will be placed.\n     \n   progress \n   \n     --progress   default value: true inside TTY, false otherwise \n   \n   \n    Log progress to the console while running.\n     \n   verbose \n   \n     --verbose \n   \n   \n    Adds more details to output logging.", 
            "title": "Options"
        }
    ]
}